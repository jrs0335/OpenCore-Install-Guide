(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var o,r,s=n[0],l=n[1],d=n[2],u=0,p=[];u<s.length;u++)r=s[u],Object.prototype.hasOwnProperty.call(i,r)&&i[r]&&p.push(i[r][0]),i[r]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(c&&c(n);p.length;)p.shift()();return a.push.apply(a,d||[]),t()}function t(){for(var e,n=0;n<a.length;n++){for(var t=a[n],o=!0,s=1;s<t.length;s++){var l=t[s];0!==i[l]&&(o=!1)}o&&(a.splice(n--,1),e=r(r.s=t[0]))}return e}var o={},i={1:0},a=[];function r(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.e=function(e){var n=[],t=i[e];if(0!==t)if(t)n.push(t[2]);else{var o=new Promise((function(n,o){t=i[e]=[n,o]}));n.push(t[2]=o);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.src=function(e){return r.p+"assets/js/"+({}[e]||e)+"."+{2:"f12e51c6",3:"4d3cc7fd",4:"23f3a8a2",5:"6c9f4f72",6:"11cf485a",7:"0ef1e59b",8:"2d31ce24",9:"28e717b3",10:"48ec6fce",11:"d255a433",12:"0b1bb129",13:"d572f8ae",14:"b5a2dca4",15:"91b0e47b",16:"8abce6b0",17:"e6f88049",18:"f8a68dcb",19:"e577189a",20:"65cbbd6f",21:"dab1c25c",22:"7a051e85",23:"32c69547",24:"172015e1",25:"f41a55d8",26:"328737a7",27:"c8eadfbd",28:"28defb29",29:"56bacc20",30:"ed952c3a",31:"9d969259",32:"8305f535",33:"6e9cd8c2",34:"3d42a97a",35:"20587f57",36:"109412ed",37:"65611533",38:"c06caf45",39:"b3afc75a",40:"655056d2",41:"a53962f2",42:"2950b43c",43:"e635ce8c",44:"31e173e4",45:"d0f20290",46:"2e30db4c",47:"4b5ab4e4",48:"97bf7827",49:"faa202c5",50:"06c2d145",51:"0458c9f3",52:"282869a3",53:"91edf636",54:"4b24be03",55:"31dbeb99",56:"6bdc2493",57:"a0eec674",58:"29b7a45b",59:"03340549",60:"90613360",61:"9bad8401",62:"7725b64f",63:"3f024771",64:"ea751565",65:"5cb6d38c",66:"0677f039",67:"2d8cadcd",68:"34b8a3bc",69:"f1f94349",70:"3f162511",71:"37b85a56",72:"33742f62",73:"b7805c8f",74:"dc36ce73",75:"5537224b",76:"c3ce3d1d",77:"3717bca6",78:"e1f754e9",79:"086b5e7f",80:"9a49c582",81:"734f9db8",82:"5288004e",83:"c2fec823"}[e]+".js"}(e);var l=new Error;a=function(n){s.onerror=s.onload=null,clearTimeout(d);var t=i[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,t[1](l)}i[e]=void 0}};var d=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(n)},r.m=e,r.c=o,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/OpenCore-Install-Guide/",r.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var d=0;d<s.length;d++)n(s[d]);var c=l;a.push([100,0]),t()}([function(e,n,t){var o=t(53),i=o.all;e.exports=o.IS_HTMLDDA?function(e){return"function"==typeof e||e===i}:function(e){return"function"==typeof e}},function(e,n){var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){var o=t(27),i=Function.prototype,a=i.call,r=o&&i.bind.bind(a,a);e.exports=o?r:function(e){return function(){return a.apply(e,arguments)}}},function(e,n,t){var o=t(2);e.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var o=t(67),i="object"==typeof self&&self&&self.Object===Object&&self,a=o||i||Function("return this")();e.exports=a},function(e,n,t){var o=t(3),i=t(30),a=o({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,n){return a(i(e),n)}},function(e,n,t){var o=t(0),i=t(53),a=i.all;e.exports=i.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:o(e)||e===a}:function(e){return"object"==typeof e?null!==e:o(e)}},function(e,n,t){var o=t(159),i=t(162);e.exports=function(e,n){var t=i(e,n);return o(t)?t:void 0}},function(e,n,t){"use strict";function o(e,n,t,o,i,a,r,s){var l,d="function"==typeof e?e.options:e;if(n&&(d.render=n,d.staticRenderFns=t,d._compiled=!0),o&&(d.functional=!0),a&&(d._scopeId="data-v-"+a),r?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},d._ssrRegister=l):i&&(l=s?function(){i.call(this,(d.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(d.functional){d._injectStyles=l;var c=d.render;d.render=function(e,n){return l.call(n),c(e,n)}}else{var u=d.beforeCreate;d.beforeCreate=u?[].concat(u,l):[l]}return{exports:e,options:d}}t.d(n,"a",(function(){return o}))},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){var o=t(13),i=t(144),a=t(145),r=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?i(e):a(e)}},function(e,n,t){var o=t(6).Symbol;e.exports=o},function(e,n,t){var o=t(4),i=t(62),a=t(96),r=t(25),s=t(52),l=TypeError,d=Object.defineProperty,c=Object.getOwnPropertyDescriptor;n.f=o?a?function(e,n,t){if(r(e),n=s(n),r(t),"function"==typeof e&&"prototype"===n&&"value"in t&&"writable"in t&&!t.writable){var o=c(e,n);o&&o.writable&&(e[n]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return d(e,n,t)}:d:function(e,n,t){if(r(e),n=s(n),r(t),i)try{return d(e,n,t)}catch(e){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){var o=t(3),i=o({}.toString),a=o("".slice);e.exports=function(e){return a(i(e),8,-1)}},function(e,n,t){var o=t(1),i=t(0),a=function(e){return i(e)?e:void 0};e.exports=function(e,n){return arguments.length<2?a(o[e]):o[e]&&o[e][n]}},function(e,n,t){var o=t(4),i=t(14),a=t(33);e.exports=o?function(e,n,t){return i.f(e,n,a(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var o=t(149),i=t(150),a=t(151),r=t(152),s=t(153);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(69);e.exports=function(e,n){for(var t=e.length;t--;)if(o(e[t][0],n))return t;return-1}},function(e,n,t){var o=t(9)(Object,"create");e.exports=o},function(e,n,t){var o=t(171);e.exports=function(e,n){var t=e.__data__;return o(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var o=t(43);e.exports=function(e){if("string"==typeof e||o(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,a=/^0o[0-7]+$/i,r=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,d=s||l||Function("return this")(),c=Object.prototype.toString,u=Math.max,p=Math.min,h=function(){return d.Date.now()};function m(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function f(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==c.call(e)}(e))return NaN;if(m(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=m(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var s=i.test(e);return s||a.test(e)?r(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,n,t){var o,i,a,r,s,l,d=0,c=!1,g=!1,b=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function y(n){var t=o,a=i;return o=i=void 0,d=n,r=e.apply(a,t)}function v(e){return d=e,s=setTimeout(k,n),c?y(e):r}function w(e){var t=e-l;return void 0===l||t>=n||t<0||g&&e-d>=a}function k(){var e=h();if(w(e))return S(e);s=setTimeout(k,function(e){var t=n-(e-l);return g?p(t,a-(e-d)):t}(e))}function S(e){return s=void 0,b&&o?y(e):(o=i=void 0,r)}function x(){var e=h(),t=w(e);if(o=arguments,i=this,l=e,t){if(void 0===s)return v(l);if(g)return s=setTimeout(k,n),y(l)}return void 0===s&&(s=setTimeout(k,n)),r}return n=f(n)||0,m(t)&&(c=!!t.leading,a=(g="maxWait"in t)?u(f(t.maxWait)||0,n):a,b="trailing"in t?!!t.trailing:b),x.cancel=function(){void 0!==s&&clearTimeout(s),d=0,o=l=i=s=void 0},x.flush=function(){return void 0===s?r:S(h())},x}},function(e,n,t){var o,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(o=function(){var e,n,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(e,n,t){return e<n?n:e>t?t:e}function a(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(o[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=i(e,o.minimum,1),t.status=1===e?null:e;var l=t.render(!n),d=l.querySelector(o.barSelector),c=o.speed,u=o.easing;return l.offsetWidth,r((function(n){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),s(d,function(e,n,t){var i;return(i="translate3d"===o.positionUsing?{transform:"translate3d("+a(e)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(e)+"%,0)"}:{"margin-left":a(e)+"%"}).transition="all "+n+"ms "+t,i}(e,c,u)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+c+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),c)}),c)):setTimeout(n,c)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),o.trickleSpeed)};return o.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*i(Math.random()*n,.1,.95)),n=i(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},e=0,n=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===n&&t.start(),e++,n++,o.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");d(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=o.template;var i,r=n.querySelector(o.barSelector),l=e?"-100":a(t.status||0),c=document.querySelector(o.parent);return s(r,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(i=n.querySelector(o.spinnerSelector))&&p(i),c!=document.body&&d(c,"nprogress-custom-parent"),c.appendChild(n),n},t.remove=function(){c(document.documentElement,"nprogress-busy"),c(document.querySelector(o.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&p(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var o,i=e.length,a=n.charAt(0).toUpperCase()+n.slice(1);i--;)if((o=e[i]+a)in t)return o;return n}(t))}function o(e,n,o){n=t(n),e.style[n]=o}return function(e,n){var t,i,a=arguments;if(2==a.length)for(t in n)void 0!==(i=n[t])&&n.hasOwnProperty(t)&&o(e,t,i);else o(e,a[1],a[2])}}();function l(e,n){return("string"==typeof e?e:u(e)).indexOf(" "+n+" ")>=0}function d(e,n){var t=u(e),o=t+n;l(t,n)||(e.className=o.substring(1))}function c(e,n){var t,o=u(e);l(e,n)&&(t=o.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function p(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?o.call(n,t,n,e):o)||(e.exports=i)},function(e,n,t){var o=t(8),i=String,a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not an object")}},function(e,n,t){var o=t(1),i=t(49).f,a=t(17),r=t(108),s=t(35),l=t(63),d=t(121);e.exports=function(e,n){var t,c,u,p,h,m=e.target,f=e.global,g=e.stat;if(t=f?o:g?o[m]||s(m,{}):(o[m]||{}).prototype)for(c in n){if(p=n[c],u=e.dontCallGetSet?(h=i(t,c))&&h.value:t[c],!d(f?c:m+(g?".":"#")+c,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&a(p,"sham",!0),r(t,c,p,e)}}},function(e,n,t){var o=t(2);e.exports=!o((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,n,t){var o=t(45),i=t(50);e.exports=function(e){return o(i(e))}},function(e,n,t){var o=t(1),i=t(59),a=t(7),r=t(61),s=t(57),l=t(56),d=i("wks"),c=o.Symbol,u=c&&c.for,p=l?c:c&&c.withoutSetter||r;e.exports=function(e){if(!a(d,e)||!s&&"string"!=typeof d[e]){var n="Symbol."+e;s&&a(c,e)?d[e]=c[e]:d[e]=l&&u?u(n):p(n)}return d[e]}},function(e,n,t){var o=t(50),i=Object;e.exports=function(e){return i(o(e))}},function(e,n,t){var o=t(119);e.exports=function(e){return o(e.length)}},function(e,n,t){var o=t(27),i=Function.prototype.call;e.exports=o?i.bind(i):function(){return i.apply(i,arguments)}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){var o=t(1),i=t(35),a=o["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=a},function(e,n,t){var o=t(1),i=Object.defineProperty;e.exports=function(e,n){try{i(o,e,{value:n,configurable:!0,writable:!0})}catch(t){o[e]=n}return n}},function(e,n,t){var o=t(143),i=t(11),a=Object.prototype,r=a.hasOwnProperty,s=a.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return i(e)&&r.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,n,t){var o=t(9)(t(6),"Map");e.exports=o},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var o=t(163),i=t(170),a=t(172),r=t(173),s=t(174);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var o=t(5),i=t(43),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,n){if(o(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!i(e))||(r.test(e)||!a.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==o(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){var o=t(3),i=t(2),a=t(15),r=Object,s=o("".split);e.exports=i((function(){return!r("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?s(e,""):r(e)}:r},function(e,n,t){var o=t(0),i=t(106),a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not a function")}},function(e,n){e.exports={}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){var o=t(4),i=t(32),a=t(102),r=t(33),s=t(28),l=t(52),d=t(7),c=t(62),u=Object.getOwnPropertyDescriptor;n.f=o?u:function(e,n){if(e=s(e),n=l(n),c)try{return u(e,n)}catch(e){}if(d(e,n))return r(!i(a.f,e,n),e[n])}},function(e,n,t){var o=t(51),i=TypeError;e.exports=function(e){if(o(e))throw i("Can't call method on "+e);return e}},function(e,n){e.exports=function(e){return null==e}},function(e,n,t){var o=t(103),i=t(54);e.exports=function(e){var n=o(e,"string");return i(n)?n:n+""}},function(e,n){var t="object"==typeof document&&document.all,o=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:o}},function(e,n,t){var o=t(16),i=t(0),a=t(55),r=t(56),s=Object;e.exports=r?function(e){return"symbol"==typeof e}:function(e){var n=o("Symbol");return i(n)&&a(n.prototype,s(e))}},function(e,n,t){var o=t(3);e.exports=o({}.isPrototypeOf)},function(e,n,t){var o=t(57);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){var o=t(58),i=t(2);e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(e,n,t){var o,i,a=t(1),r=t(104),s=a.process,l=a.Deno,d=s&&s.versions||l&&l.version,c=d&&d.v8;c&&(i=(o=c.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!i&&r&&(!(o=r.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=r.match(/Chrome\/(\d+)/))&&(i=+o[1]),e.exports=i},function(e,n,t){var o=t(60),i=t(34);(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.27.1",mode:o?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.27.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,n){e.exports=!1},function(e,n,t){var o=t(3),i=0,a=Math.random(),r=o(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+r(++i+a,36)}},function(e,n,t){var o=t(4),i=t(2),a=t(95);e.exports=!o&&!i((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){var o=t(7),i=t(114),a=t(49),r=t(14);e.exports=function(e,n,t){for(var s=i(n),l=r.f,d=a.f,c=0;c<s.length;c++){var u=s[c];o(e,u)||t&&o(t,u)||l(e,u,d(n,u))}}},function(e,n,t){var o=t(118);e.exports=function(e){var n=+e;return n!=n||0===n?0:o(n)}},function(e,n,t){var o=t(3),i=t(25),a=t(131);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),n=t instanceof Array}catch(e){}return function(t,o){return i(t),a(o),n?e(t,o):t.__proto__=o,t}}():void 0)},function(e,n){e.exports=function(e,n){for(var t=-1,o=n.length,i=e.length;++t<o;)e[i+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var o=t(18),i=t(154),a=t(155),r=t(156),s=t(157),l=t(158);function d(e){var n=this.__data__=new o(e);this.size=n.size}d.prototype.clear=i,d.prototype.delete=a,d.prototype.get=r,d.prototype.has=s,d.prototype.set=l,e.exports=d},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var o=t(12),i=t(38);e.exports=function(e){if(!i(e))return!1;var n=o(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var o=t(175),i=t(11);e.exports=function e(n,t,a,r,s){return n===t||(null==n||null==t||!i(n)&&!i(t)?n!=n&&t!=t:o(n,t,a,r,e,s))}},function(e,n,t){var o=t(74),i=t(178),a=t(75);e.exports=function(e,n,t,r,s,l){var d=1&t,c=e.length,u=n.length;if(c!=u&&!(d&&u>c))return!1;var p=l.get(e),h=l.get(n);if(p&&h)return p==n&&h==e;var m=-1,f=!0,g=2&t?new o:void 0;for(l.set(e,n),l.set(n,e);++m<c;){var b=e[m],y=n[m];if(r)var v=d?r(y,b,m,n,e,l):r(b,y,m,e,n,l);if(void 0!==v){if(v)continue;f=!1;break}if(g){if(!i(n,(function(e,n){if(!a(g,n)&&(b===e||s(b,e,t,r,l)))return g.push(n)}))){f=!1;break}}else if(b!==y&&!s(b,y,t,r,l)){f=!1;break}}return l.delete(e),l.delete(n),f}},function(e,n,t){var o=t(39),i=t(176),a=t(177);function r(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new o;++n<t;)this.add(e[n])}r.prototype.add=r.prototype.push=i,r.prototype.has=a,e.exports=r},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var o=t(188),i=t(194),a=t(80);e.exports=function(e){return a(e)?o(e):i(e)}},function(e,n,t){(function(e){var o=t(6),i=t(190),a=n&&!n.nodeType&&n,r=a&&"object"==typeof e&&e&&!e.nodeType&&e,s=r&&r.exports===a?o.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;e.exports=l}).call(this,t(48)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var o=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==o||"symbol"!=o&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var o=t(191),i=t(192),a=t(193),r=a&&a.isTypedArray,s=r?i(r):o;e.exports=s},function(e,n,t){var o=t(70),i=t(41);e.exports=function(e){return null!=e&&i(e.length)&&!o(e)}},function(e,n,t){var o=t(9)(t(6),"Set");e.exports=o},function(e,n,t){var o=t(38);e.exports=function(e){return e==e&&!o(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var o=t(85),i=t(22);e.exports=function(e,n){for(var t=0,a=(n=o(n,e)).length;null!=e&&t<a;)e=e[i(n[t++])];return t&&t==a?e:void 0}},function(e,n,t){var o=t(5),i=t(42),a=t(205),r=t(208);e.exports=function(e,n){return o(e)?e:i(e,n)?[e]:a(r(e))}},function(e,n,t){},function(e,n,t){"use strict";n.a=["ThemeManager","BackToTop"]},function(e,n,t){},function(e,n,t){},function(e,n,t){var o=t(141),i=t(146),a=t(217),r=t(225),s=t(234),l=t(99),d=a((function(e){var n=l(e);return s(n)&&(n=void 0),r(o(e,1,s,!0),i(n,2))}));e.exports=d},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var o=/["'&<>]/;e.exports=function(e){var n,t=""+e,i=o.exec(t);if(!i)return t;var a="",r=0,s=0;for(r=i.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==r&&(a+=t.substring(s,r)),s=r+1,a+=n}return s!==r?a+t.substring(s,r):a}},function(e,n,t){!function(){"use strict";e.exports={polyfill:function(){var e=window,n=document;if(!("scrollBehavior"in n.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var t,o=e.HTMLElement||e.Element,i={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:o.prototype.scroll||s,scrollIntoView:o.prototype.scrollIntoView},a=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,r=(t=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(t)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?m.call(e,n.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):i.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(l(arguments[0])?i.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):m.call(e,n.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==l(arguments[0])){var e=arguments[0].left,n=arguments[0].top;m.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===n?this.scrollTop:~~n)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==l(arguments[0])){var t=p(this),o=t.getBoundingClientRect(),a=this.getBoundingClientRect();t!==n.body?(m.call(this,t,t.scrollLeft+a.left-o.left,t.scrollTop+a.top-o.top),"fixed"!==e.getComputedStyle(t).position&&e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:a.left,top:a.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function s(e,n){this.scrollLeft=e,this.scrollTop=n}function l(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function d(e,n){return"Y"===n?e.clientHeight+r<e.scrollHeight:"X"===n?e.clientWidth+r<e.scrollWidth:void 0}function c(n,t){var o=e.getComputedStyle(n,null)["overflow"+t];return"auto"===o||"scroll"===o}function u(e){var n=d(e,"Y")&&c(e,"Y"),t=d(e,"X")&&c(e,"X");return n||t}function p(e){for(;e!==n.body&&!1===u(e);)e=e.parentNode||e.host;return e}function h(n){var t,o,i,r,s=(a()-n.startTime)/468;r=s=s>1?1:s,t=.5*(1-Math.cos(Math.PI*r)),o=n.startX+(n.x-n.startX)*t,i=n.startY+(n.y-n.startY)*t,n.method.call(n.scrollable,o,i),o===n.x&&i===n.y||e.requestAnimationFrame(h.bind(e,n))}function m(t,o,r){var l,d,c,u,p=a();t===n.body?(l=e,d=e.scrollX||e.pageXOffset,c=e.scrollY||e.pageYOffset,u=i.scroll):(l=t,d=t.scrollLeft,c=t.scrollTop,u=s),h({scrollable:l,method:u,startTime:p,startX:d,startY:c,x:o,y:r})}}}}()},function(e,n,t){"use strict";var o=t(26),i=t(30),a=t(31),r=t(125),s=t(127),l=t(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)})),d=!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}();o({target:"Array",proto:!0,arity:1,forced:l||d},{push:function(e){var n=i(this),t=a(n),o=arguments.length;s(t+o);for(var l=0;l<o;l++)n[t]=arguments[l],t++;return r(n,t),t}})},function(e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){var o=t(1),i=t(8),a=o.document,r=i(a)&&i(a.createElement);e.exports=function(e){return r?a.createElement(e):{}}},function(e,n,t){var o=t(4),i=t(2);e.exports=o&&i((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,n,t){var o=t(59),i=t(61),a=o("keys");e.exports=function(e){return a[e]||(a[e]=i(e))}},function(e,n,t){var o=t(3),i=t(7),a=t(28),r=t(116).indexOf,s=t(47),l=o([].push);e.exports=function(e,n){var t,o=a(e),d=0,c=[];for(t in o)!i(s,t)&&i(o,t)&&l(c,t);for(;n.length>d;)i(o,t=n[d++])&&(~r(c,t)||l(c,t));return c}},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){e.exports=t(242)},function(e,n,t){"use strict";var o=t(26),i=t(122).left,a=t(123),r=t(58),s=t(124);o({target:"Array",proto:!0,forced:!a("reduce")||!s&&r>79&&r<83},{reduce:function(e){var n=arguments.length;return i(this,e,n,n>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var o={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,a=i&&!o.call({1:2},1);n.f=a?function(e){var n=i(this,e);return!!n&&n.enumerable}:o},function(e,n,t){var o=t(32),i=t(8),a=t(54),r=t(105),s=t(107),l=t(29),d=TypeError,c=l("toPrimitive");e.exports=function(e,n){if(!i(e)||a(e))return e;var t,l=r(e,c);if(l){if(void 0===n&&(n="default"),t=o(l,e,n),!i(t)||a(t))return t;throw d("Can't convert object to primitive value")}return void 0===n&&(n="number"),s(e,n)}},function(e,n,t){var o=t(16);e.exports=o("navigator","userAgent")||""},function(e,n,t){var o=t(46),i=t(51);e.exports=function(e,n){var t=e[n];return i(t)?void 0:o(t)}},function(e,n){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},function(e,n,t){var o=t(32),i=t(0),a=t(8),r=TypeError;e.exports=function(e,n){var t,s;if("string"===n&&i(t=e.toString)&&!a(s=o(t,e)))return s;if(i(t=e.valueOf)&&!a(s=o(t,e)))return s;if("string"!==n&&i(t=e.toString)&&!a(s=o(t,e)))return s;throw r("Can't convert object to primitive value")}},function(e,n,t){var o=t(0),i=t(14),a=t(109),r=t(35);e.exports=function(e,n,t,s){s||(s={});var l=s.enumerable,d=void 0!==s.name?s.name:n;if(o(t)&&a(t,d,s),s.global)l?e[n]=t:r(n,t);else{try{s.unsafe?e[n]&&(l=!0):delete e[n]}catch(e){}l?e[n]=t:i.f(e,n,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},function(e,n,t){var o=t(2),i=t(0),a=t(7),r=t(4),s=t(110).CONFIGURABLE,l=t(111),d=t(112),c=d.enforce,u=d.get,p=Object.defineProperty,h=r&&!o((function(){return 8!==p((function(){}),"length",{value:8}).length})),m=String(String).split("String"),f=e.exports=function(e,n,t){"Symbol("===String(n).slice(0,7)&&(n="["+String(n).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(n="get "+n),t&&t.setter&&(n="set "+n),(!a(e,"name")||s&&e.name!==n)&&(r?p(e,"name",{value:n,configurable:!0}):e.name=n),h&&t&&a(t,"arity")&&e.length!==t.arity&&p(e,"length",{value:t.arity});try{t&&a(t,"constructor")&&t.constructor?r&&p(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var o=c(e);return a(o,"source")||(o.source=m.join("string"==typeof n?n:"")),e};Function.prototype.toString=f((function(){return i(this)&&u(this).source||l(this)}),"toString")},function(e,n,t){var o=t(4),i=t(7),a=Function.prototype,r=o&&Object.getOwnPropertyDescriptor,s=i(a,"name"),l=s&&"something"===function(){}.name,d=s&&(!o||o&&r(a,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:d}},function(e,n,t){var o=t(3),i=t(0),a=t(34),r=o(Function.toString);i(a.inspectSource)||(a.inspectSource=function(e){return r(e)}),e.exports=a.inspectSource},function(e,n,t){var o,i,a,r=t(113),s=t(1),l=t(8),d=t(17),c=t(7),u=t(34),p=t(97),h=t(47),m=s.TypeError,f=s.WeakMap;if(r||u.state){var g=u.state||(u.state=new f);g.get=g.get,g.has=g.has,g.set=g.set,o=function(e,n){if(g.has(e))throw m("Object already initialized");return n.facade=e,g.set(e,n),n},i=function(e){return g.get(e)||{}},a=function(e){return g.has(e)}}else{var b=p("state");h[b]=!0,o=function(e,n){if(c(e,b))throw m("Object already initialized");return n.facade=e,d(e,b,n),n},i=function(e){return c(e,b)?e[b]:{}},a=function(e){return c(e,b)}}e.exports={set:o,get:i,has:a,enforce:function(e){return a(e)?i(e):o(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=i(n)).type!==e)throw m("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){var o=t(1),i=t(0),a=o.WeakMap;e.exports=i(a)&&/native code/.test(String(a))},function(e,n,t){var o=t(16),i=t(3),a=t(115),r=t(120),s=t(25),l=i([].concat);e.exports=o("Reflect","ownKeys")||function(e){var n=a.f(s(e)),t=r.f;return t?l(n,t(e)):n}},function(e,n,t){var o=t(98),i=t(94).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,i)}},function(e,n,t){var o=t(28),i=t(117),a=t(31),r=function(e){return function(n,t,r){var s,l=o(n),d=a(l),c=i(r,d);if(e&&t!=t){for(;d>c;)if((s=l[c++])!=s)return!0}else for(;d>c;c++)if((e||c in l)&&l[c]===t)return e||c||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){var o=t(64),i=Math.max,a=Math.min;e.exports=function(e,n){var t=o(e);return t<0?i(t+n,0):a(t,n)}},function(e,n){var t=Math.ceil,o=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?o:t)(n)}},function(e,n,t){var o=t(64),i=Math.min;e.exports=function(e){return e>0?i(o(e),9007199254740991):0}},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n,t){var o=t(2),i=t(0),a=/#|\.prototype\./,r=function(e,n){var t=l[s(e)];return t==c||t!=d&&(i(n)?o(n):!!n)},s=r.normalize=function(e){return String(e).replace(a,".").toLowerCase()},l=r.data={},d=r.NATIVE="N",c=r.POLYFILL="P";e.exports=r},function(e,n,t){var o=t(46),i=t(30),a=t(45),r=t(31),s=TypeError,l=function(e){return function(n,t,l,d){o(t);var c=i(n),u=a(c),p=r(c),h=e?p-1:0,m=e?-1:1;if(l<2)for(;;){if(h in u){d=u[h],h+=m;break}if(h+=m,e?h<0:p<=h)throw s("Reduce of empty array with no initial value")}for(;e?h>=0:p>h;h+=m)h in u&&(d=t(d,u[h],h,c));return d}};e.exports={left:l(!1),right:l(!0)}},function(e,n,t){"use strict";var o=t(2);e.exports=function(e,n){var t=[][e];return!!t&&o((function(){t.call(null,n||function(){return 1},1)}))}},function(e,n,t){var o=t(15),i=t(1);e.exports="process"==o(i.process)},function(e,n,t){"use strict";var o=t(4),i=t(126),a=TypeError,r=Object.getOwnPropertyDescriptor,s=o&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=s?function(e,n){if(i(e)&&!r(e,"length").writable)throw a("Cannot set read only .length");return e.length=n}:function(e,n){return e.length=n}},function(e,n,t){var o=t(15);e.exports=Array.isArray||function(e){return"Array"==o(e)}},function(e,n){var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},function(e,n,t){var o=t(26),i=t(1),a=t(129),r=t(130),s=i.WebAssembly,l=7!==Error("e",{cause:7}).cause,d=function(e,n){var t={};t[e]=r(e,n,l),o({global:!0,constructor:!0,arity:1,forced:l},t)},c=function(e,n){if(s&&s[e]){var t={};t[e]=r("WebAssembly."+e,n,l),o({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};d("Error",(function(e){return function(n){return a(e,this,arguments)}})),d("EvalError",(function(e){return function(n){return a(e,this,arguments)}})),d("RangeError",(function(e){return function(n){return a(e,this,arguments)}})),d("ReferenceError",(function(e){return function(n){return a(e,this,arguments)}})),d("SyntaxError",(function(e){return function(n){return a(e,this,arguments)}})),d("TypeError",(function(e){return function(n){return a(e,this,arguments)}})),d("URIError",(function(e){return function(n){return a(e,this,arguments)}})),c("CompileError",(function(e){return function(n){return a(e,this,arguments)}})),c("LinkError",(function(e){return function(n){return a(e,this,arguments)}})),c("RuntimeError",(function(e){return function(n){return a(e,this,arguments)}}))},function(e,n,t){var o=t(27),i=Function.prototype,a=i.apply,r=i.call;e.exports="object"==typeof Reflect&&Reflect.apply||(o?r.bind(a):function(){return r.apply(a,arguments)})},function(e,n,t){"use strict";var o=t(16),i=t(7),a=t(17),r=t(55),s=t(65),l=t(63),d=t(132),c=t(133),u=t(134),p=t(138),h=t(139),m=t(140),f=t(4),g=t(60);e.exports=function(e,n,t,b){var y=b?2:1,v=e.split("."),w=v[v.length-1],k=o.apply(null,v);if(k){var S=k.prototype;if(!g&&i(S,"cause")&&delete S.cause,!t)return k;var x=o("Error"),I=n((function(e,n){var t=u(b?n:e,void 0),o=b?new k(e):new k;return void 0!==t&&a(o,"message",t),m&&a(o,"stack",h(o.stack,2)),this&&r(S,this)&&c(o,this,I),arguments.length>y&&p(o,arguments[y]),o}));if(I.prototype=S,"Error"!==w?s?s(I,x):l(I,x,{name:!0}):f&&"stackTraceLimit"in k&&(d(I,k,"stackTraceLimit"),d(I,k,"prepareStackTrace")),l(I,k),!g)try{S.name!==w&&a(S,"name",w),S.constructor=I}catch(e){}return I}}},function(e,n,t){var o=t(0),i=String,a=TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw a("Can't set "+i(e)+" as a prototype")}},function(e,n,t){var o=t(14).f;e.exports=function(e,n,t){t in e||o(e,t,{configurable:!0,get:function(){return n[t]},set:function(e){n[t]=e}})}},function(e,n,t){var o=t(0),i=t(8),a=t(65);e.exports=function(e,n,t){var r,s;return a&&o(r=n.constructor)&&r!==t&&i(s=r.prototype)&&s!==t.prototype&&a(e,s),e}},function(e,n,t){var o=t(135);e.exports=function(e,n){return void 0===e?arguments.length<2?"":n:o(e)}},function(e,n,t){var o=t(136),i=String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},function(e,n,t){var o=t(137),i=t(0),a=t(15),r=t(29)("toStringTag"),s=Object,l="Arguments"==a(function(){return arguments}());e.exports=o?a:function(e){var n,t,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=s(e),r))?t:l?a(n):"Object"==(o=a(n))&&i(n.callee)?"Arguments":o}},function(e,n,t){var o={};o[t(29)("toStringTag")]="z",e.exports="[object z]"===String(o)},function(e,n,t){var o=t(8),i=t(17);e.exports=function(e,n){o(n)&&"cause"in n&&i(e,"cause",n.cause)}},function(e,n,t){var o=t(3),i=Error,a=o("".replace),r=String(i("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(r);e.exports=function(e,n){if(l&&"string"==typeof e&&!i.prepareStackTrace)for(;n--;)e=a(e,s,"");return e}},function(e,n,t){var o=t(2),i=t(33);e.exports=!o((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",i(1,7)),7!==e.stack)}))},function(e,n,t){var o=t(66),i=t(142);e.exports=function e(n,t,a,r,s){var l=-1,d=n.length;for(a||(a=i),s||(s=[]);++l<d;){var c=n[l];t>0&&a(c)?t>1?e(c,t-1,a,r,s):o(s,c):r||(s[s.length]=c)}return s}},function(e,n,t){var o=t(13),i=t(36),a=t(5),r=o?o.isConcatSpreadable:void 0;e.exports=function(e){return a(e)||i(e)||!!(r&&e&&e[r])}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return i(e)&&"[object Arguments]"==o(e)}},function(e,n,t){var o=t(13),i=Object.prototype,a=i.hasOwnProperty,r=i.toString,s=o?o.toStringTag:void 0;e.exports=function(e){var n=a.call(e,s),t=e[s];try{e[s]=void 0;var o=!0}catch(e){}var i=r.call(e);return o&&(n?e[s]=t:delete e[s]),i}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var o=t(147),i=t(203),a=t(44),r=t(5),s=t(214);e.exports=function(e){return"function"==typeof e?e:null==e?a:"object"==typeof e?r(e)?i(e[0],e[1]):o(e):s(e)}},function(e,n,t){var o=t(148),i=t(202),a=t(83);e.exports=function(e){var n=i(e);return 1==n.length&&n[0][2]?a(n[0][0],n[0][1]):function(t){return t===e||o(t,e,n)}}},function(e,n,t){var o=t(68),i=t(72);e.exports=function(e,n,t,a){var r=t.length,s=r,l=!a;if(null==e)return!s;for(e=Object(e);r--;){var d=t[r];if(l&&d[2]?d[1]!==e[d[0]]:!(d[0]in e))return!1}for(;++r<s;){var c=(d=t[r])[0],u=e[c],p=d[1];if(l&&d[2]){if(void 0===u&&!(c in e))return!1}else{var h=new o;if(a)var m=a(u,p,c,e,n,h);if(!(void 0===m?i(p,u,3,a,h):m))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var o=t(19),i=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=o(n,e);return!(t<0)&&(t==n.length-1?n.pop():i.call(n,t,1),--this.size,!0)}},function(e,n,t){var o=t(19);e.exports=function(e){var n=this.__data__,t=o(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var o=t(19);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,n,t){var o=t(19);e.exports=function(e,n){var t=this.__data__,i=o(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this}},function(e,n,t){var o=t(18);e.exports=function(){this.__data__=new o,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var o=t(18),i=t(37),a=t(39);e.exports=function(e,n){var t=this.__data__;if(t instanceof o){var r=t.__data__;if(!i||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new a(r)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var o=t(70),i=t(160),a=t(38),r=t(71),s=/^\[object .+?Constructor\]$/,l=Function.prototype,d=Object.prototype,c=l.toString,u=d.hasOwnProperty,p=RegExp("^"+c.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||i(e))&&(o(e)?p:s).test(r(e))}},function(e,n,t){var o,i=t(161),a=(o=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!a&&a in e}},function(e,n,t){var o=t(6)["__core-js_shared__"];e.exports=o},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var o=t(164),i=t(18),a=t(37);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(a||i),string:new o}}},function(e,n,t){var o=t(165),i=t(166),a=t(167),r=t(168),s=t(169);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(20);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var o=t(20),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(o){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(n,e)?n[e]:void 0}},function(e,n,t){var o=t(20),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return o?void 0!==n[e]:i.call(n,e)}},function(e,n,t){var o=t(20);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=o&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var o=t(21);e.exports=function(e){var n=o(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var o=t(21);e.exports=function(e){return o(this,e).get(e)}},function(e,n,t){var o=t(21);e.exports=function(e){return o(this,e).has(e)}},function(e,n,t){var o=t(21);e.exports=function(e,n){var t=o(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this}},function(e,n,t){var o=t(68),i=t(73),a=t(179),r=t(182),s=t(198),l=t(5),d=t(77),c=t(79),u="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,h,m,f){var g=l(e),b=l(n),y=g?"[object Array]":s(e),v=b?"[object Array]":s(n),w=(y="[object Arguments]"==y?u:y)==u,k=(v="[object Arguments]"==v?u:v)==u,S=y==v;if(S&&d(e)){if(!d(n))return!1;g=!0,w=!1}if(S&&!w)return f||(f=new o),g||c(e)?i(e,n,t,h,m,f):a(e,n,y,t,h,m,f);if(!(1&t)){var x=w&&p.call(e,"__wrapped__"),I=k&&p.call(n,"__wrapped__");if(x||I){var C=x?e.value():e,A=I?n.value():n;return f||(f=new o),m(C,A,t,h,f)}}return!!S&&(f||(f=new o),r(e,n,t,h,m,f))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length;++t<o;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var o=t(13),i=t(180),a=t(69),r=t(73),s=t(181),l=t(40),d=o?o.prototype:void 0,c=d?d.valueOf:void 0;e.exports=function(e,n,t,o,d,u,p){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!u(new i(e),new i(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var h=s;case"[object Set]":var m=1&o;if(h||(h=l),e.size!=n.size&&!m)return!1;var f=p.get(e);if(f)return f==n;o|=2,p.set(e,n);var g=r(h(e),h(n),o,d,u,p);return p.delete(e),g;case"[object Symbol]":if(c)return c.call(e)==c.call(n)}return!1}},function(e,n,t){var o=t(6).Uint8Array;e.exports=o},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,o){t[++n]=[o,e]})),t}},function(e,n,t){var o=t(183),i=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,a,r,s){var l=1&t,d=o(e),c=d.length;if(c!=o(n).length&&!l)return!1;for(var u=c;u--;){var p=d[u];if(!(l?p in n:i.call(n,p)))return!1}var h=s.get(e),m=s.get(n);if(h&&m)return h==n&&m==e;var f=!0;s.set(e,n),s.set(n,e);for(var g=l;++u<c;){var b=e[p=d[u]],y=n[p];if(a)var v=l?a(y,b,p,n,e,s):a(b,y,p,e,n,s);if(!(void 0===v?b===y||r(b,y,t,a,s):v)){f=!1;break}g||(g="constructor"==p)}if(f&&!g){var w=e.constructor,k=n.constructor;w==k||!("constructor"in e)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof k&&k instanceof k||(f=!1)}return s.delete(e),s.delete(n),f}},function(e,n,t){var o=t(184),i=t(185),a=t(76);e.exports=function(e){return o(e,a,i)}},function(e,n,t){var o=t(66),i=t(5);e.exports=function(e,n,t){var a=n(e);return i(e)?a:o(a,t(e))}},function(e,n,t){var o=t(186),i=t(187),a=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,s=r?function(e){return null==e?[]:(e=Object(e),o(r(e),(function(n){return a.call(e,n)})))}:i;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=0,a=[];++t<o;){var r=e[t];n(r,t,e)&&(a[i++]=r)}return a}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var o=t(189),i=t(36),a=t(5),r=t(77),s=t(78),l=t(79),d=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=a(e),c=!t&&i(e),u=!t&&!c&&r(e),p=!t&&!c&&!u&&l(e),h=t||c||u||p,m=h?o(e.length,String):[],f=m.length;for(var g in e)!n&&!d.call(e,g)||h&&("length"==g||u&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,f))||m.push(g);return m}},function(e,n){e.exports=function(e,n){for(var t=-1,o=Array(e);++t<e;)o[t]=n(t);return o}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var o=t(12),i=t(41),a=t(11),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&i(e.length)&&!!r[o(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var o=t(67),i=n&&!n.nodeType&&n,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,r=a&&a.exports===i&&o.process,s=function(){try{var e=a&&a.require&&a.require("util").types;return e||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=s}).call(this,t(48)(e))},function(e,n,t){var o=t(195),i=t(196),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return i(e);var n=[];for(var t in Object(e))a.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var o=t(197)(Object.keys,Object);e.exports=o},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var o=t(199),i=t(37),a=t(200),r=t(81),s=t(201),l=t(12),d=t(71),c=d(o),u=d(i),p=d(a),h=d(r),m=d(s),f=l;(o&&"[object DataView]"!=f(new o(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||a&&"[object Promise]"!=f(a.resolve())||r&&"[object Set]"!=f(new r)||s&&"[object WeakMap]"!=f(new s))&&(f=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,o=t?d(t):"";if(o)switch(o){case c:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return n}),e.exports=f},function(e,n,t){var o=t(9)(t(6),"DataView");e.exports=o},function(e,n,t){var o=t(9)(t(6),"Promise");e.exports=o},function(e,n,t){var o=t(9)(t(6),"WeakMap");e.exports=o},function(e,n,t){var o=t(82),i=t(76);e.exports=function(e){for(var n=i(e),t=n.length;t--;){var a=n[t],r=e[a];n[t]=[a,r,o(r)]}return n}},function(e,n,t){var o=t(72),i=t(204),a=t(211),r=t(42),s=t(82),l=t(83),d=t(22);e.exports=function(e,n){return r(e)&&s(n)?l(d(e),n):function(t){var r=i(t,e);return void 0===r&&r===n?a(t,e):o(n,r,3)}}},function(e,n,t){var o=t(84);e.exports=function(e,n,t){var i=null==e?void 0:o(e,n);return void 0===i?t:i}},function(e,n,t){var o=t(206),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,r=o((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(i,(function(e,t,o,i){n.push(o?i.replace(a,"$1"):t||e)})),n}));e.exports=r},function(e,n,t){var o=t(207);e.exports=function(e){var n=o(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var o=t(39);function i(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var o=arguments,i=n?n.apply(this,o):o[0],a=t.cache;if(a.has(i))return a.get(i);var r=e.apply(this,o);return t.cache=a.set(i,r)||a,r};return t.cache=new(i.Cache||o),t}i.Cache=o,e.exports=i},function(e,n,t){var o=t(209);e.exports=function(e){return null==e?"":o(e)}},function(e,n,t){var o=t(13),i=t(210),a=t(5),r=t(43),s=o?o.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(a(n))return i(n,e)+"";if(r(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=Array(o);++t<o;)i[t]=n(e[t],t,e);return i}},function(e,n,t){var o=t(212),i=t(213);e.exports=function(e,n){return null!=e&&i(e,n,o)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var o=t(85),i=t(36),a=t(5),r=t(78),s=t(41),l=t(22);e.exports=function(e,n,t){for(var d=-1,c=(n=o(n,e)).length,u=!1;++d<c;){var p=l(n[d]);if(!(u=null!=e&&t(e,p)))break;e=e[p]}return u||++d!=c?u:!!(c=null==e?0:e.length)&&s(c)&&r(p,c)&&(a(e)||i(e))}},function(e,n,t){var o=t(215),i=t(216),a=t(42),r=t(22);e.exports=function(e){return a(e)?o(r(e)):i(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var o=t(84);e.exports=function(e){return function(n){return o(n,e)}}},function(e,n,t){var o=t(44),i=t(218),a=t(220);e.exports=function(e,n){return a(i(e,n,o),e+"")}},function(e,n,t){var o=t(219),i=Math.max;e.exports=function(e,n,t){return n=i(void 0===n?e.length-1:n,0),function(){for(var a=arguments,r=-1,s=i(a.length-n,0),l=Array(s);++r<s;)l[r]=a[n+r];r=-1;for(var d=Array(n+1);++r<n;)d[r]=a[r];return d[n]=t(l),o(e,this,d)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var o=t(221),i=t(224)(o);e.exports=i},function(e,n,t){var o=t(222),i=t(223),a=t(44),r=i?function(e,n){return i(e,"toString",{configurable:!0,enumerable:!1,value:o(n),writable:!0})}:a;e.exports=r},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var o=t(9),i=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,n){var t=Date.now;e.exports=function(e){var n=0,o=0;return function(){var i=t(),a=16-(i-o);if(o=i,a>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var o=t(74),i=t(226),a=t(231),r=t(75),s=t(232),l=t(40);e.exports=function(e,n,t){var d=-1,c=i,u=e.length,p=!0,h=[],m=h;if(t)p=!1,c=a;else if(u>=200){var f=n?null:s(e);if(f)return l(f);p=!1,c=r,m=new o}else m=n?[]:h;e:for(;++d<u;){var g=e[d],b=n?n(g):g;if(g=t||0!==g?g:0,p&&b==b){for(var y=m.length;y--;)if(m[y]===b)continue e;n&&m.push(b),h.push(g)}else c(m,b,t)||(m!==h&&m.push(b),h.push(g))}return h}},function(e,n,t){var o=t(227);e.exports=function(e,n){return!!(null==e?0:e.length)&&o(e,n,0)>-1}},function(e,n,t){var o=t(228),i=t(229),a=t(230);e.exports=function(e,n,t){return n==n?a(e,n,t):o(e,i,t)}},function(e,n){e.exports=function(e,n,t,o){for(var i=e.length,a=t+(o?1:-1);o?a--:++a<i;)if(n(e[a],a,e))return a;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var o=t-1,i=e.length;++o<i;)if(e[o]===n)return o;return-1}},function(e,n){e.exports=function(e,n,t){for(var o=-1,i=null==e?0:e.length;++o<i;)if(t(n,e[o]))return!0;return!1}},function(e,n,t){var o=t(81),i=t(233),a=t(40),r=o&&1/a(new o([,-0]))[1]==1/0?function(e){return new o(e)}:i;e.exports=r},function(e,n){e.exports=function(){}},function(e,n,t){var o=t(80),i=t(11);e.exports=function(e){return i(e)&&o(e)}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(86)},function(e,n,t){},function(e,n,t){"use strict";t(88)},function(e,n,t){"use strict";t(89)},function(e,n,t){"use strict";t.r(n);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({}),i=Array.isArray;function a(e){return null==e}function r(e){return null!=e}function s(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function d(e){return"function"==typeof e}function c(e){return null!==e&&"object"==typeof e}var u=Object.prototype.toString;function p(e){return"[object Object]"===u.call(e)}function h(e){return"[object RegExp]"===u.call(e)}function m(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function f(e){return r(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function b(e){var n=parseFloat(e);return isNaN(n)?e:n}function y(e,n){for(var t=Object.create(null),o=e.split(","),i=0;i<o.length;i++)t[o[i]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}y("slot,component",!0);var v=y("key,ref,slot,slot-scope,is");function w(e,n){var t=e.length;if(t){if(n===e[t-1])return void(e.length=t-1);var o=e.indexOf(n);if(o>-1)return e.splice(o,1)}}var k=Object.prototype.hasOwnProperty;function S(e,n){return k.call(e,n)}function x(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var I=/-(\w)/g,C=x((function(e){return e.replace(I,(function(e,n){return n?n.toUpperCase():""}))})),A=x((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),O=/\B([A-Z])/g,P=x((function(e){return e.replace(O,"-$1").toLowerCase()}));var M=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var o=arguments.length;return o?o>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function T(e,n){n=n||0;for(var t=e.length-n,o=new Array(t);t--;)o[t]=e[t+n];return o}function E(e,n){for(var t in n)e[t]=n[t];return e}function D(e){for(var n={},t=0;t<e.length;t++)e[t]&&E(n,e[t]);return n}function B(e,n,t){}var U=function(e,n,t){return!1},F=function(e){return e};function R(e,n){if(e===n)return!0;var t=c(e),o=c(n);if(!t||!o)return!t&&!o&&String(e)===String(n);try{var i=Array.isArray(e),a=Array.isArray(n);if(i&&a)return e.length===n.length&&e.every((function(e,t){return R(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(i||a)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return R(e[t],n[t])}))}catch(e){return!1}}function N(e,n){for(var t=0;t<e.length;t++)if(R(e[t],n))return t;return-1}function L(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}function q(e,n){return e===n?0===e&&1/e!=1/n:e==e||n==n}var G=["component","directive","filter"],z=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],_={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:U,isReservedAttr:U,isUnknownElement:U,getTagNamespace:B,parsePlatformTagName:F,mustUseProp:U,async:!0,_lifecycleHooks:z},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var n=(e+"").charCodeAt(0);return 36===n||95===n}function Y(e,n,t,o){Object.defineProperty(e,n,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var j=new RegExp("[^".concat(V.source,".$_\\d]"));var K="__proto__"in{},X="undefined"!=typeof window,W=X&&window.navigator.userAgent.toLowerCase(),Q=W&&/msie|trident/.test(W),$=W&&W.indexOf("msie 9.0")>0,J=W&&W.indexOf("edge/")>0;W&&W.indexOf("android");var Z=W&&/iphone|ipad|ipod|ios/.test(W);W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W);var ee,ne=W&&W.match(/firefox\/(\d+)/),te={}.watch,oe=!1;if(X)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){oe=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===ee&&(ee=!X&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},re=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,de="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);le="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ce=null;function ue(e){void 0===e&&(e=null),e||ce&&ce._scope.off(),ce=e,e&&e._scope.on()}var pe=function(){function e(e,n,t,o,i,a,r,s){this.tag=e,this.data=n,this.children=t,this.text=o,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),he=function(e){void 0===e&&(e="");var n=new pe;return n.text=e,n.isComment=!0,n};function me(e){return new pe(void 0,void 0,void 0,String(e))}function fe(e){var n=new pe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ge=0,be=[],ye=function(){function e(){this._pending=!1,this.id=ge++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,be.push(this))},e.prototype.depend=function(n){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var n=this.subs.filter((function(e){return e}));for(var t=0,o=n.length;t<o;t++){0,n[t].update()}},e}();ye.target=null;var ve=[];function we(e){ve.push(e),ye.target=e}function ke(){ve.pop(),ye.target=ve[ve.length-1]}var Se=Array.prototype,xe=Object.create(Se);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=Se[e];Y(xe,e,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];var i,a=n.apply(this,t),r=this.__ob__;switch(e){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&r.observeArray(i),r.dep.notify(),a}))}));var Ie=Object.getOwnPropertyNames(xe),Ce={},Ae=!0;function Oe(e){Ae=e}var Pe={notify:B,depend:B,addSub:B,removeSub:B},Me=function(){function e(e,n,t){if(void 0===n&&(n=!1),void 0===t&&(t=!1),this.value=e,this.shallow=n,this.mock=t,this.dep=t?Pe:new ye,this.vmCount=0,Y(e,"__ob__",this),i(e)){if(!t)if(K)e.__proto__=xe;else for(var o=0,a=Ie.length;o<a;o++){Y(e,s=Ie[o],xe[s])}n||this.observeArray(e)}else{var r=Object.keys(e);for(o=0;o<r.length;o++){var s;Ee(e,s=r[o],Ce,void 0,n,t)}}}return e.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Te(e[n],!1,this.mock)},e}();function Te(e,n,t){return e&&S(e,"__ob__")&&e.__ob__ instanceof Me?e.__ob__:!Ae||!t&&ae()||!i(e)&&!p(e)||!Object.isExtensible(e)||e.__v_skip||Le(e)||e instanceof pe?void 0:new Me(e,n,t)}function Ee(e,n,t,o,a,r){var s=new ye,l=Object.getOwnPropertyDescriptor(e,n);if(!l||!1!==l.configurable){var d=l&&l.get,c=l&&l.set;d&&!c||t!==Ce&&2!==arguments.length||(t=e[n]);var u=!a&&Te(t,!1,r);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=d?d.call(e):t;return ye.target&&(s.depend(),u&&(u.dep.depend(),i(n)&&Ue(n))),Le(n)&&!a?n.value:n},set:function(n){var o=d?d.call(e):t;if(q(o,n)){if(c)c.call(e,n);else{if(d)return;if(!a&&Le(o)&&!Le(n))return void(o.value=n);t=n}u=!a&&Te(n,!1,r),s.notify()}}}),s}}function De(e,n,t){if(!Ne(e)){var o=e.__ob__;return i(e)&&m(n)?(e.length=Math.max(e.length,n),e.splice(n,1,t),o&&!o.shallow&&o.mock&&Te(t,!1,!0),t):n in e&&!(n in Object.prototype)?(e[n]=t,t):e._isVue||o&&o.vmCount?t:o?(Ee(o.value,n,t,void 0,o.shallow,o.mock),o.dep.notify(),t):(e[n]=t,t)}}function Be(e,n){if(i(e)&&m(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||Ne(e)||S(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ue(e){for(var n=void 0,t=0,o=e.length;t<o;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),i(n)&&Ue(n)}function Fe(e){return Re(e,!0),Y(e,"__v_isShallow",!0),e}function Re(e,n){if(!Ne(e)){Te(e,n,ae());0}}function Ne(e){return!(!e||!e.__v_isReadonly)}function Le(e){return!(!e||!0!==e.__v_isRef)}function qe(e,n,t){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var e=n[t];if(Le(e))return e.value;var o=e&&e.__ob__;return o&&o.dep.depend(),e},set:function(e){var o=n[t];Le(o)&&!Le(e)?o.value=e:n[t]=e}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Ge;var ze=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Ge,!e&&Ge&&(this.index=(Ge.scopes||(Ge.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var n=Ge;try{return Ge=this,e()}finally{Ge=n}}else 0},e.prototype.on=function(){Ge=this},e.prototype.off=function(){Ge=this.parent},e.prototype.stop=function(e){if(this.active){var n=void 0,t=void 0;for(n=0,t=this.effects.length;n<t;n++)this.effects[n].teardown();for(n=0,t=this.cleanups.length;n<t;n++)this.cleanups[n]();if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){var o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this.active=!1}},e}();function _e(e){var n=e._provided,t=e.$parent&&e.$parent._provided;return t===n?e._provided=Object.create(t):n}var Ve=x((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),o="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=o?e.slice(1):e,once:t,capture:o,passive:n}}));function He(e,n){function t(){var e=t.fns;if(!i(e))return On(e,null,arguments,n,"v-on handler");for(var o=e.slice(),a=0;a<o.length;a++)On(o[a],null,arguments,n,"v-on handler")}return t.fns=e,t}function Ye(e,n,t,o,i,r){var l,d,c,u;for(l in e)d=e[l],c=n[l],u=Ve(l),a(d)||(a(c)?(a(d.fns)&&(d=e[l]=He(d,r)),s(u.once)&&(d=e[l]=i(u.name,d,u.capture)),t(u.name,d,u.capture,u.passive,u.params)):d!==c&&(c.fns=d,e[l]=c));for(l in n)a(e[l])&&o((u=Ve(l)).name,n[l],u.capture)}function je(e,n,t){var o;e instanceof pe&&(e=e.data.hook||(e.data.hook={}));var i=e[n];function l(){t.apply(this,arguments),w(o.fns,l)}a(i)?o=He([l]):r(i.fns)&&s(i.merged)?(o=i).fns.push(l):o=He([i,l]),o.merged=!0,e[n]=o}function Ke(e,n,t,o,i){if(r(n)){if(S(n,t))return e[t]=n[t],i||delete n[t],!0;if(S(n,o))return e[t]=n[o],i||delete n[o],!0}return!1}function Xe(e){return l(e)?[me(e)]:i(e)?function e(n,t){var o,d,c,u,p=[];for(o=0;o<n.length;o++)a(d=n[o])||"boolean"==typeof d||(c=p.length-1,u=p[c],i(d)?d.length>0&&(We((d=e(d,"".concat(t||"","_").concat(o)))[0])&&We(u)&&(p[c]=me(u.text+d[0].text),d.shift()),p.push.apply(p,d)):l(d)?We(u)?p[c]=me(u.text+d):""!==d&&p.push(me(d)):We(d)&&We(u)?p[c]=me(u.text+d.text):(s(n._isVList)&&r(d.tag)&&a(d.key)&&r(t)&&(d.key="__vlist".concat(t,"_").concat(o,"__")),p.push(d)));return p}(e):void 0}function We(e){return r(e)&&r(e.text)&&!1===e.isComment}function Qe(e,n){var t,o,a,s,l=null;if(i(e)||"string"==typeof e)for(l=new Array(e.length),t=0,o=e.length;t<o;t++)l[t]=n(e[t],t);else if("number"==typeof e)for(l=new Array(e),t=0;t<e;t++)l[t]=n(t+1,t);else if(c(e))if(de&&e[Symbol.iterator]){l=[];for(var d=e[Symbol.iterator](),u=d.next();!u.done;)l.push(n(u.value,l.length)),u=d.next()}else for(a=Object.keys(e),l=new Array(a.length),t=0,o=a.length;t<o;t++)s=a[t],l[t]=n(e[s],s,t);return r(l)||(l=[]),l._isVList=!0,l}function $e(e,n,t,o){var i,a=this.$scopedSlots[e];a?(t=t||{},o&&(t=E(E({},o),t)),i=a(t)||(d(n)?n():n)):i=this.$slots[e]||(d(n)?n():n);var r=t&&t.slot;return r?this.$createElement("template",{slot:r},i):i}function Je(e){return Tt(this.$options,"filters",e,!0)||F}function Ze(e,n){return i(e)?-1===e.indexOf(n):e!==n}function en(e,n,t,o,i){var a=_.keyCodes[n]||t;return i&&o&&!_.keyCodes[n]?Ze(i,o):a?Ze(a,e):o?P(o)!==n:void 0===e}function nn(e,n,t,o,a){if(t)if(c(t)){i(t)&&(t=D(t));var r=void 0,s=function(i){if("class"===i||"style"===i||v(i))r=e;else{var s=e.attrs&&e.attrs.type;r=o||_.mustUseProp(n,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=C(i),d=P(i);l in r||d in r||(r[i]=t[i],a&&((e.on||(e.on={}))["update:".concat(i)]=function(e){t[i]=e}))};for(var l in t)s(l)}else;return e}function tn(e,n){var t=this._staticTrees||(this._staticTrees=[]),o=t[e];return o&&!n||an(o=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),o}function on(e,n,t){return an(e,"__once__".concat(n).concat(t?"_".concat(t):""),!0),e}function an(e,n,t){if(i(e))for(var o=0;o<e.length;o++)e[o]&&"string"!=typeof e[o]&&rn(e[o],"".concat(n,"_").concat(o),t);else rn(e,n,t)}function rn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function sn(e,n){if(n)if(p(n)){var t=e.on=e.on?E({},e.on):{};for(var o in n){var i=t[o],a=n[o];t[o]=i?[].concat(i,a):a}}else;return e}function ln(e,n,t,o){n=n||{$stable:!t};for(var a=0;a<e.length;a++){var r=e[a];i(r)?ln(r,n,t):r&&(r.proxy&&(r.fn.proxy=!0),n[r.key]=r.fn)}return o&&(n.$key=o),n}function dn(e,n){for(var t=0;t<n.length;t+=2){var o=n[t];"string"==typeof o&&o&&(e[n[t]]=n[t+1])}return e}function cn(e,n){return"string"==typeof e?n+e:e}function un(e){e._o=on,e._n=b,e._s=g,e._l=Qe,e._t=$e,e._q=R,e._i=N,e._m=tn,e._f=Je,e._k=en,e._b=nn,e._v=me,e._e=he,e._u=ln,e._g=sn,e._d=dn,e._p=cn}function pn(e,n){if(!e||!e.length)return{};for(var t={},o=0,i=e.length;o<i;o++){var a=e[o],r=a.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,a.context!==n&&a.fnContext!==n||!r||null==r.slot)(t.default||(t.default=[])).push(a);else{var s=r.slot,l=t[s]||(t[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var d in t)t[d].every(hn)&&delete t[d];return t}function hn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function mn(e){return e.isComment&&e.asyncFactory}function fn(e,n,t,i){var a,r=Object.keys(t).length>0,s=n?!!n.$stable:!r,l=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(s&&i&&i!==o&&l===i.$key&&!r&&!i.$hasNormal)return i;for(var d in a={},n)n[d]&&"$"!==d[0]&&(a[d]=gn(e,t,d,n[d]))}else a={};for(var c in t)c in a||(a[c]=bn(t,c));return n&&Object.isExtensible(n)&&(n._normalized=a),Y(a,"$stable",s),Y(a,"$key",l),Y(a,"$hasNormal",r),a}function gn(e,n,t,o){var a=function(){var n=ce;ue(e);var t=arguments.length?o.apply(null,arguments):o({}),a=(t=t&&"object"==typeof t&&!i(t)?[t]:Xe(t))&&t[0];return ue(n),t&&(!a||1===t.length&&a.isComment&&!mn(a))?void 0:t};return o.proxy&&Object.defineProperty(n,t,{get:a,enumerable:!0,configurable:!0}),a}function bn(e,n){return function(){return e[n]}}function yn(e){return{get attrs(){if(!e._attrsProxy){var n=e._attrsProxy={};Y(n,"_v_attr_proxy",!0),vn(n,e.$attrs,o,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||vn(e._listenersProxy={},e.$listeners,o,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||kn(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:M(e.$emit,e),expose:function(n){n&&Object.keys(n).forEach((function(t){return qe(e,n,t)}))}}}function vn(e,n,t,o,i){var a=!1;for(var r in n)r in e?n[r]!==t[r]&&(a=!0):(a=!0,wn(e,r,o,i));for(var r in e)r in n||(a=!0,delete e[r]);return a}function wn(e,n,t,o){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){return t[o][n]}})}function kn(e,n){for(var t in n)e[t]=n[t];for(var t in e)t in n||delete e[t]}var Sn=null;function xn(e,n){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?n.extend(e):e}function In(e){if(i(e))for(var n=0;n<e.length;n++){var t=e[n];if(r(t)&&(r(t.componentOptions)||mn(t)))return t}}function Cn(e,n,t,o,u,p){return(i(t)||l(t))&&(u=o,o=t,t=void 0),s(p)&&(u=2),function(e,n,t,o,l){if(r(t)&&r(t.__ob__))return he();r(t)&&r(t.is)&&(n=t.is);if(!n)return he();0;i(o)&&d(o[0])&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===l?o=Xe(o):1===l&&(o=function(e){for(var n=0;n<e.length;n++)if(i(e[n]))return Array.prototype.concat.apply([],e);return e}(o));var u,p;if("string"==typeof n){var h=void 0;p=e.$vnode&&e.$vnode.ns||_.getTagNamespace(n),u=_.isReservedTag(n)?new pe(_.parsePlatformTagName(n),t,o,void 0,void 0,e):t&&t.pre||!r(h=Tt(e.$options,"components",n))?new pe(n,t,o,void 0,void 0,e):wt(h,t,e,o,n)}else u=wt(n,t,e,o);return i(u)?u:r(u)?(r(p)&&function e(n,t,o){n.ns=t,"foreignObject"===n.tag&&(t=void 0,o=!0);if(r(n.children))for(var i=0,l=n.children.length;i<l;i++){var d=n.children[i];r(d.tag)&&(a(d.ns)||s(o)&&"svg"!==d.tag)&&e(d,t,o)}}(u,p),r(t)&&function(e){c(e.style)&&_n(e.style);c(e.class)&&_n(e.class)}(t),u):he()}(e,n,t,o,u)}function An(e,n,t){we();try{if(n)for(var o=n;o=o.$parent;){var i=o.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(o,e,n,t))return}catch(e){Pn(e,o,"errorCaptured hook")}}Pn(e,n,t)}finally{ke()}}function On(e,n,t,o,i){var a;try{(a=t?e.apply(n,t):e.call(n))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(e){return An(e,o,i+" (Promise/async)")})),a._handled=!0)}catch(e){An(e,o,i)}return a}function Pn(e,n,t){if(_.errorHandler)try{return _.errorHandler.call(null,e,n,t)}catch(n){n!==e&&Mn(n,null,"config.errorHandler")}Mn(e,n,t)}function Mn(e,n,t){if(!X||"undefined"==typeof console)throw e;console.error(e)}var Tn,En=!1,Dn=[],Bn=!1;function Un(){Bn=!1;var e=Dn.slice(0);Dn.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&se(Promise)){var Fn=Promise.resolve();Tn=function(){Fn.then(Un),Z&&setTimeout(B)},En=!0}else if(Q||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Tn="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(Un)}:function(){setTimeout(Un,0)};else{var Rn=1,Nn=new MutationObserver(Un),Ln=document.createTextNode(String(Rn));Nn.observe(Ln,{characterData:!0}),Tn=function(){Rn=(Rn+1)%2,Ln.data=String(Rn)},En=!0}function qn(e,n){var t;if(Dn.push((function(){if(e)try{e.call(n)}catch(e){An(e,n,"nextTick")}else t&&t(n)})),Bn||(Bn=!0,Tn()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}function Gn(e){return function(n,t){if(void 0===t&&(t=ce),t)return function(e,n,t){var o=e.$options;o[n]=At(o[n],t)}(t,e,n)}}Gn("beforeMount"),Gn("mounted"),Gn("beforeUpdate"),Gn("updated"),Gn("beforeDestroy"),Gn("destroyed"),Gn("activated"),Gn("deactivated"),Gn("serverPrefetch"),Gn("renderTracked"),Gn("renderTriggered"),Gn("errorCaptured");var zn=new le;function _n(e){return function e(n,t){var o,a,r=i(n);if(!r&&!c(n)||n.__v_skip||Object.isFrozen(n)||n instanceof pe)return;if(n.__ob__){var s=n.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(r)for(o=n.length;o--;)e(n[o],t);else if(Le(n))e(n.value,t);else for(a=Object.keys(n),o=a.length;o--;)e(n[a[o]],t)}(e,zn),zn.clear(),e}var Vn,Hn=0,Yn=function(){function e(e,n,t,o,i){var a,r;a=this,void 0===(r=Ge&&!Ge._vm?Ge:e?e._scope:void 0)&&(r=Ge),r&&r.active&&r.effects.push(a),(this.vm=e)&&i&&(e._watcher=this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Hn,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="",d(n)?this.getter=n:(this.getter=function(e){if(!j.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=B)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;we(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;An(e,n,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&_n(e),ke(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():pt(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var n=this.value;if(this.value=e,this.user){var t='callback for watcher "'.concat(this.expression,'"');On(this.cb,this.vm,[e,n],this.vm,t)}else this.cb.call(this.vm,e,n)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&w(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function jn(e,n){Vn.$on(e,n)}function Kn(e,n){Vn.$off(e,n)}function Xn(e,n){var t=Vn;return function o(){var i=n.apply(null,arguments);null!==i&&t.$off(e,o)}}function Wn(e,n,t){Vn=e,Ye(n,t||{},jn,Kn,Xn,e),Vn=void 0}var Qn=null;function $n(e){var n=Qn;return Qn=e,function(){Qn=n}}function Jn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Zn(e,n){if(n){if(e._directInactive=!1,Jn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Zn(e.$children[t]);et(e,"activated")}}function et(e,n,t,o){void 0===o&&(o=!0),we();var i=ce;o&&ue(e);var a=e.$options[n],r="".concat(n," hook");if(a)for(var s=0,l=a.length;s<l;s++)On(a[s],e,t||null,e,r);e._hasHookEvent&&e.$emit("hook:"+n),o&&ue(i),ke()}var nt=[],tt=[],ot={},it=!1,at=!1,rt=0;var st=0,lt=Date.now;if(X&&!Q){var dt=window.performance;dt&&"function"==typeof dt.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return dt.now()})}var ct=function(e,n){if(e.post){if(!n.post)return 1}else if(n.post)return-1;return e.id-n.id};function ut(){var e,n;for(st=lt(),at=!0,nt.sort(ct),rt=0;rt<nt.length;rt++)(e=nt[rt]).before&&e.before(),n=e.id,ot[n]=null,e.run();var t=tt.slice(),o=nt.slice();rt=nt.length=tt.length=0,ot={},it=at=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Zn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],o=t.vm;o&&o._watcher===t&&o._isMounted&&!o._isDestroyed&&et(o,"updated")}}(o),function(){for(var e=0;e<be.length;e++){var n=be[e];n.subs=n.subs.filter((function(e){return e})),n._pending=!1}be.length=0}(),re&&_.devtools&&re.emit("flush")}function pt(e){var n=e.id;if(null==ot[n]&&(e!==ye.target||!e.noRecurse)){if(ot[n]=!0,at){for(var t=nt.length-1;t>rt&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);it||(it=!0,qn(ut))}}function ht(e,n){if(e){for(var t=Object.create(null),o=de?Reflect.ownKeys(e):Object.keys(e),i=0;i<o.length;i++){var a=o[i];if("__ob__"!==a){var r=e[a].from;if(r in n._provided)t[a]=n._provided[r];else if("default"in e[a]){var s=e[a].default;t[a]=d(s)?s.call(n):s}else 0}}return t}}function mt(e,n,t,a,r){var l,d=this,c=r.options;S(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var u=s(c._compiled),p=!u;this.data=e,this.props=n,this.children=t,this.parent=a,this.listeners=e.on||o,this.injections=ht(c.inject,a),this.slots=function(){return d.$slots||fn(a,e.scopedSlots,d.$slots=pn(t,a)),d.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fn(a,e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=fn(a,e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,n,t,o){var r=Cn(l,e,n,t,o,p);return r&&!i(r)&&(r.fnScopeId=c._scopeId,r.fnContext=a),r}:this._c=function(e,n,t,o){return Cn(l,e,n,t,o,p)}}function ft(e,n,t,o,i){var a=fe(e);return a.fnContext=t,a.fnOptions=o,n.slot&&((a.data||(a.data={})).slot=n.slot),a}function gt(e,n){for(var t in n)e[C(t)]=n[t]}function bt(e){return e.name||e.__name||e._componentTag}un(mt.prototype);var yt={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;yt.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},o=e.data.inlineTemplate;r(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,Qn)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,i,a){var r=i.data.scopedSlots,s=e.$scopedSlots,l=!!(r&&!r.$stable||s!==o&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key||!r&&e.$scopedSlots.$key),d=!!(a||e.$options._renderChildren||l),c=e.$vnode;e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i),e.$options._renderChildren=a;var u=i.data.attrs||o;e._attrsProxy&&vn(e._attrsProxy,u,c.data&&c.data.attrs||o,e,"$attrs")&&(d=!0),e.$attrs=u,t=t||o;var p=e.$options._parentListeners;if(e._listenersProxy&&vn(e._listenersProxy,t,p||o,e,"$listeners"),e.$listeners=e.$options._parentListeners=t,Wn(e,t,p),n&&e.$options.props){Oe(!1);for(var h=e._props,m=e.$options._propKeys||[],f=0;f<m.length;f++){var g=m[f],b=e.$options.props;h[g]=Et(g,b,n,e)}Oe(!0),e.$options.propsData=n}d&&(e.$slots=pn(a,i.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,o=e.componentInstance;o._isMounted||(o._isMounted=!0,et(o,"mounted")),e.data.keepAlive&&(t._isMounted?((n=o)._inactive=!1,tt.push(n)):Zn(o,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(!(t&&(n._directInactive=!0,Jn(n))||n._inactive)){n._inactive=!0;for(var o=0;o<n.$children.length;o++)e(n.$children[o]);et(n,"deactivated")}}(n,!0):n.$destroy())}},vt=Object.keys(yt);function wt(e,n,t,l,d){if(!a(e)){var u=t.$options._base;if(c(e)&&(e=u.extend(e)),"function"==typeof e){var p;if(a(e.cid)&&void 0===(e=function(e,n){if(s(e.error)&&r(e.errorComp))return e.errorComp;if(r(e.resolved))return e.resolved;var t=Sn;if(t&&r(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t),s(e.loading)&&r(e.loadingComp))return e.loadingComp;if(t&&!r(e.owners)){var o=e.owners=[t],i=!0,l=null,d=null;t.$on("hook:destroyed",(function(){return w(o,t)}));var u=function(e){for(var n=0,t=o.length;n<t;n++)o[n].$forceUpdate();e&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==d&&(clearTimeout(d),d=null))},p=L((function(t){e.resolved=xn(t,n),i?o.length=0:u(!0)})),h=L((function(n){r(e.errorComp)&&(e.error=!0,u(!0))})),m=e(p,h);return c(m)&&(f(m)?a(e.resolved)&&m.then(p,h):f(m.component)&&(m.component.then(p,h),r(m.error)&&(e.errorComp=xn(m.error,n)),r(m.loading)&&(e.loadingComp=xn(m.loading,n),0===m.delay?e.loading=!0:l=setTimeout((function(){l=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,u(!1))}),m.delay||200)),r(m.timeout)&&(d=setTimeout((function(){d=null,a(e.resolved)&&h(null)}),m.timeout)))),i=!1,e.loading?e.loadingComp:e.resolved}}(p=e,u)))return function(e,n,t,o,i){var a=he();return a.asyncFactory=e,a.asyncMeta={data:n,context:t,children:o,tag:i},a}(p,n,t,l,d);n=n||{},Yt(e),r(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var a=n.on||(n.on={}),s=a[o],l=n.model.callback;r(s)?(i(s)?-1===s.indexOf(l):s!==l)&&(a[o]=[l].concat(s)):a[o]=l}(e.options,n);var h=function(e,n,t){var o=n.options.props;if(!a(o)){var i={},s=e.attrs,l=e.props;if(r(s)||r(l))for(var d in o){var c=P(d);Ke(i,l,d,c,!0)||Ke(i,s,d,c,!1)}return i}}(n,e);if(s(e.options.functional))return function(e,n,t,a,s){var l=e.options,d={},c=l.props;if(r(c))for(var u in c)d[u]=Et(u,c,n||o);else r(t.attrs)&&gt(d,t.attrs),r(t.props)&&gt(d,t.props);var p=new mt(t,d,s,a,e),h=l.render.call(null,p._c,p);if(h instanceof pe)return ft(h,t,p.parent,l,p);if(i(h)){for(var m=Xe(h)||[],f=new Array(m.length),g=0;g<m.length;g++)f[g]=ft(m[g],t,p.parent,l,p);return f}}(e,h,n,t,l);var m=n.on;if(n.on=n.nativeOn,s(e.options.abstract)){var g=n.slot;n={},g&&(n.slot=g)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<vt.length;t++){var o=vt[t],i=n[o],a=yt[o];i===a||i&&i._merged||(n[o]=i?kt(a,i):a)}}(n);var b=bt(e.options)||d;return new pe("vue-component-".concat(e.cid).concat(b?"-".concat(b):""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:h,listeners:m,tag:d,children:l},p)}}}function kt(e,n){var t=function(t,o){e(t,o),n(t,o)};return t._merged=!0,t}var St=B,xt=_.optionMergeStrategies;function It(e,n,t){if(void 0===t&&(t=!0),!n)return e;for(var o,i,a,r=de?Reflect.ownKeys(n):Object.keys(n),s=0;s<r.length;s++)"__ob__"!==(o=r[s])&&(i=e[o],a=n[o],t&&S(e,o)?i!==a&&p(i)&&p(a)&&It(i,a):De(e,o,a));return e}function Ct(e,n,t){return t?function(){var o=d(n)?n.call(t,t):n,i=d(e)?e.call(t,t):e;return o?It(o,i):i}:n?e?function(){return It(d(n)?n.call(this,this):n,d(e)?e.call(this,this):e)}:n:e}function At(e,n){var t=n?e?e.concat(n):i(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function Ot(e,n,t,o){var i=Object.create(e||null);return n?E(i,n):i}xt.data=function(e,n,t){return t?Ct(e,n,t):n&&"function"!=typeof n?e:Ct(e,n)},z.forEach((function(e){xt[e]=At})),G.forEach((function(e){xt[e+"s"]=Ot})),xt.watch=function(e,n,t,o){if(e===te&&(e=void 0),n===te&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var a={};for(var r in E(a,e),n){var s=a[r],l=n[r];s&&!i(s)&&(s=[s]),a[r]=s?s.concat(l):i(l)?l:[l]}return a},xt.props=xt.methods=xt.inject=xt.computed=function(e,n,t,o){if(!e)return n;var i=Object.create(null);return E(i,e),n&&E(i,n),i},xt.provide=function(e,n){return e?function(){var t=Object.create(null);return It(t,d(e)?e.call(this):e),n&&It(t,d(n)?n.call(this):n,!1),t}:n};var Pt=function(e,n){return void 0===n?e:n};function Mt(e,n,t){if(d(n)&&(n=n.options),function(e,n){var t=e.props;if(t){var o,a,r={};if(i(t))for(o=t.length;o--;)"string"==typeof(a=t[o])&&(r[C(a)]={type:null});else if(p(t))for(var s in t)a=t[s],r[C(s)]=p(a)?a:{type:a};else 0;e.props=r}}(n),function(e,n){var t=e.inject;if(t){var o=e.inject={};if(i(t))for(var a=0;a<t.length;a++)o[t[a]]={from:t[a]};else if(p(t))for(var r in t){var s=t[r];o[r]=p(s)?E({from:r},s):{from:s}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var o=n[t];d(o)&&(n[t]={bind:o,update:o})}}(n),!n._base&&(n.extends&&(e=Mt(e,n.extends,t)),n.mixins))for(var o=0,a=n.mixins.length;o<a;o++)e=Mt(e,n.mixins[o],t);var r,s={};for(r in e)l(r);for(r in n)S(e,r)||l(r);function l(o){var i=xt[o]||Pt;s[o]=i(e[o],n[o],t,o)}return s}function Tt(e,n,t,o){if("string"==typeof t){var i=e[n];if(S(i,t))return i[t];var a=C(t);if(S(i,a))return i[a];var r=A(a);return S(i,r)?i[r]:i[t]||i[a]||i[r]}}function Et(e,n,t,o){var i=n[e],a=!S(t,e),r=t[e],s=Ft(Boolean,i.type);if(s>-1)if(a&&!S(i,"default"))r=!1;else if(""===r||r===P(e)){var l=Ft(String,i.type);(l<0||s<l)&&(r=!0)}if(void 0===r){r=function(e,n,t){if(!S(n,"default"))return;var o=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return d(o)&&"Function"!==Bt(n.type)?o.call(e):o}(o,i,e);var c=Ae;Oe(!0),Te(r),Oe(c)}return r}var Dt=/^\s*function (\w+)/;function Bt(e){var n=e&&e.toString().match(Dt);return n?n[1]:""}function Ut(e,n){return Bt(e)===Bt(n)}function Ft(e,n){if(!i(n))return Ut(n,e)?0:-1;for(var t=0,o=n.length;t<o;t++)if(Ut(n[t],e))return t;return-1}var Rt={enumerable:!0,configurable:!0,get:B,set:B};function Nt(e,n,t){Rt.get=function(){return this[n][t]},Rt.set=function(e){this[n][t]=e},Object.defineProperty(e,t,Rt)}function Lt(e){var n=e.$options;if(n.props&&function(e,n){var t=e.$options.propsData||{},o=e._props=Fe({}),i=e.$options._propKeys=[];e.$parent&&Oe(!1);var a=function(a){i.push(a);var r=Et(a,n,t,e);Ee(o,a,r),a in e||Nt(e,"_props",a)};for(var r in n)a(r);Oe(!0)}(e,n.props),function(e){var n=e.$options,t=n.setup;if(t){var o=e._setupContext=yn(e);ue(e),we();var i=On(t,null,[e._props||Fe({}),o],e,"setup");if(ke(),ue(),d(i))n.render=i;else if(c(i))if(e._setupState=i,i.__sfc){var a=e._setupProxy={};for(var r in i)"__sfc"!==r&&qe(a,i,r)}else for(var r in i)H(r)||qe(e,i,r);else 0}}(e),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?B:M(n[t],e)}(e,n.methods),n.data)!function(e){var n=e.$options.data;p(n=e._data=d(n)?function(e,n){we();try{return e.call(n,n)}catch(e){return An(e,n,"data()"),{}}finally{ke()}}(n,e):n||{})||(n={});var t=Object.keys(n),o=e.$options.props,i=(e.$options.methods,t.length);for(;i--;){var a=t[i];0,o&&S(o,a)||H(a)||Nt(e,"_data",a)}var r=Te(n);r&&r.vmCount++}(e);else{var t=Te(e._data={});t&&t.vmCount++}n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),o=ae();for(var i in n){var a=n[i],r=d(a)?a:a.get;0,o||(t[i]=new Yn(e,r||B,B,qt)),i in e||Gt(e,i,a)}}(e,n.computed),n.watch&&n.watch!==te&&function(e,n){for(var t in n){var o=n[t];if(i(o))for(var a=0;a<o.length;a++)Vt(e,t,o[a]);else Vt(e,t,o)}}(e,n.watch)}var qt={lazy:!0};function Gt(e,n,t){var o=!ae();d(t)?(Rt.get=o?zt(n):_t(t),Rt.set=B):(Rt.get=t.get?o&&!1!==t.cache?zt(n):_t(t.get):B,Rt.set=t.set||B),Object.defineProperty(e,n,Rt)}function zt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),ye.target&&n.depend(),n.value}}function _t(e){return function(){return e.call(this,this)}}function Vt(e,n,t,o){return p(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,o)}var Ht=0;function Yt(e){var n=e.options;if(e.super){var t=Yt(e.super);if(t!==e.superOptions){e.superOptions=t;var o=function(e){var n,t=e.options,o=e.sealedOptions;for(var i in t)t[i]!==o[i]&&(n||(n={}),n[i]=t[i]);return n}(e);o&&E(e.extendOptions,o),(n=e.options=Mt(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function jt(e){this._init(e)}function Kt(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,o=t.cid,i=e._Ctor||(e._Ctor={});if(i[o])return i[o];var a=bt(e)||bt(t.options);var r=function(e){this._init(e)};return(r.prototype=Object.create(t.prototype)).constructor=r,r.cid=n++,r.options=Mt(t.options,e),r.super=t,r.options.props&&function(e){var n=e.options.props;for(var t in n)Nt(e.prototype,"_props",t)}(r),r.options.computed&&function(e){var n=e.options.computed;for(var t in n)Gt(e.prototype,t,n[t])}(r),r.extend=t.extend,r.mixin=t.mixin,r.use=t.use,G.forEach((function(e){r[e]=t[e]})),a&&(r.options.components[a]=r),r.superOptions=t.options,r.extendOptions=e,r.sealedOptions=E({},r.options),i[o]=r,r}}function Xt(e){return e&&(bt(e.Ctor.options)||e.tag)}function Wt(e,n){return i(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!h(e)&&e.test(n)}function Qt(e,n){var t=e.cache,o=e.keys,i=e._vnode;for(var a in t){var r=t[a];if(r){var s=r.name;s&&!n(s)&&$t(t,a,o,i)}}}function $t(e,n,t,o){var i=e[n];!i||o&&i.tag===o.tag||i.componentInstance.$destroy(),e[n]=null,w(t,n)}jt.prototype._init=function(e){var n=this;n._uid=Ht++,n._isVue=!0,n.__v_skip=!0,n._scope=new ze(!0),n._scope._vm=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),o=n._parentVnode;t.parent=n.parent,t._parentVnode=o;var i=o.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Mt(Yt(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._provided=t?t._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Wn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,i=t&&t.context;e.$slots=pn(n._renderChildren,i),e.$scopedSlots=t?fn(e.$parent,t.data.scopedSlots,e.$slots):o,e._c=function(n,t,o,i){return Cn(e,n,t,o,i,!1)},e.$createElement=function(n,t,o,i){return Cn(e,n,t,o,i,!0)};var a=t&&t.data;Ee(e,"$attrs",a&&a.attrs||o,null,!0),Ee(e,"$listeners",n._parentListeners||o,null,!0)}(n),et(n,"beforeCreate",void 0,!1),function(e){var n=ht(e.$options.inject,e);n&&(Oe(!1),Object.keys(n).forEach((function(t){Ee(e,t,n[t])})),Oe(!0))}(n),Lt(n),function(e){var n=e.$options.provide;if(n){var t=d(n)?n.call(e):n;if(!c(t))return;for(var o=_e(e),i=de?Reflect.ownKeys(t):Object.keys(t),a=0;a<i.length;a++){var r=i[a];Object.defineProperty(o,r,Object.getOwnPropertyDescriptor(t,r))}}}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)},function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=De,e.prototype.$delete=Be,e.prototype.$watch=function(e,n,t){if(p(n))return Vt(this,e,n,t);(t=t||{}).user=!0;var o=new Yn(this,e,n,t);if(t.immediate){var i='callback for immediate watcher "'.concat(o.expression,'"');we(),On(n,this,[o.value],this,i),ke()}return function(){o.teardown()}}}(jt),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var o=this;if(i(e))for(var a=0,r=e.length;a<r;a++)o.$on(e[a],t);else(o._events[e]||(o._events[e]=[])).push(t),n.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,n){var t=this;function o(){t.$off(e,o),n.apply(t,arguments)}return o.fn=n,t.$on(e,o),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(i(e)){for(var o=0,a=e.length;o<a;o++)t.$off(e[o],n);return t}var r,s=t._events[e];if(!s)return t;if(!n)return t._events[e]=null,t;for(var l=s.length;l--;)if((r=s[l])===n||r.fn===n){s.splice(l,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?T(t):t;for(var o=T(arguments,1),i='event handler for "'.concat(e,'"'),a=0,r=t.length;a<r;a++)On(t[a],n,o,n,i)}return n}}(jt),function(e){e.prototype._update=function(e,n){var t=this,o=t.$el,i=t._vnode,a=$n(t);t._vnode=e,t.$el=i?t.__patch__(i,e):t.__patch__(t.$el,e,n,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var r=t;r&&r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode;)r.$parent.$el=r.$el,r=r.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||w(n.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(jt),function(e){un(e.prototype),e.prototype.$nextTick=function(e){return qn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,o=t.render,a=t._parentVnode;a&&n._isMounted&&(n.$scopedSlots=fn(n.$parent,a.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&kn(n._slotsProxy,n.$scopedSlots)),n.$vnode=a;try{ue(n),Sn=n,e=o.call(n._renderProxy,n.$createElement)}catch(t){An(t,n,"render"),e=n._vnode}finally{Sn=null,ue()}return i(e)&&1===e.length&&(e=e[0]),e instanceof pe||(e=he()),e.parent=a,e}}(jt);var Jt=[String,RegExp,Array],Zt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Jt,exclude:Jt,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,n=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var i=t.tag,a=t.componentInstance,r=t.componentOptions;e[o]={name:Xt(r),tag:i,componentInstance:a},n.push(o),this.max&&n.length>parseInt(this.max)&&$t(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)$t(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(n){Qt(e,(function(e){return Wt(n,e)}))})),this.$watch("exclude",(function(n){Qt(e,(function(e){return!Wt(n,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,n=In(e),t=n&&n.componentOptions;if(t){var o=Xt(t),i=this.include,a=this.exclude;if(i&&(!o||!Wt(i,o))||a&&o&&Wt(a,o))return n;var r=this.cache,s=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):n.key;r[l]?(n.componentInstance=r[l].componentInstance,w(s,l),s.push(l)):(this.vnodeToCache=n,this.keyToCache=l),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return _}};Object.defineProperty(e,"config",n),e.util={warn:St,extend:E,mergeOptions:Mt,defineReactive:Ee},e.set=De,e.delete=Be,e.nextTick=qn,e.observable=function(e){return Te(e),e},e.options=Object.create(null),G.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,E(e.options.components,Zt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=T(arguments,1);return t.unshift(this),d(e.install)?e.install.apply(e,t):d(e)&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Mt(this.options,e),this}}(e),Kt(e),function(e){G.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&p(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&d(t)&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(jt),Object.defineProperty(jt.prototype,"$isServer",{get:ae}),Object.defineProperty(jt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(jt,"FunctionalRenderContext",{value:mt}),jt.version="2.7.14";var eo=y("style,class"),no=y("input,textarea,option,select,progress"),to=y("contenteditable,draggable,spellcheck"),oo=y("events,caret,typing,plaintext-only"),io=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ao="http://www.w3.org/1999/xlink",ro=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},so=function(e){return ro(e)?e.slice(6,e.length):""},lo=function(e){return null==e||!1===e};function co(e){for(var n=e.data,t=e,o=e;r(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(n=uo(o.data,n));for(;r(t=t.parent);)t&&t.data&&(n=uo(n,t.data));return function(e,n){if(r(e)||r(n))return po(e,ho(n));return""}(n.staticClass,n.class)}function uo(e,n){return{staticClass:po(e.staticClass,n.staticClass),class:r(e.class)?[e.class,n.class]:n.class}}function po(e,n){return e?n?e+" "+n:e:n||""}function ho(e){return Array.isArray(e)?function(e){for(var n,t="",o=0,i=e.length;o<i;o++)r(n=ho(e[o]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):c(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var mo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fo=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),go=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),bo=function(e){return fo(e)||go(e)};var yo=Object.create(null);var vo=y("text,number,password,search,email,tel,url");var wo=Object.freeze({__proto__:null,createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(mo[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),ko={create:function(e,n){So(n)},update:function(e,n){e.data.ref!==n.data.ref&&(So(e,!0),So(n))},destroy:function(e){So(e,!0)}};function So(e,n){var t=e.data.ref;if(r(t)){var o=e.context,a=e.componentInstance||e.elm,s=n?null:a,l=n?void 0:a;if(d(t))On(t,o,[s],o,"template ref function");else{var c=e.data.refInFor,u="string"==typeof t||"number"==typeof t,p=Le(t),h=o.$refs;if(u||p)if(c){var m=u?h[t]:t.value;n?i(m)&&w(m,a):i(m)?m.includes(a)||m.push(a):u?(h[t]=[a],xo(o,t,h[t])):t.value=[a]}else if(u){if(n&&h[t]!==a)return;h[t]=l,xo(o,t,s)}else if(p){if(n&&t.value!==a)return;t.value=s}else 0}}}function xo(e,n,t){var o=e._setupState;o&&S(o,n)&&(Le(o[n])?o[n].value=t:o[n]=t)}var Io=new pe("",{},[]),Co=["create","activate","update","remove","destroy"];function Ao(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&r(e.data)===r(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,o=r(t=e.data)&&r(t=t.attrs)&&t.type,i=r(t=n.data)&&r(t=t.attrs)&&t.type;return o===i||vo(o)&&vo(i)}(e,n)||s(e.isAsyncPlaceholder)&&a(n.asyncFactory.error))}function Oo(e,n,t){var o,i,a={};for(o=n;o<=t;++o)r(i=e[o].key)&&(a[i]=o);return a}var Po={create:Mo,update:Mo,destroy:function(e){Mo(e,Io)}};function Mo(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,o,i,a=e===Io,r=n===Io,s=Eo(e.data.directives,e.context),l=Eo(n.data.directives,n.context),d=[],c=[];for(t in l)o=s[t],i=l[t],o?(i.oldValue=o.value,i.oldArg=o.arg,Bo(i,"update",n,e),i.def&&i.def.componentUpdated&&c.push(i)):(Bo(i,"bind",n,e),i.def&&i.def.inserted&&d.push(i));if(d.length){var u=function(){for(var t=0;t<d.length;t++)Bo(d[t],"inserted",n,e)};a?je(n,"insert",u):u()}c.length&&je(n,"postpatch",(function(){for(var t=0;t<c.length;t++)Bo(c[t],"componentUpdated",n,e)}));if(!a)for(t in s)l[t]||Bo(s[t],"unbind",e,e,r)}(e,n)}var To=Object.create(null);function Eo(e,n){var t,o,i=Object.create(null);if(!e)return i;for(t=0;t<e.length;t++){if((o=e[t]).modifiers||(o.modifiers=To),i[Do(o)]=o,n._setupState&&n._setupState.__sfc){var a=o.def||Tt(n,"_setupState","v-"+o.name);o.def="function"==typeof a?{bind:a,update:a}:a}o.def=o.def||Tt(n.$options,"directives",o.name)}return i}function Do(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Bo(e,n,t,o,i){var a=e.def&&e.def[n];if(a)try{a(t.elm,e,t,o,i)}catch(o){An(o,t.context,"directive ".concat(e.name," ").concat(n," hook"))}}var Uo=[ko,Po];function Fo(e,n){var t=n.componentOptions;if(!(r(t)&&!1===t.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(n.data.attrs))){var o,i,l=n.elm,d=e.data.attrs||{},c=n.data.attrs||{};for(o in(r(c.__ob__)||s(c._v_attr_proxy))&&(c=n.data.attrs=E({},c)),c)i=c[o],d[o]!==i&&Ro(l,o,i,n.data.pre);for(o in(Q||J)&&c.value!==d.value&&Ro(l,"value",c.value),d)a(c[o])&&(ro(o)?l.removeAttributeNS(ao,so(o)):to(o)||l.removeAttribute(o))}}function Ro(e,n,t,o){o||e.tagName.indexOf("-")>-1?No(e,n,t):io(n)?lo(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):to(n)?e.setAttribute(n,function(e,n){return lo(n)||"false"===n?"false":"contenteditable"===e&&oo(n)?n:"true"}(n,t)):ro(n)?lo(t)?e.removeAttributeNS(ao,so(n)):e.setAttributeNS(ao,n,t):No(e,n,t)}function No(e,n,t){if(lo(t))e.removeAttribute(n);else{if(Q&&!$&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var o=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",o)};e.addEventListener("input",o),e.__ieph=!0}e.setAttribute(n,t)}}var Lo={create:Fo,update:Fo};function qo(e,n){var t=n.elm,o=n.data,i=e.data;if(!(a(o.staticClass)&&a(o.class)&&(a(i)||a(i.staticClass)&&a(i.class)))){var s=co(n),l=t._transitionClasses;r(l)&&(s=po(s,ho(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Go,zo={create:qo,update:qo};function _o(e,n,t){var o=Go;return function i(){var a=n.apply(null,arguments);null!==a&&Yo(e,i,t,o)}}var Vo=En&&!(ne&&Number(ne[1])<=53);function Ho(e,n,t,o){if(Vo){var i=st,a=n;n=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}Go.addEventListener(e,n,oe?{capture:t,passive:o}:t)}function Yo(e,n,t,o){(o||Go).removeEventListener(e,n._wrapper||n,t)}function jo(e,n){if(!a(e.data.on)||!a(n.data.on)){var t=n.data.on||{},o=e.data.on||{};Go=n.elm||e.elm,function(e){if(r(e.__r)){var n=Q?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}r(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),Ye(t,o,Ho,Yo,_o,n.context),Go=void 0}}var Ko,Xo={create:jo,update:jo,destroy:function(e){return jo(e,Io)}};function Wo(e,n){if(!a(e.data.domProps)||!a(n.data.domProps)){var t,o,i=n.elm,l=e.data.domProps||{},d=n.data.domProps||{};for(t in(r(d.__ob__)||s(d._v_attr_proxy))&&(d=n.data.domProps=E({},d)),l)t in d||(i[t]="");for(t in d){if(o=d[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),o===l[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=o;var c=a(o)?"":String(o);Qo(i,c)&&(i.value=c)}else if("innerHTML"===t&&go(i.tagName)&&a(i.innerHTML)){(Ko=Ko||document.createElement("div")).innerHTML="<svg>".concat(o,"</svg>");for(var u=Ko.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(o!==l[t])try{i[t]=o}catch(e){}}}}function Qo(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,o=e._vModifiers;if(r(o)){if(o.number)return b(t)!==b(n);if(o.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var $o={create:Wo,update:Wo},Jo=x((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var o=e.split(t);o.length>1&&(n[o[0].trim()]=o[1].trim())}})),n}));function Zo(e){var n=ei(e.style);return e.staticStyle?E(e.staticStyle,n):n}function ei(e){return Array.isArray(e)?D(e):"string"==typeof e?Jo(e):e}var ni,ti=/^--/,oi=/\s*!important$/,ii=function(e,n,t){if(ti.test(n))e.style.setProperty(n,t);else if(oi.test(t))e.style.setProperty(P(n),t.replace(oi,""),"important");else{var o=ri(n);if(Array.isArray(t))for(var i=0,a=t.length;i<a;i++)e.style[o]=t[i];else e.style[o]=t}},ai=["Webkit","Moz","ms"],ri=x((function(e){if(ni=ni||document.createElement("div").style,"filter"!==(e=C(e))&&e in ni)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<ai.length;t++){var o=ai[t]+n;if(o in ni)return o}}));function si(e,n){var t=n.data,o=e.data;if(!(a(t.staticStyle)&&a(t.style)&&a(o.staticStyle)&&a(o.style))){var i,s,l=n.elm,d=o.staticStyle,c=o.normalizedStyle||o.style||{},u=d||c,p=ei(n.data.style)||{};n.data.normalizedStyle=r(p.__ob__)?E({},p):p;var h=function(e,n){var t,o={};if(n)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Zo(i.data))&&E(o,t);(t=Zo(e.data))&&E(o,t);for(var a=e;a=a.parent;)a.data&&(t=Zo(a.data))&&E(o,t);return o}(n,!0);for(s in u)a(h[s])&&ii(l,s,"");for(s in h)(i=h[s])!==u[s]&&ii(l,s,null==i?"":i)}}var li={create:si,update:si},di=/\s+/;function ci(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(di).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" ".concat(e.getAttribute("class")||""," ");t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function ui(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(di).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" ".concat(e.getAttribute("class")||""," "),o=" "+n+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function pi(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&E(n,hi(e.name||"v")),E(n,e),n}return"string"==typeof e?hi(e):void 0}}var hi=x((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),mi=X&&!$,fi="transition",gi="transitionend",bi="animation",yi="animationend";mi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(fi="WebkitTransition",gi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(bi="WebkitAnimation",yi="webkitAnimationEnd"));var vi=X?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function wi(e){vi((function(){vi(e)}))}function ki(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),ci(e,n))}function Si(e,n){e._transitionClasses&&w(e._transitionClasses,n),ui(e,n)}function xi(e,n,t){var o=Ci(e,n),i=o.type,a=o.timeout,r=o.propCount;if(!i)return t();var s="transition"===i?gi:yi,l=0,d=function(){e.removeEventListener(s,c),t()},c=function(n){n.target===e&&++l>=r&&d()};setTimeout((function(){l<r&&d()}),a+1),e.addEventListener(s,c)}var Ii=/\b(transform|all)(,|$)/;function Ci(e,n){var t,o=window.getComputedStyle(e),i=(o[fi+"Delay"]||"").split(", "),a=(o[fi+"Duration"]||"").split(", "),r=Ai(i,a),s=(o[bi+"Delay"]||"").split(", "),l=(o[bi+"Duration"]||"").split(", "),d=Ai(s,l),c=0,u=0;return"transition"===n?r>0&&(t="transition",c=r,u=a.length):"animation"===n?d>0&&(t="animation",c=d,u=l.length):u=(t=(c=Math.max(r,d))>0?r>d?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:c,propCount:u,hasTransform:"transition"===t&&Ii.test(o[fi+"Property"])}}function Ai(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return Oi(n)+Oi(e[t])})))}function Oi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Pi(e,n){var t=e.elm;r(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=pi(e.data.transition);if(!a(o)&&!r(t._enterCb)&&1===t.nodeType){for(var i=o.css,s=o.type,l=o.enterClass,u=o.enterToClass,p=o.enterActiveClass,h=o.appearClass,m=o.appearToClass,f=o.appearActiveClass,g=o.beforeEnter,y=o.enter,v=o.afterEnter,w=o.enterCancelled,k=o.beforeAppear,S=o.appear,x=o.afterAppear,I=o.appearCancelled,C=o.duration,A=Qn,O=Qn.$vnode;O&&O.parent;)A=O.context,O=O.parent;var P=!A._isMounted||!e.isRootInsert;if(!P||S||""===S){var M=P&&h?h:l,T=P&&f?f:p,E=P&&m?m:u,D=P&&k||g,B=P&&d(S)?S:y,U=P&&x||v,F=P&&I||w,R=b(c(C)?C.enter:C);0;var N=!1!==i&&!$,q=Ei(B),G=t._enterCb=L((function(){N&&(Si(t,E),Si(t,T)),G.cancelled?(N&&Si(t,M),F&&F(t)):U&&U(t),t._enterCb=null}));e.data.show||je(e,"insert",(function(){var n=t.parentNode,o=n&&n._pending&&n._pending[e.key];o&&o.tag===e.tag&&o.elm._leaveCb&&o.elm._leaveCb(),B&&B(t,G)})),D&&D(t),N&&(ki(t,M),ki(t,T),wi((function(){Si(t,M),G.cancelled||(ki(t,E),q||(Ti(R)?setTimeout(G,R):xi(t,s,G)))}))),e.data.show&&(n&&n(),B&&B(t,G)),N||q||G()}}}function Mi(e,n){var t=e.elm;r(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=pi(e.data.transition);if(a(o)||1!==t.nodeType)return n();if(!r(t._leaveCb)){var i=o.css,s=o.type,l=o.leaveClass,d=o.leaveToClass,u=o.leaveActiveClass,p=o.beforeLeave,h=o.leave,m=o.afterLeave,f=o.leaveCancelled,g=o.delayLeave,y=o.duration,v=!1!==i&&!$,w=Ei(h),k=b(c(y)?y.leave:y);0;var S=t._leaveCb=L((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),v&&(Si(t,d),Si(t,u)),S.cancelled?(v&&Si(t,l),f&&f(t)):(n(),m&&m(t)),t._leaveCb=null}));g?g(x):x()}function x(){S.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),p&&p(t),v&&(ki(t,l),ki(t,u),wi((function(){Si(t,l),S.cancelled||(ki(t,d),w||(Ti(k)?setTimeout(S,k):xi(t,s,S)))}))),h&&h(t,S),v||w||S())}}function Ti(e){return"number"==typeof e&&!isNaN(e)}function Ei(e){if(a(e))return!1;var n=e.fns;return r(n)?Ei(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function Di(e,n){!0!==n.data.show&&Pi(n)}var Bi=function(e){var n,t,o={},d=e.modules,c=e.nodeOps;for(n=0;n<Co.length;++n)for(o[Co[n]]=[],t=0;t<d.length;++t)r(d[t][Co[n]])&&o[Co[n]].push(d[t][Co[n]]);function u(e){var n=c.parentNode(e);r(n)&&c.removeChild(n,e)}function p(e,n,t,i,a,l,d){if(r(e.elm)&&r(l)&&(e=l[d]=fe(e)),e.isRootInsert=!a,!function(e,n,t,i){var a=e.data;if(r(a)){var l=r(e.componentInstance)&&a.keepAlive;if(r(a=a.hook)&&r(a=a.init)&&a(e,!1),r(e.componentInstance))return h(e,n),m(t,e.elm,i),s(l)&&function(e,n,t,i){var a,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,r(a=s.data)&&r(a=a.transition)){for(a=0;a<o.activate.length;++a)o.activate[a](Io,s);n.push(s);break}m(t,e.elm,i)}(e,n,t,i),!0}}(e,n,t,i)){var u=e.data,p=e.children,g=e.tag;r(g)?(e.elm=e.ns?c.createElementNS(e.ns,g):c.createElement(g,e),v(e),f(e,p,n),r(u)&&b(e,n),m(t,e.elm,i)):s(e.isComment)?(e.elm=c.createComment(e.text),m(t,e.elm,i)):(e.elm=c.createTextNode(e.text),m(t,e.elm,i))}}function h(e,n){r(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(b(e,n),v(e)):(So(e),n.push(e))}function m(e,n,t){r(e)&&(r(t)?c.parentNode(t)===e&&c.insertBefore(e,n,t):c.appendChild(e,n))}function f(e,n,t){if(i(n)){0;for(var o=0;o<n.length;++o)p(n[o],t,e.elm,null,!0,n,o)}else l(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return r(e.tag)}function b(e,t){for(var i=0;i<o.create.length;++i)o.create[i](Io,e);r(n=e.data.hook)&&(r(n.create)&&n.create(Io,e),r(n.insert)&&t.push(e))}function v(e){var n;if(r(n=e.fnScopeId))c.setStyleScope(e.elm,n);else for(var t=e;t;)r(n=t.context)&&r(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n),t=t.parent;r(n=Qn)&&n!==e.context&&n!==e.fnContext&&r(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n)}function w(e,n,t,o,i,a){for(;o<=i;++o)p(t[o],a,e,n,!1,t,o)}function k(e){var n,t,i=e.data;if(r(i))for(r(n=i.hook)&&r(n=n.destroy)&&n(e),n=0;n<o.destroy.length;++n)o.destroy[n](e);if(r(n=e.children))for(t=0;t<e.children.length;++t)k(e.children[t])}function S(e,n,t){for(;n<=t;++n){var o=e[n];r(o)&&(r(o.tag)?(x(o),k(o)):u(o.elm))}}function x(e,n){if(r(n)||r(e.data)){var t,i=o.remove.length+1;for(r(n)?n.listeners+=i:n=function(e,n){function t(){0==--t.listeners&&u(e)}return t.listeners=n,t}(e.elm,i),r(t=e.componentInstance)&&r(t=t._vnode)&&r(t.data)&&x(t,n),t=0;t<o.remove.length;++t)o.remove[t](e,n);r(t=e.data.hook)&&r(t=t.remove)?t(e,n):n()}else u(e.elm)}function I(e,n,t,o){for(var i=t;i<o;i++){var a=n[i];if(r(a)&&Ao(e,a))return i}}function C(e,n,t,i,l,d){if(e!==n){r(n.elm)&&r(i)&&(n=i[l]=fe(n));var u=n.elm=e.elm;if(s(e.isAsyncPlaceholder))r(n.asyncFactory.resolved)?P(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(s(n.isStatic)&&s(e.isStatic)&&n.key===e.key&&(s(n.isCloned)||s(n.isOnce)))n.componentInstance=e.componentInstance;else{var h,m=n.data;r(m)&&r(h=m.hook)&&r(h=h.prepatch)&&h(e,n);var f=e.children,b=n.children;if(r(m)&&g(n)){for(h=0;h<o.update.length;++h)o.update[h](e,n);r(h=m.hook)&&r(h=h.update)&&h(e,n)}a(n.text)?r(f)&&r(b)?f!==b&&function(e,n,t,o,i){var s,l,d,u=0,h=0,m=n.length-1,f=n[0],g=n[m],b=t.length-1,y=t[0],v=t[b],k=!i;for(0;u<=m&&h<=b;)a(f)?f=n[++u]:a(g)?g=n[--m]:Ao(f,y)?(C(f,y,o,t,h),f=n[++u],y=t[++h]):Ao(g,v)?(C(g,v,o,t,b),g=n[--m],v=t[--b]):Ao(f,v)?(C(f,v,o,t,b),k&&c.insertBefore(e,f.elm,c.nextSibling(g.elm)),f=n[++u],v=t[--b]):Ao(g,y)?(C(g,y,o,t,h),k&&c.insertBefore(e,g.elm,f.elm),g=n[--m],y=t[++h]):(a(s)&&(s=Oo(n,u,m)),a(l=r(y.key)?s[y.key]:I(y,n,u,m))?p(y,o,e,f.elm,!1,t,h):Ao(d=n[l],y)?(C(d,y,o,t,h),n[l]=void 0,k&&c.insertBefore(e,d.elm,f.elm)):p(y,o,e,f.elm,!1,t,h),y=t[++h]);u>m?w(e,a(t[b+1])?null:t[b+1].elm,t,h,b,o):h>b&&S(n,u,m)}(u,f,b,t,d):r(b)?(r(e.text)&&c.setTextContent(u,""),w(u,null,b,0,b.length-1,t)):r(f)?S(f,0,f.length-1):r(e.text)&&c.setTextContent(u,""):e.text!==n.text&&c.setTextContent(u,n.text),r(m)&&r(h=m.hook)&&r(h=h.postpatch)&&h(e,n)}}}function A(e,n,t){if(s(t)&&r(e.parent))e.parent.data.pendingInsert=n;else for(var o=0;o<n.length;++o)n[o].data.hook.insert(n[o])}var O=y("attrs,class,staticClass,staticStyle,key");function P(e,n,t,o){var i,a=n.tag,l=n.data,d=n.children;if(o=o||l&&l.pre,n.elm=e,s(n.isComment)&&r(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(r(l)&&(r(i=l.hook)&&r(i=i.init)&&i(n,!0),r(i=n.componentInstance)))return h(n,t),!0;if(r(a)){if(r(d))if(e.hasChildNodes())if(r(i=l)&&r(i=i.domProps)&&r(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var c=!0,u=e.firstChild,p=0;p<d.length;p++){if(!u||!P(u,d[p],t,o)){c=!1;break}u=u.nextSibling}if(!c||u)return!1}else f(n,d,t);if(r(l)){var m=!1;for(var g in l)if(!O(g)){m=!0,b(n,t);break}!m&&l.class&&_n(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,i){if(!a(n)){var l,d=!1,u=[];if(a(e))d=!0,p(n,u);else{var h=r(e.nodeType);if(!h&&Ao(e,n))C(e,n,u,null,null,i);else{if(h){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),s(t)&&P(e,n,u))return A(n,u,!0),e;l=e,e=new pe(c.tagName(l).toLowerCase(),{},[],void 0,l)}var m=e.elm,f=c.parentNode(m);if(p(n,u,m._leaveCb?null:f,c.nextSibling(m)),r(n.parent))for(var b=n.parent,y=g(n);b;){for(var v=0;v<o.destroy.length;++v)o.destroy[v](b);if(b.elm=n.elm,y){for(var w=0;w<o.create.length;++w)o.create[w](Io,b);var x=b.data.hook.insert;if(x.merged)for(var I=1;I<x.fns.length;I++)x.fns[I]()}else So(b);b=b.parent}r(f)?S([e],0,0):r(e.tag)&&k(e)}}return A(n,u,d),n.elm}r(e)&&k(e)}}({nodeOps:wo,modules:[Lo,zo,Xo,$o,li,X?{create:Di,activate:Di,remove:function(e,n){!0!==e.data.show?Mi(e,n):n()}}:{}].concat(Uo)});$&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&zi(e,"input")}));var Ui={inserted:function(e,n,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?je(t,"postpatch",(function(){Ui.componentUpdated(e,n,t)})):Fi(e,n,t.context),e._vOptions=[].map.call(e.options,Li)):("textarea"===t.tag||vo(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",qi),e.addEventListener("compositionend",Gi),e.addEventListener("change",Gi),$&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){Fi(e,n,t.context);var o=e._vOptions,i=e._vOptions=[].map.call(e.options,Li);if(i.some((function(e,n){return!R(e,o[n])})))(e.multiple?n.value.some((function(e){return Ni(e,i)})):n.value!==n.oldValue&&Ni(n.value,i))&&zi(e,"change")}}};function Fi(e,n,t){Ri(e,n,t),(Q||J)&&setTimeout((function(){Ri(e,n,t)}),0)}function Ri(e,n,t){var o=n.value,i=e.multiple;if(!i||Array.isArray(o)){for(var a,r,s=0,l=e.options.length;s<l;s++)if(r=e.options[s],i)a=N(o,Li(r))>-1,r.selected!==a&&(r.selected=a);else if(R(Li(r),o))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function Ni(e,n){return n.every((function(n){return!R(n,e)}))}function Li(e){return"_value"in e?e._value:e.value}function qi(e){e.target.composing=!0}function Gi(e){e.target.composing&&(e.target.composing=!1,zi(e.target,"input"))}function zi(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function _i(e){return!e.componentInstance||e.data&&e.data.transition?e:_i(e.componentInstance._vnode)}var Vi={model:Ui,show:{bind:function(e,n,t){var o=n.value,i=(t=_i(t)).data&&t.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;o&&i?(t.data.show=!0,Pi(t,(function(){e.style.display=a}))):e.style.display=o?a:"none"},update:function(e,n,t){var o=n.value;!o!=!n.oldValue&&((t=_i(t)).data&&t.data.transition?(t.data.show=!0,o?Pi(t,(function(){e.style.display=e.__vOriginalDisplay})):Mi(t,(function(){e.style.display="none"}))):e.style.display=o?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,o,i){i||(e.style.display=e.__vOriginalDisplay)}}},Hi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Yi(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?Yi(In(n.children)):e}function ji(e){var n={},t=e.$options;for(var o in t.propsData)n[o]=e[o];var i=t._parentListeners;for(var o in i)n[C(o)]=i[o];return n}function Ki(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Xi=function(e){return e.tag||mn(e)},Wi=function(e){return"show"===e.name},Qi={name:"transition",props:Hi,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Xi)).length){0;var o=this.mode;0;var i=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var a=Yi(i);if(!a)return i;if(this._leaving)return Ki(e,i);var r="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?r+"comment":r+a.tag:l(a.key)?0===String(a.key).indexOf(r)?a.key:r+a.key:a.key;var s=(a.data||(a.data={})).transition=ji(this),d=this._vnode,c=Yi(d);if(a.data.directives&&a.data.directives.some(Wi)&&(a.data.show=!0),c&&c.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(a,c)&&!mn(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var u=c.data.transition=E({},s);if("out-in"===o)return this._leaving=!0,je(u,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),Ki(e,i);if("in-out"===o){if(mn(a))return d;var p,h=function(){p()};je(s,"afterEnter",h),je(s,"enterCancelled",h),je(u,"delayLeave",(function(e){p=e}))}}return i}}},$i=E({tag:String,moveClass:String},Hi);function Ji(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Zi(e){e.data.newPos=e.elm.getBoundingClientRect()}function ea(e){var n=e.data.pos,t=e.data.newPos,o=n.left-t.left,i=n.top-t.top;if(o||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate(".concat(o,"px,").concat(i,"px)"),a.transitionDuration="0s"}}delete $i.mode;var na={Transition:Qi,TransitionGroup:{props:$i,beforeMount:function(){var e=this,n=this._update;this._update=function(t,o){var i=$n(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),n.call(e,t,o)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],r=ji(this),s=0;s<i.length;s++){if((c=i[s]).tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))a.push(c),t[c.key]=c,(c.data||(c.data={})).transition=r;else;}if(o){var l=[],d=[];for(s=0;s<o.length;s++){var c;(c=o[s]).data.transition=r,c.data.pos=c.elm.getBoundingClientRect(),t[c.key]?l.push(c):d.push(c)}this.kept=e(n,null,l),this.removed=d}return e(n,null,a)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(Ji),e.forEach(Zi),e.forEach(ea),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,o=t.style;ki(t,n),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(gi,t._moveCb=function e(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(gi,e),t._moveCb=null,Si(t,n))})}})))},methods:{hasMove:function(e,n){if(!mi)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){ui(t,e)})),ci(t,n),t.style.display="none",this.$el.appendChild(t);var o=Ci(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};function ta(e,n){for(var t in n)e[t]=n[t];return e}jt.config.mustUseProp=function(e,n,t){return"value"===t&&no(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},jt.config.isReservedTag=bo,jt.config.isReservedAttr=eo,jt.config.getTagNamespace=function(e){return go(e)?"svg":"math"===e?"math":void 0},jt.config.isUnknownElement=function(e){if(!X)return!0;if(bo(e))return!1;if(e=e.toLowerCase(),null!=yo[e])return yo[e];var n=document.createElement(e);return e.indexOf("-")>-1?yo[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:yo[e]=/HTMLUnknownElement/.test(n.toString())},E(jt.options.directives,Vi),E(jt.options.components,na),jt.prototype.__patch__=X?Bi:B,jt.prototype.$mount=function(e,n){return function(e,n,t){var o;e.$el=n,e.$options.render||(e.$options.render=he),et(e,"beforeMount"),o=function(){e._update(e._render(),t)},new Yn(e,o,B,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1;var i=e._preWatchers;if(i)for(var a=0;a<i.length;a++)i[a].run();return null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&X?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},X&&setTimeout((function(){_.devtools&&re&&re.emit("init",jt)}),0);var oa=/[!'()*]/g,ia=function(e){return"%"+e.charCodeAt(0).toString(16)},aa=/%2C/g,ra=function(e){return encodeURIComponent(e).replace(oa,ia).replace(aa,",")};function sa(e){try{return decodeURIComponent(e)}catch(e){0}return e}var la=function(e){return null==e||"object"==typeof e?e:String(e)};function da(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=sa(t.shift()),i=t.length>0?sa(t.join("=")):null;void 0===n[o]?n[o]=i:Array.isArray(n[o])?n[o].push(i):n[o]=[n[o],i]})),n):n}function ca(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return ra(n);if(Array.isArray(t)){var o=[];return t.forEach((function(e){void 0!==e&&(null===e?o.push(ra(n)):o.push(ra(n)+"="+ra(e)))})),o.join("&")}return ra(n)+"="+ra(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var ua=/\/?$/;function pa(e,n,t,o){var i=o&&o.options.stringifyQuery,a=n.query||{};try{a=ha(a)}catch(e){}var r={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:a,params:n.params||{},fullPath:ga(n,i),matched:e?fa(e):[]};return t&&(r.redirectedFrom=ga(t,i)),Object.freeze(r)}function ha(e){if(Array.isArray(e))return e.map(ha);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=ha(e[t]);return n}return e}var ma=pa(null,{path:"/"});function fa(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function ga(e,n){var t=e.path,o=e.query;void 0===o&&(o={});var i=e.hash;return void 0===i&&(i=""),(t||"/")+(n||ca)(o)+i}function ba(e,n,t){return n===ma?e===n:!!n&&(e.path&&n.path?e.path.replace(ua,"")===n.path.replace(ua,"")&&(t||e.hash===n.hash&&ya(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&ya(e.query,n.query)&&ya(e.params,n.params))))}function ya(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),o=Object.keys(n).sort();return t.length===o.length&&t.every((function(t,i){var a=e[t];if(o[i]!==t)return!1;var r=n[t];return null==a||null==r?a===r:"object"==typeof a&&"object"==typeof r?ya(a,r):String(a)===String(r)}))}function va(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var o in t.instances){var i=t.instances[o],a=t.enteredCbs[o];if(i&&a){delete t.enteredCbs[o];for(var r=0;r<a.length;r++)i._isBeingDestroyed||a[r](i)}}}}var wa={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,o=n.children,i=n.parent,a=n.data;a.routerView=!0;for(var r=i.$createElement,s=t.name,l=i.$route,d=i._routerViewCache||(i._routerViewCache={}),c=0,u=!1;i&&i._routerRoot!==i;){var p=i.$vnode?i.$vnode.data:{};p.routerView&&c++,p.keepAlive&&i._directInactive&&i._inactive&&(u=!0),i=i.$parent}if(a.routerViewDepth=c,u){var h=d[s],m=h&&h.component;return m?(h.configProps&&ka(m,a,h.route,h.configProps),r(m,a,o)):r()}var f=l.matched[c],g=f&&f.components[s];if(!f||!g)return d[s]=null,r();d[s]={component:g},a.registerRouteInstance=function(e,n){var t=f.instances[s];(n&&t!==e||!n&&t===e)&&(f.instances[s]=n)},(a.hook||(a.hook={})).prepatch=function(e,n){f.instances[s]=n.componentInstance},a.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==f.instances[s]&&(f.instances[s]=e.componentInstance),va(l)};var b=f.props&&f.props[s];return b&&(ta(d[s],{route:l,configProps:b}),ka(g,a,l,b)),r(g,a,o)}};function ka(e,n,t,o){var i=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,o);if(i){i=n.props=ta({},i);var a=n.attrs=n.attrs||{};for(var r in i)e.props&&r in e.props||(a[r]=i[r],delete i[r])}}function Sa(e,n,t){var o=e.charAt(0);if("/"===o)return e;if("?"===o||"#"===o)return n+e;var i=n.split("/");t&&i[i.length-1]||i.pop();for(var a=e.replace(/^\//,"").split("/"),r=0;r<a.length;r++){var s=a[r];".."===s?i.pop():"."!==s&&i.push(s)}return""!==i[0]&&i.unshift(""),i.join("/")}function xa(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var Ia=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},Ca=qa,Aa=Ea,Oa=function(e,n){return Ba(Ea(e,n),n)},Pa=Ba,Ma=La,Ta=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Ea(e,n){for(var t,o=[],i=0,a=0,r="",s=n&&n.delimiter||"/";null!=(t=Ta.exec(e));){var l=t[0],d=t[1],c=t.index;if(r+=e.slice(a,c),a=c+l.length,d)r+=d[1];else{var u=e[a],p=t[2],h=t[3],m=t[4],f=t[5],g=t[6],b=t[7];r&&(o.push(r),r="");var y=null!=p&&null!=u&&u!==p,v="+"===g||"*"===g,w="?"===g||"*"===g,k=t[2]||s,S=m||f;o.push({name:h||i++,prefix:p||"",delimiter:k,optional:w,repeat:v,partial:y,asterisk:!!b,pattern:S?Fa(S):b?".*":"[^"+Ua(k)+"]+?"})}}return a<e.length&&(r+=e.substr(a)),r&&o.push(r),o}function Da(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Ba(e,n){for(var t=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(t[o]=new RegExp("^(?:"+e[o].pattern+")$",Na(n)));return function(n,o){for(var i="",a=n||{},r=(o||{}).pretty?Da:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var d,c=a[l.name];if(null==c){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Ia(c)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(c)+"`");if(0===c.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(d=r(c[u]),!t[s].test(d))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(d)+"`");i+=(0===u?l.prefix:l.delimiter)+d}}else{if(d=l.asterisk?encodeURI(c).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(c),!t[s].test(d))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+d+'"');i+=l.prefix+d}}else i+=l}return i}}function Ua(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Fa(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Ra(e,n){return e.keys=n,e}function Na(e){return e&&e.sensitive?"":"i"}function La(e,n,t){Ia(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,i=!1!==t.end,a="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)a+=Ua(s);else{var l=Ua(s.prefix),d="(?:"+s.pattern+")";n.push(s),s.repeat&&(d+="(?:"+l+d+")*"),a+=d=s.optional?s.partial?l+"("+d+")?":"(?:"+l+"("+d+"))?":l+"("+d+")"}}var c=Ua(t.delimiter||"/"),u=a.slice(-c.length)===c;return o||(a=(u?a.slice(0,-c.length):a)+"(?:"+c+"(?=$))?"),a+=i?"$":o&&u?"":"(?="+c+"|$)",Ra(new RegExp("^"+a,Na(t)),n)}function qa(e,n,t){return Ia(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)n.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Ra(e,n)}(e,n):Ia(e)?function(e,n,t){for(var o=[],i=0;i<e.length;i++)o.push(qa(e[i],n,t).source);return Ra(new RegExp("(?:"+o.join("|")+")",Na(t)),n)}(e,n,t):function(e,n,t){return La(Ea(e,t),n,t)}(e,n,t)}Ca.parse=Aa,Ca.compile=Oa,Ca.tokensToFunction=Pa,Ca.tokensToRegExp=Ma;var Ga=Object.create(null);function za(e,n,t){n=n||{};try{var o=Ga[e]||(Ga[e]=Ca.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),o(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function _a(e,n,t,o){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var a=(i=ta({},e)).params;return a&&"object"==typeof a&&(i.params=ta({},a)),i}if(!i.path&&i.params&&n){(i=ta({},i))._normalized=!0;var r=ta(ta({},n.params),i.params);if(n.name)i.name=n.name,i.params=r;else if(n.matched.length){var s=n.matched[n.matched.length-1].path;i.path=za(s,r,n.path)}else 0;return i}var l=function(e){var n="",t="",o=e.indexOf("#");o>=0&&(n=e.slice(o),e=e.slice(0,o));var i=e.indexOf("?");return i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),{path:e,query:t,hash:n}}(i.path||""),d=n&&n.path||"/",c=l.path?Sa(l.path,d,t||i.append):d,u=function(e,n,t){void 0===n&&(n={});var o,i=t||da;try{o=i(e||"")}catch(e){o={}}for(var a in n){var r=n[a];o[a]=Array.isArray(r)?r.map(la):la(r)}return o}(l.query,i.query,o&&o.options.parseQuery),p=i.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:c,query:u,hash:p}}var Va,Ha=function(){},Ya={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,o=this.$route,i=t.resolve(this.to,o,this.append),a=i.location,r=i.route,s=i.href,l={},d=t.options.linkActiveClass,c=t.options.linkExactActiveClass,u=null==d?"router-link-active":d,p=null==c?"router-link-exact-active":c,h=null==this.activeClass?u:this.activeClass,m=null==this.exactActiveClass?p:this.exactActiveClass,f=r.redirectedFrom?pa(null,_a(r.redirectedFrom),null,t):r;l[m]=ba(o,f,this.exactPath),l[h]=this.exact||this.exactPath?l[m]:function(e,n){return 0===e.path.replace(ua,"/").indexOf(n.path.replace(ua,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(o,f);var g=l[m]?this.ariaCurrentValue:null,b=function(e){ja(e)&&(n.replace?t.replace(a,Ha):t.push(a,Ha))},y={click:ja};Array.isArray(this.event)?this.event.forEach((function(e){y[e]=b})):y[this.event]=b;var v={class:l},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:r,navigate:b,isActive:l[h],isExactActive:l[m]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?e():e("span",{},w)}if("a"===this.tag)v.on=y,v.attrs={href:s,"aria-current":g};else{var k=function e(n){var t;if(n)for(var o=0;o<n.length;o++){if("a"===(t=n[o]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(k){k.isStatic=!1;var S=k.data=ta({},k.data);for(var x in S.on=S.on||{},S.on){var I=S.on[x];x in y&&(S.on[x]=Array.isArray(I)?I:[I])}for(var C in y)C in S.on?S.on[C].push(y[C]):S.on[C]=b;var A=k.data.attrs=ta({},k.data.attrs);A.href=s,A["aria-current"]=g}else v.on=y}return e(this.tag,v,this.$slots.default)}};function ja(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var Ka="undefined"!=typeof window;function Xa(e,n,t,o,i){var a=n||[],r=t||Object.create(null),s=o||Object.create(null);e.forEach((function(e){!function e(n,t,o,i,a,r){var s=i.path,l=i.name;0;var d=i.pathToRegexpOptions||{},c=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return xa(n.path+"/"+e)}(s,a,d.strict);"boolean"==typeof i.caseSensitive&&(d.sensitive=i.caseSensitive);var u={path:c,regex:Wa(c,d),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:r,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var a=r?xa(r+"/"+i.path):void 0;e(n,t,o,i,u,a)}));t[u.path]||(n.push(u.path),t[u.path]=u);if(void 0!==i.alias)for(var p=Array.isArray(i.alias)?i.alias:[i.alias],h=0;h<p.length;++h){0;var m={path:p[h],children:i.children};e(n,t,o,m,a,u.path||"/")}l&&(o[l]||(o[l]=u))}(a,r,s,e,i)}));for(var l=0,d=a.length;l<d;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),d--,l--);return{pathList:a,pathMap:r,nameMap:s}}function Wa(e,n){return Ca(e,[],n)}function Qa(e,n){var t=Xa(e),o=t.pathList,i=t.pathMap,a=t.nameMap;function r(e,t,r){var s=_a(e,t,!1,n),d=s.name;if(d){var c=a[d];if(!c)return l(null,s);var u=c.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=za(c.path,s.params),l(c,s,r)}if(s.path){s.params={};for(var h=0;h<o.length;h++){var m=o[h],f=i[m];if($a(f.regex,s.path,s.params))return l(f,s,r)}}return l(null,s)}function s(e,t){var o=e.redirect,i="function"==typeof o?o(pa(e,t,null,n)):o;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var s=i,d=s.name,c=s.path,u=t.query,p=t.hash,h=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,d){a[d];return r({_normalized:!0,name:d,query:u,hash:p,params:h},void 0,t)}if(c){var m=function(e,n){return Sa(e,n.parent?n.parent.path:"/",!0)}(c,e);return r({_normalized:!0,path:za(m,h),query:u,hash:p},void 0,t)}return l(null,t)}function l(e,t,o){return e&&e.redirect?s(e,o||t):e&&e.matchAs?function(e,n,t){var o=r({_normalized:!0,path:za(t,n.params)});if(o){var i=o.matched,a=i[i.length-1];return n.params=o.params,l(a,n)}return l(null,n)}(0,t,e.matchAs):pa(e,t,o,n)}return{match:r,addRoute:function(e,n){var t="object"!=typeof e?a[e]:void 0;Xa([n||e],o,i,a,t),t&&t.alias.length&&Xa(t.alias.map((function(e){return{path:e,children:[n]}})),o,i,a,t)},getRoutes:function(){return o.map((function(e){return i[e]}))},addRoutes:function(e){Xa(e,o,i,a)}}}function $a(e,n,t){var o=n.match(e);if(!o)return!1;if(!t)return!0;for(var i=1,a=o.length;i<a;++i){var r=e.keys[i-1];r&&(t[r.name||"pathMatch"]="string"==typeof o[i]?sa(o[i]):o[i])}return!0}var Ja=Ka&&window.performance&&window.performance.now?window.performance:Date;function Za(){return Ja.now().toFixed(3)}var er=Za();function nr(){return er}function tr(e){return er=e}var or=Object.create(null);function ir(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=ta({},window.history.state);return t.key=nr(),window.history.replaceState(t,"",n),window.addEventListener("popstate",sr),function(){window.removeEventListener("popstate",sr)}}function ar(e,n,t,o){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var a=function(){var e=nr();if(e)return or[e]}(),r=i.call(e,n,t,o?a:null);r&&("function"==typeof r.then?r.then((function(e){pr(e,a)})).catch((function(e){0})):pr(r,a))}))}}function rr(){var e=nr();e&&(or[e]={x:window.pageXOffset,y:window.pageYOffset})}function sr(e){rr(),e.state&&e.state.key&&tr(e.state.key)}function lr(e){return cr(e.x)||cr(e.y)}function dr(e){return{x:cr(e.x)?e.x:window.pageXOffset,y:cr(e.y)?e.y:window.pageYOffset}}function cr(e){return"number"==typeof e}var ur=/^#\d/;function pr(e,n){var t,o="object"==typeof e;if(o&&"string"==typeof e.selector){var i=ur.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var a=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{x:o.left-t.left-n.x,y:o.top-t.top-n.y}}(i,a={x:cr((t=a).x)?t.x:0,y:cr(t.y)?t.y:0})}else lr(e)&&(n=dr(e))}else o&&lr(e)&&(n=dr(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var hr,mr=Ka&&((-1===(hr=window.navigator.userAgent).indexOf("Android 2.")&&-1===hr.indexOf("Android 4.0")||-1===hr.indexOf("Mobile Safari")||-1!==hr.indexOf("Chrome")||-1!==hr.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fr(e,n){rr();var t=window.history;try{if(n){var o=ta({},t.state);o.key=nr(),t.replaceState(o,"",e)}else t.pushState({key:tr(Za())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function gr(e){fr(e,!0)}var br={redirected:2,aborted:4,cancelled:8,duplicated:16};function yr(e,n){return wr(e,n,br.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return kr.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function vr(e,n){return wr(e,n,br.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function wr(e,n,t,o){var i=new Error(o);return i._isRouter=!0,i.from=e,i.to=n,i.type=t,i}var kr=["params","query","hash"];function Sr(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function xr(e,n){return Sr(e)&&e._isRouter&&(null==n||e.type===n)}function Ir(e,n,t){var o=function(i){i>=e.length?t():e[i]?n(e[i],(function(){o(i+1)})):o(i+1)};o(0)}function Cr(e){return function(n,t,o){var i=!1,a=0,r=null;Ar(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){i=!0,a++;var l,d=Mr((function(n){var i;((i=n).__esModule||Pr&&"Module"===i[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:Va.extend(n),t.components[s]=n,--a<=0&&o()})),c=Mr((function(e){var n="Failed to resolve async component "+s+": "+e;r||(r=Sr(e)?e:new Error(n),o(r))}));try{l=e(d,c)}catch(e){c(e)}if(l)if("function"==typeof l.then)l.then(d,c);else{var u=l.component;u&&"function"==typeof u.then&&u.then(d,c)}}})),i||o()}}function Ar(e,n){return Or(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function Or(e){return Array.prototype.concat.apply([],e)}var Pr="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Mr(e){var n=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!n)return n=!0,e.apply(this,t)}}var Tr=function(e,n){this.router=e,this.base=function(e){if(!e)if(Ka){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=ma,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Er(e,n,t,o){var i=Ar(e,(function(e,o,i,a){var r=function(e,n){"function"!=typeof e&&(e=Va.extend(e));return e.options[n]}(e,n);if(r)return Array.isArray(r)?r.map((function(e){return t(e,o,i,a)})):t(r,o,i,a)}));return Or(o?i.reverse():i)}function Dr(e,n){if(n)return function(){return e.apply(n,arguments)}}Tr.prototype.listen=function(e){this.cb=e},Tr.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},Tr.prototype.onError=function(e){this.errorCbs.push(e)},Tr.prototype.transitionTo=function(e,n,t){var o,i=this;try{o=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var a=this.current;this.confirmTransition(o,(function(){i.updateRoute(o),n&&n(o),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(o,a)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(o)})))}),(function(e){t&&t(e),e&&!i.ready&&(xr(e,br.redirected)&&a===ma||(i.ready=!0,i.readyErrorCbs.forEach((function(n){n(e)}))))}))},Tr.prototype.confirmTransition=function(e,n,t){var o=this,i=this.current;this.pending=e;var a,r,s=function(e){!xr(e)&&Sr(e)&&(o.errorCbs.length?o.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},l=e.matched.length-1,d=i.matched.length-1;if(ba(e,i)&&l===d&&e.matched[l]===i.matched[d])return this.ensureURL(),e.hash&&ar(this.router,i,e,!1),s(((r=wr(a=i,e,br.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",r));var c=function(e,n){var t,o=Math.max(e.length,n.length);for(t=0;t<o&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),u=c.updated,p=c.deactivated,h=c.activated,m=[].concat(function(e){return Er(e,"beforeRouteLeave",Dr,!0)}(p),this.router.beforeHooks,function(e){return Er(e,"beforeRouteUpdate",Dr)}(u),h.map((function(e){return e.beforeEnter})),Cr(h)),f=function(n,t){if(o.pending!==e)return s(vr(i,e));try{n(e,i,(function(n){!1===n?(o.ensureURL(!0),s(function(e,n){return wr(e,n,br.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(i,e))):Sr(n)?(o.ensureURL(!0),s(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(s(yr(i,e)),"object"==typeof n&&n.replace?o.replace(n):o.push(n)):t(n)}))}catch(e){s(e)}};Ir(m,f,(function(){Ir(function(e){return Er(e,"beforeRouteEnter",(function(e,n,t,o){return function(e,n,t){return function(o,i,a){return e(o,i,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),a(e)}))}}(e,t,o)}))}(h).concat(o.router.resolveHooks),f,(function(){if(o.pending!==e)return s(vr(i,e));o.pending=null,n(e),o.router.app&&o.router.app.$nextTick((function(){va(e)}))}))}))},Tr.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Tr.prototype.setupListeners=function(){},Tr.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=ma,this.pending=null};var Br=function(e){function n(n,t){e.call(this,n,t),this._startLocation=Ur(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,o=mr&&t;o&&this.listeners.push(ir());var i=function(){var t=e.current,i=Ur(e.base);e.current===ma&&i===e._startLocation||e.transitionTo(i,(function(e){o&&ar(n,e,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){fr(xa(o.base+e.fullPath)),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){gr(xa(o.base+e.fullPath)),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(Ur(this.base)!==this.current.fullPath){var n=xa(this.base+this.current.fullPath);e?fr(n):gr(n)}},n.prototype.getCurrentLocation=function(){return Ur(this.base)},n}(Tr);function Ur(e){var n=window.location.pathname,t=n.toLowerCase(),o=e.toLowerCase();return!e||t!==o&&0!==t.indexOf(xa(o+"/"))||(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var Fr=function(e){function n(n,t,o){e.call(this,n,t),o&&function(e){var n=Ur(e);if(!/^\/#/.test(n))return window.location.replace(xa(e+"/#"+n)),!0}(this.base)||Rr()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=mr&&n;t&&this.listeners.push(ir());var o=function(){var n=e.current;Rr()&&e.transitionTo(Nr(),(function(o){t&&ar(e.router,o,n,!0),mr||Gr(o.fullPath)}))},i=mr?"popstate":"hashchange";window.addEventListener(i,o),this.listeners.push((function(){window.removeEventListener(i,o)}))}},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){qr(e.fullPath),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){Gr(e.fullPath),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;Nr()!==n&&(e?qr(n):Gr(n))},n.prototype.getCurrentLocation=function(){return Nr()},n}(Tr);function Rr(){var e=Nr();return"/"===e.charAt(0)||(Gr("/"+e),!1)}function Nr(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function Lr(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function qr(e){mr?fr(Lr(e)):window.location.hash=e}function Gr(e){mr?gr(Lr(e)):window.location.replace(Lr(e))}var zr=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index+1).concat(e),o.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var e=n.current;n.index=t,n.updateRoute(o),n.router.afterHooks.forEach((function(n){n&&n(o,e)}))}),(function(e){xr(e,br.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(Tr),_r=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Qa(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!mr&&!1!==e.fallback,this.fallback&&(n="hash"),Ka||(n="abstract"),this.mode=n,n){case"history":this.history=new Br(this,e.base);break;case"hash":this.history=new Fr(this,e.base,this.fallback);break;case"abstract":this.history=new zr(this,e.base);break;default:0}},Vr={currentRoute:{configurable:!0}};_r.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},Vr.currentRoute.get=function(){return this.history&&this.history.current},_r.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof Br||t instanceof Fr){var o=function(e){t.setupListeners(),function(e){var o=t.current,i=n.options.scrollBehavior;mr&&i&&"fullPath"in e&&ar(n,e,o,!1)}(e)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},_r.prototype.beforeEach=function(e){return Yr(this.beforeHooks,e)},_r.prototype.beforeResolve=function(e){return Yr(this.resolveHooks,e)},_r.prototype.afterEach=function(e){return Yr(this.afterHooks,e)},_r.prototype.onReady=function(e,n){this.history.onReady(e,n)},_r.prototype.onError=function(e){this.history.onError(e)},_r.prototype.push=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.push(e,n,t)}));this.history.push(e,n,t)},_r.prototype.replace=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.replace(e,n,t)}));this.history.replace(e,n,t)},_r.prototype.go=function(e){this.history.go(e)},_r.prototype.back=function(){this.go(-1)},_r.prototype.forward=function(){this.go(1)},_r.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},_r.prototype.resolve=function(e,n,t){var o=_a(e,n=n||this.history.current,t,this),i=this.match(o,n),a=i.redirectedFrom||i.fullPath;return{location:o,route:i,href:function(e,n,t){var o="hash"===t?"#"+n:n;return e?xa(e+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:i}},_r.prototype.getRoutes=function(){return this.matcher.getRoutes()},_r.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},_r.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(_r.prototype,Vr);var Hr=_r;function Yr(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}_r.install=function e(n){if(!e.installed||Va!==n){e.installed=!0,Va=n;var t=function(e){return void 0!==e},o=function(e,n){var o=e.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",wa),n.component("RouterLink",Ya);var i=n.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},_r.version="3.6.5",_r.isNavigationFailure=xr,_r.NavigationFailureType=br,_r.START_LOCATION=ma,Ka&&window.Vue&&window.Vue.use(_r);t(101);t(93),t(128);var jr={NotFound:()=>t.e(59).then(t.bind(null,535)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,534))},Kr={"v-5f435ea6":()=>t.e(60).then(t.bind(null,539)),"v-0598bab2":()=>t.e(10).then(t.bind(null,540)),"v-09f0f2cd":()=>t.e(11).then(t.bind(null,541)),"v-17876ab6":()=>t.e(61).then(t.bind(null,542)),"v-534eac26":()=>t.e(62).then(t.bind(null,543)),"v-63ef920e":()=>t.e(63).then(t.bind(null,544)),"v-2817348d":()=>t.e(64).then(t.bind(null,545)),"v-05f885ed":()=>t.e(65).then(t.bind(null,546)),"v-30c73b20":()=>t.e(66).then(t.bind(null,547)),"v-c594cb12":()=>t.e(67).then(t.bind(null,548)),"v-b3d44012":()=>t.e(68).then(t.bind(null,549)),"v-0ec291ed":()=>t.e(17).then(t.bind(null,550)),"v-cbc0a2a6":()=>t.e(18).then(t.bind(null,551)),"v-1e66a2f2":()=>t.e(19).then(t.bind(null,552)),"v-1596dced":()=>t.e(12).then(t.bind(null,553)),"v-774fae4d":()=>t.e(20).then(t.bind(null,554)),"v-0dcb7ce6":()=>t.e(13).then(t.bind(null,555)),"v-56b90fe6":()=>t.e(21).then(t.bind(null,556)),"v-b1677592":()=>t.e(22).then(t.bind(null,557)),"v-590069e6":()=>t.e(23).then(t.bind(null,558)),"v-0f014c0d":()=>t.e(24).then(t.bind(null,559)),"v-1b3d6a4d":()=>t.e(25).then(t.bind(null,560)),"v-3f17ab11":()=>t.e(26).then(t.bind(null,561)),"v-66600c2d":()=>t.e(27).then(t.bind(null,562)),"v-4c310623":()=>t.e(28).then(t.bind(null,563)),"v-514ba50d":()=>t.e(29).then(t.bind(null,564)),"v-5a347704":()=>t.e(39).then(t.bind(null,565)),"v-2e5d1f76":()=>t.e(14).then(t.bind(null,566)),"v-5cc60c9a":()=>t.e(30).then(t.bind(null,567)),"v-08d3b226":()=>t.e(31).then(t.bind(null,568)),"v-4d330d7a":()=>t.e(32).then(t.bind(null,569)),"v-43b3a5ad":()=>t.e(33).then(t.bind(null,570)),"v-b01c8616":()=>t.e(34).then(t.bind(null,571)),"v-3675c4ad":()=>t.e(15).then(t.bind(null,572)),"v-022a3d0d":()=>t.e(35).then(t.bind(null,573)),"v-59a4f3a6":()=>t.e(69).then(t.bind(null,574)),"v-48a88bb3":()=>t.e(36).then(t.bind(null,575)),"v-b45995c4":()=>t.e(40).then(t.bind(null,576)),"v-010da74d":()=>t.e(6).then(t.bind(null,577)),"v-1ab60666":()=>t.e(53).then(t.bind(null,578)),"v-2e394ce3":()=>t.e(70).then(t.bind(null,579)),"v-1ae073bb":()=>t.e(54).then(t.bind(null,580)),"v-2fe7bc2d":()=>t.e(71).then(t.bind(null,581)),"v-31cf8b6d":()=>t.e(72).then(t.bind(null,582)),"v-71e7376d":()=>t.e(73).then(t.bind(null,583)),"v-3a21b4ad":()=>t.e(74).then(t.bind(null,584)),"v-655aff7f":()=>t.e(49).then(t.bind(null,585)),"v-4694779a":()=>t.e(75).then(t.bind(null,586)),"v-3730ed66":()=>t.e(3).then(t.bind(null,587)),"v-4b67d32d":()=>t.e(50).then(t.bind(null,588)),"v-a0034d84":()=>t.e(76).then(t.bind(null,589)),"v-1d1cd917":()=>t.e(77).then(t.bind(null,590)),"v-094f9f8d":()=>t.e(4).then(t.bind(null,591)),"v-3720f90d":()=>t.e(43).then(t.bind(null,592)),"v-5c2963cd":()=>t.e(51).then(t.bind(null,593)),"v-6e88b902":()=>t.e(44).then(t.bind(null,594)),"v-76c4d0ed":()=>t.e(7).then(t.bind(null,595)),"v-6a3191c1":()=>t.e(41).then(t.bind(null,596)),"v-6a91c3ed":()=>t.e(5).then(t.bind(null,597)),"v-2d36c3cd":()=>t.e(55).then(t.bind(null,598)),"v-5a9fa515":()=>t.e(78).then(t.bind(null,599)),"v-fb5f9066":()=>t.e(79).then(t.bind(null,600)),"v-800849a6":()=>t.e(80).then(t.bind(null,601)),"v-8f35bea6":()=>t.e(81).then(t.bind(null,602)),"v-b6c24aaa":()=>t.e(37).then(t.bind(null,603)),"v-dca255e6":()=>t.e(52).then(t.bind(null,604)),"v-0be25d32":()=>t.e(16).then(t.bind(null,605)),"v-526d6785":()=>t.e(56).then(t.bind(null,606)),"v-381957ff":()=>t.e(57).then(t.bind(null,607)),"v-457daeed":()=>t.e(42).then(t.bind(null,608)),"v-4e3122ad":()=>t.e(38).then(t.bind(null,609)),"v-ca48b55a":()=>t.e(8).then(t.bind(null,610)),"v-e6d98926":()=>t.e(82).then(t.bind(null,611)),"v-3a54b007":()=>t.e(9).then(t.bind(null,612)),"v-337d85be":()=>t.e(83).then(t.bind(null,613))};function Xr(e){const n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}const Wr=/-(\w)/g,Qr=Xr(e=>e.replace(Wr,(e,n)=>n?n.toUpperCase():"")),$r=/\B([A-Z])/g,Jr=Xr(e=>e.replace($r,"-$1").toLowerCase()),Zr=Xr(e=>e.charAt(0).toUpperCase()+e.slice(1));function es(e,n){if(!n)return;if(e(n))return e(n);return n.includes("-")?e(Zr(Qr(n))):e(Zr(n))||e(Jr(n))}const ns=Object.assign({},jr,Kr),ts=e=>ns[e],os=e=>Kr[e],is=e=>jr[e],as=e=>jt.component(e);function rs(e){return es(os,e)}function ss(e){return es(is,e)}function ls(e){return es(ts,e)}function ds(e){return es(as,e)}function cs(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!ds(e)&&ls(e)){const n=await ls(e)();jt.component(e,n.default)}}))}function us(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}var ps=t(90),hs=t.n(ps),ms=t(91),fs=t.n(ms),gs={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,n])=>n),this.$ssrContext){const n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map(e=>{let n="<meta";return Object.keys(e).forEach(t=>{n+=` ${t}="${fs()(e[t])}"`}),n+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=ys(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=vs(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],e,this.siteMeta,ws)},updateCanonicalLink(){bs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",ys(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){vs(null,this.currentMetaTags),bs()}};function bs(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function ys(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function vs(e,n){if(n&&[...n].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const n=document.createElement("meta");return Object.keys(e).forEach(t=>{n.setAttribute(t,e[t])}),document.head.appendChild(n),n})}function ws(e){for(const n of["name","property","itemprop"])if(e.hasOwnProperty(n))return e[n]+n;return JSON.stringify(e)}var ks=t(23),Ss=t.n(ks),xs={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:Ss()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),n=[].slice.call(document.querySelectorAll(".header-anchor")).filter(n=>e.some(e=>e.hash===n.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+t;for(let e=0;e<n.length;e++){const a=n[e],r=n[e+1],s=0===e&&0===t||t>=a.parentElement.offsetTop+10&&(!r||t<r.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(a.hash)){const t=a;if(i===o)for(let t=e+1;t<n.length;t++)if(l===decodeURIComponent(n[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Is=t(24),Cs=t.n(Is),As={mounted(){Cs.a.configure({showSpinner:!1}),this.$router.beforeEach((e,n,t)=>{e.path===n.path||jt.component(e.name)||Cs.a.start(),t()}),this.$router.afterEach(()=>{Cs.a.done(),this.isSidebarOpen=!1})}},Os=t(92),Ps=t.n(Os),Ms={mounted(){Ps.a.polyfill()}},Ts=(t(235),Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}),Es=function(e){return"IMG"===e.tagName},Ds=function(e){return e&&1===e.nodeType},Bs=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},Us=function(e){try{return Array.isArray(e)?e.filter(Es):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(Es):Ds(e)?[e].filter(Es):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(Es):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},Fs=function(e){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=e,n},Rs=function(e){var n=e.getBoundingClientRect(),t=n.top,o=n.left,i=n.width,a=n.height,r=e.cloneNode(),s=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return r.removeAttribute("id"),r.style.position="absolute",r.style.top=t+s+"px",r.style.left=o+l+"px",r.style.width=i+"px",r.style.height=a+"px",r.style.transform="",r},Ns=function(e,n){var t=Ts({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(e,t);var o=document.createEvent("CustomEvent");return o.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),o};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&o.firstChild?o.insertBefore(i,o.firstChild):o.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var Ls=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=window.Promise||function(e){function n(){}e(n,n)},i=function(e){var n=e.target;n!==C?-1!==v.indexOf(n)&&f({target:n}):m()},a=function(){if(!k&&I.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(S-e)>x.scrollOffset&&setTimeout(m,150)}},r=function(e){var n=e.key||e.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||m()},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e;if(e.background&&(C.style.background=e.background),e.container&&e.container instanceof Object&&(n.container=Ts({},x.container,e.container)),e.template){var t=Ds(e.template)?e.template:document.querySelector(e.template);n.template=t}return x=Ts({},x,n),v.forEach((function(e){e.dispatchEvent(Ns("medium-zoom:update",{detail:{zoom:A}}))})),A},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(Ts({},x,n))},d=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var o=n.reduce((function(e,n){return[].concat(e,Us(n))}),[]);return o.filter((function(e){return-1===v.indexOf(e)})).forEach((function(e){v.push(e),e.classList.add("medium-zoom-image")})),w.forEach((function(e){var n=e.type,t=e.listener,i=e.options;o.forEach((function(e){e.addEventListener(n,t,i)}))})),A},c=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];I.zoomed&&m();var o=n.length>0?n.reduce((function(e,n){return[].concat(e,Us(n))}),[]):v;return o.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(Ns("medium-zoom:detach",{detail:{zoom:A}}))})),v=v.filter((function(e){return-1===o.indexOf(e)})),A},u=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.addEventListener("medium-zoom:"+e,n,t)})),w.push({type:"medium-zoom:"+e,listener:n,options:t}),A},p=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.removeEventListener("medium-zoom:"+e,n,t)})),w=w.filter((function(t){return!(t.type==="medium-zoom:"+e&&t.listener.toString()===n.toString())})),A},h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target,t=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,t=void 0;if(x.container)if(x.container instanceof Object)n=(e=Ts({},e,x.container)).width-e.left-e.right-2*x.margin,t=e.height-e.top-e.bottom-2*x.margin;else{var o=(Ds(x.container)?x.container:document.querySelector(x.container)).getBoundingClientRect(),i=o.width,a=o.height,r=o.left,s=o.top;e=Ts({},e,{width:i,height:a,left:r,top:s})}n=n||e.width-2*x.margin,t=t||e.height-2*x.margin;var l=I.zoomedHd||I.original,d=Bs(l)?n:l.naturalWidth||n,c=Bs(l)?t:l.naturalHeight||t,u=l.getBoundingClientRect(),p=u.top,h=u.left,m=u.width,f=u.height,g=Math.min(d,n)/m,b=Math.min(c,t)/f,y=Math.min(g,b),v="scale("+y+") translate3d("+((n-m)/2-h+x.margin+e.left)/y+"px, "+((t-f)/2-p+x.margin+e.top)/y+"px, 0)";I.zoomed.style.transform=v,I.zoomedHd&&(I.zoomedHd.style.transform=v)};return new o((function(e){if(n&&-1===v.indexOf(n))e(A);else{if(I.zoomed)e(A);else{if(n)I.original=n;else{if(!(v.length>0))return void e(A);var o=v;I.original=o[0]}if(I.original.dispatchEvent(Ns("medium-zoom:open",{detail:{zoom:A}})),S=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,k=!0,I.zoomed=Rs(I.original),document.body.appendChild(C),x.template){var i=Ds(x.template)?x.template:document.querySelector(x.template);I.template=document.createElement("div"),I.template.appendChild(i.content.cloneNode(!0)),document.body.appendChild(I.template)}if(document.body.appendChild(I.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),I.original.classList.add("medium-zoom-image--hidden"),I.zoomed.classList.add("medium-zoom-image--opened"),I.zoomed.addEventListener("click",m),I.zoomed.addEventListener("transitionend",(function n(){k=!1,I.zoomed.removeEventListener("transitionend",n),I.original.dispatchEvent(Ns("medium-zoom:opened",{detail:{zoom:A}})),e(A)})),I.original.getAttribute("data-zoom-src")){I.zoomedHd=I.zoomed.cloneNode(),I.zoomedHd.removeAttribute("srcset"),I.zoomedHd.removeAttribute("sizes"),I.zoomedHd.src=I.zoomed.getAttribute("data-zoom-src"),I.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+I.zoomedHd.src),I.zoomedHd=null,t()};var a=setInterval((function(){I.zoomedHd.complete&&(clearInterval(a),I.zoomedHd.classList.add("medium-zoom-image--opened"),I.zoomedHd.addEventListener("click",m),document.body.appendChild(I.zoomedHd),t())}),10)}else if(I.original.hasAttribute("srcset")){I.zoomedHd=I.zoomed.cloneNode(),I.zoomedHd.removeAttribute("sizes"),I.zoomedHd.removeAttribute("loading");var r=I.zoomedHd.addEventListener("load",(function(){I.zoomedHd.removeEventListener("load",r),I.zoomedHd.classList.add("medium-zoom-image--opened"),I.zoomedHd.addEventListener("click",m),document.body.appendChild(I.zoomedHd),t()}))}else t()}}}))},m=function(){return new o((function(e){if(!k&&I.original){k=!0,document.body.classList.remove("medium-zoom--opened"),I.zoomed.style.transform="",I.zoomedHd&&(I.zoomedHd.style.transform=""),I.template&&(I.template.style.transition="opacity 150ms",I.template.style.opacity=0),I.original.dispatchEvent(Ns("medium-zoom:close",{detail:{zoom:A}})),I.zoomed.addEventListener("transitionend",(function n(){I.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(I.zoomed),I.zoomedHd&&document.body.removeChild(I.zoomedHd),document.body.removeChild(C),I.zoomed.classList.remove("medium-zoom-image--opened"),I.template&&document.body.removeChild(I.template),k=!1,I.zoomed.removeEventListener("transitionend",n),I.original.dispatchEvent(Ns("medium-zoom:closed",{detail:{zoom:A}})),I.original=null,I.zoomed=null,I.zoomedHd=null,I.template=null,e(A)}))}else e(A)}))},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target;return I.original?m():h({target:n})},g=function(){return x},b=function(){return v},y=function(){return I.original},v=[],w=[],k=!1,S=0,x=t,I={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?x=n:(n||"string"==typeof n)&&d(n),x=Ts({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},x);var C=Fs(x.background);document.addEventListener("click",i),document.addEventListener("keyup",r),document.addEventListener("scroll",a),window.addEventListener("resize",m);var A={open:h,close:m,toggle:f,update:s,clone:l,attach:d,detach:c,on:u,off:p,getOptions:g,getImages:b,getZoomedImage:y};return A},qs=[gs,xs,As,Ms,{data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=Ls(".theme-succinct-content :not(a) > img",{background:"var(--bodyBgColor)"})},1e3)}}}],Gs={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return us("layout",e),jt.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},zs=t(10),_s=Object(zs.a)(Gs,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,n,t){switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),e[n].push(...t);break;default:throw new Error("Unknown option name.")}}(_s,"mixins",qs);const Vs=[{name:"v-5f435ea6",path:"/AMD/AMD-USB-map.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-5f435ea6").then(t)}},{name:"v-0598bab2",path:"/AMD/fx.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-0598bab2").then(t)}},{name:"v-09f0f2cd",path:"/AMD/zen.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-09f0f2cd").then(t)}},{name:"v-17876ab6",path:"/CONTRIBUTING.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-17876ab6").then(t)}},{name:"v-534eac26",path:"/LICENSE.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-534eac26").then(t)}},{name:"v-63ef920e",path:"/",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-63ef920e").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-2817348d",path:"/clover-conversion/Clover-boot-arg.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-2817348d").then(t)}},{name:"v-05f885ed",path:"/clover-conversion/Clover-config.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-05f885ed").then(t)}},{name:"v-30c73b20",path:"/clover-conversion/",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-30c73b20").then(t)}},{path:"/clover-conversion/index.html",redirect:"/clover-conversion/"},{name:"v-c594cb12",path:"/clover-conversion/clover-efi.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-c594cb12").then(t)}},{name:"v-b3d44012",path:"/clover-conversion/clover-patch.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-b3d44012").then(t)}},{name:"v-0ec291ed",path:"/config-HEDT/broadwell-e.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-0ec291ed").then(t)}},{name:"v-cbc0a2a6",path:"/config-HEDT/haswell-e.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-cbc0a2a6").then(t)}},{name:"v-1e66a2f2",path:"/config-HEDT/ivy-bridge-e.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-1e66a2f2").then(t)}},{name:"v-1596dced",path:"/config-HEDT/nehalem.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-1596dced").then(t)}},{name:"v-774fae4d",path:"/config-HEDT/skylake-x.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-774fae4d").then(t)}},{name:"v-0dcb7ce6",path:"/config-laptop.plist/arrandale.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-0dcb7ce6").then(t)}},{name:"v-56b90fe6",path:"/config-laptop.plist/broadwell.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-56b90fe6").then(t)}},{name:"v-b1677592",path:"/config-laptop.plist/coffee-lake-plus.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-b1677592").then(t)}},{name:"v-590069e6",path:"/config-laptop.plist/coffee-lake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-590069e6").then(t)}},{name:"v-0f014c0d",path:"/config-laptop.plist/haswell.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-0f014c0d").then(t)}},{name:"v-1b3d6a4d",path:"/config-laptop.plist/icelake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-1b3d6a4d").then(t)}},{name:"v-3f17ab11",path:"/config-laptop.plist/ivy-bridge.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-3f17ab11").then(t)}},{name:"v-66600c2d",path:"/config-laptop.plist/kaby-lake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-66600c2d").then(t)}},{name:"v-4c310623",path:"/config-laptop.plist/sandy-bridge.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-4c310623").then(t)}},{name:"v-514ba50d",path:"/config-laptop.plist/skylake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-514ba50d").then(t)}},{name:"v-5a347704",path:"/config.plist/",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-5a347704").then(t)}},{path:"/config.plist/index.html",redirect:"/config.plist/"},{name:"v-2e5d1f76",path:"/config.plist/clarkdale.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-2e5d1f76").then(t)}},{name:"v-5cc60c9a",path:"/config.plist/coffee-lake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-5cc60c9a").then(t)}},{name:"v-08d3b226",path:"/config.plist/comet-lake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-08d3b226").then(t)}},{name:"v-4d330d7a",path:"/config.plist/haswell.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-4d330d7a").then(t)}},{name:"v-43b3a5ad",path:"/config.plist/ivy-bridge.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-43b3a5ad").then(t)}},{name:"v-b01c8616",path:"/config.plist/kaby-lake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-b01c8616").then(t)}},{name:"v-3675c4ad",path:"/config.plist/penryn.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-3675c4ad").then(t)}},{name:"v-022a3d0d",path:"/config.plist/sandy-bridge.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-022a3d0d").then(t)}},{name:"v-59a4f3a6",path:"/config.plist/security.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-59a4f3a6").then(t)}},{name:"v-48a88bb3",path:"/config.plist/skylake.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-48a88bb3").then(t)}},{name:"v-b45995c4",path:"/extras/big-sur/",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-b45995c4").then(t)}},{path:"/extras/big-sur/index.html",redirect:"/extras/big-sur/"},{name:"v-010da74d",path:"/extras/big-sur/fusion.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-010da74d").then(t)}},{name:"v-1ab60666",path:"/extras/big-sur/virtualbox.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-1ab60666").then(t)}},{name:"v-2e394ce3",path:"/extras/big-sur/workstation.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-2e394ce3").then(t)}},{name:"v-1ae073bb",path:"/extras/kaslr-fix.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-1ae073bb").then(t)}},{name:"v-2fe7bc2d",path:"/extras/legacy.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-2fe7bc2d").then(t)}},{name:"v-31cf8b6d",path:"/extras/monterey.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-31cf8b6d").then(t)}},{name:"v-71e7376d",path:"/extras/smbios-support.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-71e7376d").then(t)}},{name:"v-3a21b4ad",path:"/extras/smbios.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-3a21b4ad").then(t)}},{name:"v-655aff7f",path:"/extras/spoof.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-655aff7f").then(t)}},{name:"v-4694779a",path:"/extras/ventura.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-4694779a").then(t)}},{name:"v-3730ed66",path:"/find-hardware.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-3730ed66").then(t)}},{name:"v-4b67d32d",path:"/installation/installation-process.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-4b67d32d").then(t)}},{name:"v-a0034d84",path:"/installer-guide/",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-a0034d84").then(t)}},{path:"/installer-guide/index.html",redirect:"/installer-guide/"},{name:"v-1d1cd917",path:"/installer-guide/legacy-mac-install.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-1d1cd917").then(t)}},{name:"v-094f9f8d",path:"/installer-guide/linux-install.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-094f9f8d").then(t)}},{name:"v-3720f90d",path:"/installer-guide/mac-install-dmg.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-3720f90d").then(t)}},{name:"v-5c2963cd",path:"/installer-guide/mac-install-pkg.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-5c2963cd").then(t)}},{name:"v-6e88b902",path:"/installer-guide/mac-install-recovery.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-6e88b902").then(t)}},{name:"v-76c4d0ed",path:"/installer-guide/mac-install.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-76c4d0ed").then(t)}},{name:"v-6a3191c1",path:"/installer-guide/opencore-efi.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-6a3191c1").then(t)}},{name:"v-6a91c3ed",path:"/installer-guide/windows-install.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-6a91c3ed").then(t)}},{name:"v-2d36c3cd",path:"/ktext.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-2d36c3cd").then(t)}},{name:"v-5a9fa515",path:"/macos-limits.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-5a9fa515").then(t)}},{name:"v-fb5f9066",path:"/misc/credit.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-fb5f9066").then(t)}},{name:"v-800849a6",path:"/prerequisites.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-800849a6").then(t)}},{name:"v-8f35bea6",path:"/terminology.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-8f35bea6").then(t)}},{name:"v-b6c24aaa",path:"/troubleshooting/boot.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-b6c24aaa").then(t)}},{name:"v-dca255e6",path:"/troubleshooting/debug.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-dca255e6").then(t)}},{name:"v-0be25d32",path:"/troubleshooting/extended/kernel-issues.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-0be25d32").then(t)}},{name:"v-526d6785",path:"/troubleshooting/extended/misc-issues.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-526d6785").then(t)}},{name:"v-381957ff",path:"/troubleshooting/extended/opencore-issues.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-381957ff").then(t)}},{name:"v-457daeed",path:"/troubleshooting/extended/post-issues.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-457daeed").then(t)}},{name:"v-4e3122ad",path:"/troubleshooting/extended/userspace-issues.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-4e3122ad").then(t)}},{name:"v-ca48b55a",path:"/troubleshooting/kernel-debugging.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-ca48b55a").then(t)}},{name:"v-e6d98926",path:"/troubleshooting/troubleshooting.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-e6d98926").then(t)}},{name:"v-3a54b007",path:"/why-oc.html",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-3a54b007").then(t)}},{name:"v-337d85be",path:"/zh/",component:_s,beforeEnter:(e,n,t)=>{cs("Layout","v-337d85be").then(t)}},{path:"/zh/index.html",redirect:"/zh/"},{path:"*",component:_s}],Hs={title:"",description:"",base:"/OpenCore-Install-Guide/",headTags:[["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"'stylesheet",href:"/OpenCore-Install-Guide/styles/website.css"}]],pages:[{title:"AMD USB Map",frontmatter:{search:!1},regularPath:"/AMD/AMD-USB-map.html",relativePath:"AMD/AMD-USB-map.md",key:"v-5f435ea6",path:"/AMD/AMD-USB-map.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# AMD USB Map\n\nFor those looking for the AMD USB map guide, it has been moved here:\n\n * USB Map guide\n\nFor a more user-friendly guide, see Aleksander's post: Why you need to care about USB mapping",normalizedContent:"# amd usb map\n\nfor those looking for the amd usb map guide, it has been moved here:\n\n * usb map guide\n\nfor a more user-friendly guide, see aleksander's post: why you need to care about usb mapping",charsets:{}},{title:"Bulldozer(15h) and Jaguar(16h)",frontmatter:{},regularPath:"/AMD/fx.html",relativePath:"AMD/fx.md",key:"v-0598bab2",path:"/AMD/fx.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:231},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1636},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1647},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2575},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:1217},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3020},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3157},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4181},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1647},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2575},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:1210},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1647},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:6862},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8428},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8629},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:1217},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12621},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13771},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3020},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14222},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15075},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17417},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17486},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17604},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3505},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1647},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2575},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:10774},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23609},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3466},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20525},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12149},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27159},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27401},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27611},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:27996},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25359},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29367},{level:2,title:"AMD BIOS Settings",slug:"amd-bios-settings",normalizedTitle:"amd bios settings",charIndex:29683},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10234},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3534}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up AMD BIOS Settings Disable Enable",content:"# Bulldozer(15h) and Jaguar(16h)\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.13, High Sierra\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n * AMD Kernel Patches\n   * Needed for booting macOS on AMD hardware(save these for later, we'll go over how to use them below)\n   * Supporting AMD Family 15h, 16h, 17h and 19h\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\nKERNEL   KERNEL PATCHES\n         \n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons and to disable CPU power management on unsupported CPUs (such as AMD CPUs)\n\nQUIRK                  ENABLED\nDummyPowerManagement   YES\n\nMore in-depth Info\n * Cpuid1Mask: Leave this blank\n   * Mask for fake CPUID\n * Cpuid1Data: Leave this blank\n   * Fake CPUID entry\n * DummyPowerManagement: YES\n   * New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management.\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nThis is where the AMD kernel patching magic happens. Please do note that if coming from Clover, KernelToPatch and MatchOS from Clover becomes Kernel and MinKernel/ MaxKernel in OpenCore. The latest AMD kernel patches can always be found on the AMD Vanilla GitHub Repository.\n\nKernel patches:\n\n * Bulldozer/Jaguar (15h/16h) (10.13 - 12.x)\n\nTo merge:\n\n * Open both files,\n * Delete the Kernel -> Patch section from config.plist\n * Copy the Kernel -> Patch section from patches.plist\n * Paste into where old patches were in config.plist\n\n\n\nYou will also need to modify three patches, all named algrey - Force cpuid_cores_per_package. You only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n2 Core       02\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nProvideCurrentCpuInfo     YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmExtraMsrs: NO\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk in tandem with PlatformInfo -> UpdateSMBIOSMode -> Custom will disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk.\n * DisableIoMapper: NO\n   * AMD doesn't have DMAR or VT-D support so irrelevant\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * ProvideCurrentCpuInfo: YES\n   * Provides the kernel with CPU frequency values for AMD.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues:\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64 and gIOPCITunnelledKey. This is an\n              alternative to having Above 4G Decoding enabled in your\n              BIOS. Do not use this unless you don't have it in your BIOS.\n              Required for when getting stuck on [PCI configuration begin]\n              as there are IRQ conflicts relating to your PCI lanes.\n              Source\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this example, we'll choose the MacPro7,1 SMBIOS but some SMBIOS play with certain GPUs better than others:\n\n * MacPro7,1: AMD Polaris and newer\n   * Note that MacPro7,1 is exclusive to macOS 10.15, Catalina and newer\n * iMacPro1,1: NVIDIA Maxwell and Pascal or AMD Polaris and newer\n   * Use if you need High Sierra or Mojave, otherwise use MacPro7,1\n * iMac14,2: NVIDIA Maxwell and Pascal\n   * Use if you get black screens on iMacPro1,1 after installing Web Drivers with an NVIDIA GPU\n * MacPro6,1: AMD GCN GPUs (supported HD and R5/R7/R9 series)\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro7,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro7,1\nSerial:       F5KZV0JVP7QM\nBoard Serial: F5K9518024NK3F7JC\nSmUUID:       535B897C-55F7-4D65-A8F4-40F4B96ED394\nApple ROM:    001D4F0D5E22\n\n\nThe order is Product | Serial | Board Serial (MLB)\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nThe Apple ROM part gets copied to Generic -> ROM.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * AMD OS X Discord\n * r/Hackintosh Subreddit\n\n\n# AMD BIOS Settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * IOMMU\n\n\n# Enable\n\n * Above 4G Decoding (This must be on, if you can't find the option then add npci=0x3000 to boot-args. Do not have both this option and npci enabled at the same time.)\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# bulldozer(15h) and jaguar(16h)\n\nsupport                 version\ninitial macos support   macos 10.13, high sierra\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n * amd kernel patches\n   * needed for booting macos on amd hardware(save these for later, we'll go over how to use them below)\n   * supporting amd family 15h, 16h, 17h and 19h\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nrequired ssdts   description\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\nkernel   kernel patches\n         \n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus like pentiums and celerons and to disable cpu power management on unsupported cpus (such as amd cpus)\n\nquirk                  enabled\ndummypowermanagement   yes\n\nmore in-depth info\n * cpuid1mask: leave this blank\n   * mask for fake cpuid\n * cpuid1data: leave this blank\n   * fake cpuid entry\n * dummypowermanagement: yes\n   * new alternative to nullcpupowermanagement, required for all amd cpu based systems as there's no native power management.\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\nthis is where the amd kernel patching magic happens. please do note that if coming from clover, kerneltopatch and matchos from clover becomes kernel and minkernel/ maxkernel in opencore. the latest amd kernel patches can always be found on the amd vanilla github repository.\n\nkernel patches:\n\n * bulldozer/jaguar (15h/16h) (10.13 - 12.x)\n\nto merge:\n\n * open both files,\n * delete the kernel -> patch section from config.plist\n * copy the kernel -> patch section from patches.plist\n * paste into where old patches were in config.plist\n\n\n\nyou will also need to modify three patches, all named algrey - force cpuid_cores_per_package. you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n2 core       02\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nprovidecurrentcpuinfo     yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmextramsrs: no\n   * disables multiple msr access needed for unsupported cpus like pentiums and certain xeons\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk in tandem with platforminfo -> updatesmbiosmode -> custom will disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk.\n * disableiomapper: no\n   * amd doesn't have dmar or vt-d support so irrelevant\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * providecurrentcpuinfo: yes\n   * provides the kernel with cpu frequency values for amd.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues:\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64 and giopcitunnelledkey. this is an\n              alternative to having above 4g decoding enabled in your\n              bios. do not use this unless you don't have it in your bios.\n              required for when getting stuck on [pci configuration begin]\n              as there are irq conflicts relating to your pci lanes.\n              source\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this example, we'll choose the macpro7,1 smbios but some smbios play with certain gpus better than others:\n\n * macpro7,1: amd polaris and newer\n   * note that macpro7,1 is exclusive to macos 10.15, catalina and newer\n * imacpro1,1: nvidia maxwell and pascal or amd polaris and newer\n   * use if you need high sierra or mojave, otherwise use macpro7,1\n * imac14,2: nvidia maxwell and pascal\n   * use if you get black screens on imacpro1,1 after installing web drivers with an nvidia gpu\n * macpro6,1: amd gcn gpus (supported hd and r5/r7/r9 series)\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro7,1 smbios info                 #\n#######################################################\n\ntype:         macpro7,1\nserial:       f5kzv0jvp7qm\nboard serial: f5k9518024nk3f7jc\nsmuuid:       535b897c-55f7-4d65-a8f4-40f4b96ed394\napple rom:    001d4f0d5e22\n\n\nthe order is product | serial | board serial (mlb)\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nthe apple rom part gets copied to generic -> rom.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * amd os x discord\n * r/hackintosh subreddit\n\n\n# amd bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * iommu\n\n\n# enable\n\n * above 4g decoding (this must be on, if you can't find the option then add npci=0x3000 to boot-args. do not have both this option and npci enabled at the same time.)\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{cjk:!0}},{title:"Ryzen and Threadripper(17h and 19h)",frontmatter:{},regularPath:"/AMD/zen.html",relativePath:"AMD/zen.md",key:"v-09f0f2cd",path:"/AMD/zen.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:124},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1529},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1540},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2675},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:1110},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3012},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3120},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3257},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3012},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6253},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1540},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2675},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:1103},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1540},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8934},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10500},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:10701},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:1110},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3012},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14695},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15845},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3120},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16296},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17149},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19491},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19560},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19678},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4464},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1540},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2675},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:12848},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:25831},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4425},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:22831},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:14223},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:29105},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:29347},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:29557},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29942},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3012},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:27305},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:31313},{level:2,title:"AMD BIOS Settings",slug:"amd-bios-settings",normalizedTitle:"amd bios settings",charIndex:31629},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:12308},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3813}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up AMD BIOS Settings Disable Enable",content:"# Ryzen and Threadripper(17h and 19h)\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.13, High Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n * AMD Kernel Patches\n   * Needed for booting macOS on AMD hardware(save these for later, we'll go over how to use them below)\n   * Supporting AMD Family 15h, 16h, 17h and 19h\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-CPUR        Fixes CPU definitions with B550 and A520 motherboards, do\n                 not use if you don't have an AMD B550 or A520 system. You\n                 can find a prebuilt here: SSDT-CPUR.aml\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         NO        If you have a TRx40 system, enable this and follow the\n                                   instructions here:\n                                   https://dortania.github.io/OpenCore-Install-Guide/extras/kaslr-fix.html\nEnableWriteUnprotector   NO        \nRebuildAppleMemoryMap    YES       \nResizeAppleGpuBars       -1        If your firmware supports increasing GPU Bar sizes (ie\n                                   Resizable BAR Support), set this to 0\nSetupVirtualMap          YES       - Note X570, B550, A520 and TRx40 boards might need this\n                                   disabled\n                                   - X470 and B450 with late 2020 BIOS updates might also\n                                   require this disabled\nSyncRuntimePermissions   YES       \n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * ResizeAppleGpuBars: -1\n   * Will reduce the size of GPU PCI Bars if set to 0 when booting macOS, set to -1 to disable\n   * Setting other PCI Bar values is possible with this quirk, though can cause instabilities\n   * This quirk being set to zero is only necessary if Resizable BAR Support is enabled in your firmware.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses\n   * B550, A520 and TRx40 boards should disable this quirk\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\nKERNEL   KERNEL PATCHES\n         \n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons and to disable CPU power management on unsupported CPUs (such as AMD CPUs)\n\nQUIRK                  ENABLED\nDummyPowerManagement   YES\n\nMore in-depth Info\n * Cpuid1Mask: Leave this blank\n   * Mask for fake CPUID\n * Cpuid1Data: Leave this blank\n   * Fake CPUID entry\n * DummyPowerManagement: YES\n   * New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management.\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nThis is where the AMD kernel patching magic happens. Please do note that if coming from Clover, KernelToPatch and MatchOS from Clover becomes Kernel and MinKernel/ MaxKernel in OpenCore. The latest AMD kernel patches can always be found on the AMD Vanilla GitHub Repository.\n\nKernel patches:\n\n * Ryzen/Threadripper (17h/19h) (10.13 - 12.x)\n\nTo merge:\n\n * Open both files,\n * Delete the Kernel -> Patch section from config.plist\n * Copy the Kernel -> Patch section from patches.plist\n * Paste into where old patches were in config.plist\n\n\n\nYou will also need to modify three patches, all named algrey - Force cpuid_cores_per_package. You only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n2 Core       02\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nProvideCurrentCpuInfo     YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmExtraMsrs: NO\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk in tandem with PlatformInfo -> UpdateSMBIOSMode -> Custom will disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk.\n * DisableIoMapper: NO\n   * AMD doesn't have DMAR or VT-D support so irrelevant\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * ProvideCurrentCpuInfo: YES\n   * Provides the kernel with CPU frequency values for AMD.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues:\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64 and gIOPCITunnelledKey. This is an\n              alternative to having Above 4G Decoding enabled in your\n              BIOS. Do not use this unless you don't have it in your BIOS.\n              Required for when getting stuck on [PCI configuration begin]\n              as there are IRQ conflicts relating to your PCI lanes.\n              Source\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP).\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this example, we'll choose the MacPro7,1 SMBIOS but some SMBIOS play with certain GPUs better than others:\n\n * MacPro7,1: AMD Polaris and newer\n   * Note that MacPro7,1 is exclusive to macOS 10.15, Catalina and newer\n * iMacPro1,1: NVIDIA Maxwell and Pascal or AMD Polaris and newer\n   * Use if you need High Sierra or Mojave, otherwise use MacPro7,1\n * iMac14,2: NVIDIA Maxwell and Pascal\n   * Use if you get black screens on iMacPro1,1 after installing Web Drivers with an NVIDIA GPU\n * MacPro6,1: AMD GCN GPUs (supported HD and R5/R7/R9 series)\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro7,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro7,1\nSerial:       F5KZV0JVP7QM\nBoard Serial: F5K9518024NK3F7JC\nSmUUID:       535B897C-55F7-4D65-A8F4-40F4B96ED394\nApple ROM:    001D4F0D5E22\n\n\nThe order is Product | Serial | Board Serial (MLB)\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nThe Apple ROM part gets copied to Generic -> ROM.\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * AMD OS X Discord\n * r/Hackintosh Subreddit\n\n\n# AMD BIOS Settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * IOMMU\n\nSpecial note for 3990X users: macOS currently does not support more than 64 threads in the kernel, and so will kernel panic if it sees more. The 3990X CPU has 128 threads total and so requires half of that disabled. We recommend disabling hyper threading in the BIOS for these situations.\n\n\n# Enable\n\n * Above 4G Decoding (This must be on, if you can't find the option then add npci=0x3000 to boot-args. Do not have both this option and npci enabled at the same time.)\n   * If you are on a Gigabyte/Aorus or an AsRock motherboard, enabling this option may break certain drivers(ie. Ethernet) and/or boot failures on other OSes, if it does happen then disable this option and opt for npci instead\n   * 2020+ BIOS Notes: When enabling Above4G, Resizable BAR Support may become an available on some X570 and newer motherboards. Please ensure that Booter -> Quirks -> ResizeAppleGpuBars is set to 0 if this is enabled.\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# ryzen and threadripper(17h and 19h)\n\nsupport                 version\ninitial macos support   macos 10.13, high sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n * amd kernel patches\n   * needed for booting macos on amd hardware(save these for later, we'll go over how to use them below)\n   * supporting amd family 15h, 16h, 17h and 19h\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nrequired ssdts   description\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-cpur        fixes cpu definitions with b550 and a520 motherboards, do\n                 not use if you don't have an amd b550 or a520 system. you\n                 can find a prebuilt here: ssdt-cpur.aml\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         no        if you have a trx40 system, enable this and follow the\n                                   instructions here:\n                                   https://dortania.github.io/opencore-install-guide/extras/kaslr-fix.html\nenablewriteunprotector   no        \nrebuildapplememorymap    yes       \nresizeapplegpubars       -1        if your firmware supports increasing gpu bar sizes (ie\n                                   resizable bar support), set this to 0\nsetupvirtualmap          yes       - note x570, b550, a520 and trx40 boards might need this\n                                   disabled\n                                   - x470 and b450 with late 2020 bios updates might also\n                                   require this disabled\nsyncruntimepermissions   yes       \n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * resizeapplegpubars: -1\n   * will reduce the size of gpu pci bars if set to 0 when booting macos, set to -1 to disable\n   * setting other pci bar values is possible with this quirk, though can cause instabilities\n   * this quirk being set to zero is only necessary if resizable bar support is enabled in your firmware.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses\n   * b550, a520 and trx40 boards should disable this quirk\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\nkernel   kernel patches\n         \n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus like pentiums and celerons and to disable cpu power management on unsupported cpus (such as amd cpus)\n\nquirk                  enabled\ndummypowermanagement   yes\n\nmore in-depth info\n * cpuid1mask: leave this blank\n   * mask for fake cpuid\n * cpuid1data: leave this blank\n   * fake cpuid entry\n * dummypowermanagement: yes\n   * new alternative to nullcpupowermanagement, required for all amd cpu based systems as there's no native power management.\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\nthis is where the amd kernel patching magic happens. please do note that if coming from clover, kerneltopatch and matchos from clover becomes kernel and minkernel/ maxkernel in opencore. the latest amd kernel patches can always be found on the amd vanilla github repository.\n\nkernel patches:\n\n * ryzen/threadripper (17h/19h) (10.13 - 12.x)\n\nto merge:\n\n * open both files,\n * delete the kernel -> patch section from config.plist\n * copy the kernel -> patch section from patches.plist\n * paste into where old patches were in config.plist\n\n\n\nyou will also need to modify three patches, all named algrey - force cpuid_cores_per_package. you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n2 core       02\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nprovidecurrentcpuinfo     yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmextramsrs: no\n   * disables multiple msr access needed for unsupported cpus like pentiums and certain xeons\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk in tandem with platforminfo -> updatesmbiosmode -> custom will disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk.\n * disableiomapper: no\n   * amd doesn't have dmar or vt-d support so irrelevant\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * providecurrentcpuinfo: yes\n   * provides the kernel with cpu frequency values for amd.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues:\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64 and giopcitunnelledkey. this is an\n              alternative to having above 4g decoding enabled in your\n              bios. do not use this unless you don't have it in your bios.\n              required for when getting stuck on [pci configuration begin]\n              as there are irq conflicts relating to your pci lanes.\n              source\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip).\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this example, we'll choose the macpro7,1 smbios but some smbios play with certain gpus better than others:\n\n * macpro7,1: amd polaris and newer\n   * note that macpro7,1 is exclusive to macos 10.15, catalina and newer\n * imacpro1,1: nvidia maxwell and pascal or amd polaris and newer\n   * use if you need high sierra or mojave, otherwise use macpro7,1\n * imac14,2: nvidia maxwell and pascal\n   * use if you get black screens on imacpro1,1 after installing web drivers with an nvidia gpu\n * macpro6,1: amd gcn gpus (supported hd and r5/r7/r9 series)\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro7,1 smbios info                 #\n#######################################################\n\ntype:         macpro7,1\nserial:       f5kzv0jvp7qm\nboard serial: f5k9518024nk3f7jc\nsmuuid:       535b897c-55f7-4d65-a8f4-40f4b96ed394\napple rom:    001d4f0d5e22\n\n\nthe order is product | serial | board serial (mlb)\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nthe apple rom part gets copied to generic -> rom.\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * amd os x discord\n * r/hackintosh subreddit\n\n\n# amd bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * iommu\n\nspecial note for 3990x users: macos currently does not support more than 64 threads in the kernel, and so will kernel panic if it sees more. the 3990x cpu has 128 threads total and so requires half of that disabled. we recommend disabling hyper threading in the bios for these situations.\n\n\n# enable\n\n * above 4g decoding (this must be on, if you can't find the option then add npci=0x3000 to boot-args. do not have both this option and npci enabled at the same time.)\n   * if you are on a gigabyte/aorus or an asrock motherboard, enabling this option may break certain drivers(ie. ethernet) and/or boot failures on other oses, if it does happen then disable this option and opt for npci instead\n   * 2020+ bios notes: when enabling above4g, resizable bar support may become an available on some x570 and newer motherboards. please ensure that booter -> quirks -> resizeapplegpubars is set to 0 if this is enabled.\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{cjk:!0}},{title:"支持指南",frontmatter:{},regularPath:"/CONTRIBUTING.html",relativePath:"CONTRIBUTING.md",key:"v-17876ab6",path:"/CONTRIBUTING.html",headers:[{level:2,title:"通过issue进行贡献",slug:"通过issue进行贡献",normalizedTitle:"通过issue进行贡献",charIndex:100},{level:2,title:"通过pr进行贡献",slug:"通过pr进行贡献",normalizedTitle:"通过pr进行贡献",charIndex:115},{level:3,title:"如何贡献",slug:"如何贡献",normalizedTitle:"如何贡献",charIndex:129},{level:3,title:"提示",slug:"提示",normalizedTitle:"提示",charIndex:139},{level:2,title:"通过翻译进行贡献",slug:"通过翻译进行贡献",normalizedTitle:"通过翻译进行贡献",charIndex:145}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"通过issue进行贡献 通过pr进行贡献 如何贡献 提示 通过翻译进行贡献",content:"# 支持指南\n\n注意: 这是一个社区运行指南，没有被Acidanthera官方认可。请不要用关于本指南的问题来烦扰Acidanthera。\n\n想帮助支持指南吗?有一些方法你可以提供帮助!\n\n\n\n * 通过issue进行贡献\n * 通过pr进行贡献\n   * 如何贡献\n   * 提示\n * 通过翻译进行贡献\n\n\n\n注意:对于那些想要在经济上做出贡献的人，我们非常感谢，但我们是一个非营利组织。我们这样做是为了教学，不是为了赚钱。如果你有剩余的钱，我们强烈建议你捐给慈善机构。\n\n\n# 通过issue进行贡献\n\n通过Issues进行贡献非常简单，但也有一些规则:\n\n * 将issues选项卡保留为指南问题，禁止个人hackintosh问题。这里不是讨论安装问题的地方。\n * 如果为了更好地说明错误，请注明它在哪个页。我不喜欢在这些问题的地方进行寻宝游戏。\n\n你可以在这里找到bug追踪器:bug追踪器\n\n\n# 通过pr进行贡献\n\n通过PRs贡献时的一些指导原则:\n\n * 请动动脑筋。\n * 校对你提交的内容。\n * 如果我们觉得它不合适或包含不准确的信息，Pull请求可能会被拒绝。我们通常会告诉你为什么它被拒绝了，或者要求修改。\n   * 我们也将感谢任何较大的提交来源，使我们更容易验证您提供的信息是有效的\n * 图像必须存放在本地的仓库中 ../images/ 文件夹下\n * 你的PR必须通过markdown lint程序检查并修复所有问题。\n * 在一般情况下,尽量避免使用“non-Acidanthera”工具。一般来说，我们希望避免使用第三方工具——如果不可能的话，那么你可以链接它。\n   * 明确禁止使用的工具:\n     * UniBeast, MultiBeast和KextBeast\n       * 更多信息可以在这里找到: Tonymacx86-stance\n     * TransMac\n       * 知道创建无用的USB驱动器\n     * Niresh安装程序\n       * 我们想避免盗版的指南\n\n\n# 如何贡献\n\n测试提交并确保其格式正确的最好方法是下载Node.js。然后运行npm install来安装依赖。当你运行npm run dev时，它将设置一个本地web服务器，你可以连接它来查看你所做的更改。npm test也会将所有关于格式和拼写检查的错误抛给你。如果你想让markdownlint自动尝试修复代码，请运行npm run fix-lint。\n\n简单的步骤:\n\n * Fork 此仓库（英文原始指南）\n * 安装所需工具:\n   * Node.js\n * 做出你的更改。\n * 构建网站:\n   * npm install (安装所有需要的插件)\n   * npm run dev (预览站点)\n     * 可以在http://localhost:8080找到\n * 检查lint和拼写检查:\n   * npm test\n   * npm run lint 和 npm run spellcheck (单独运行测试)\n   * npm run fix-lint (修复任何潜在的问题)\n   * *对于默认拼写检查不支持的单词，请将它们添加到dictionary.txt 并运行 npm run sort-dict\n\n\n# 提示\n\n以下是一些让贡献变得更容易的工具:\n\n * Visual Studio Code\n * Typora 用于实时markdown渲染。\n * TextMate 方便和强大的大规模查找/替换。\n * GitHub Desktop 提供更友好的用户界面。\n\n\n# 通过翻译进行贡献\n\n虽然Dortania的指南主要以英语为基础，但我们知道世界上还有很多其他语言，并不是每个人都能流利地说英语。如果你想帮助把我们的指南翻译成不同的语言，我们非常乐意支持你。\n\n需要注意的主要事项:\n\n * 翻译必须是一个专用的分支，不会被合并到Dortania的指南中\n * Forks 必须表明它们是Dortania的翻译，不是官方的\n * Forks 必须遵守我们的[License](License .md)\n\n如果满足上述条件，您就可以毫无疑问地托管您的翻译!Dortania的网站是用VuePress使用GitHub Actions建立的，最后托管在GitHub Pages上，所以托管你自己的翻译是没有成本的。\n\n如果您对翻译或托管有任何问题或担忧，请随时联系我们的bug追踪者。\n\n目前已知的翻译:\n\n * InyextcionES(西班牙语)\n * macOS86(Italian, 不再维护)\n * Technopat(土耳其)\n * ThrRip(中文)\n * Shijuro(俄罗斯)\n * viOpenCore(越南)\n\n请注意，这些翻译受到作者偏好、翻译更改和人为错误的影响。阅读时请记住这一点，因为它们不再是Dortania的官方指南。",normalizedContent:"# 支持指南\n\n注意: 这是一个社区运行指南，没有被acidanthera官方认可。请不要用关于本指南的问题来烦扰acidanthera。\n\n想帮助支持指南吗?有一些方法你可以提供帮助!\n\n\n\n * 通过issue进行贡献\n * 通过pr进行贡献\n   * 如何贡献\n   * 提示\n * 通过翻译进行贡献\n\n\n\n注意:对于那些想要在经济上做出贡献的人，我们非常感谢，但我们是一个非营利组织。我们这样做是为了教学，不是为了赚钱。如果你有剩余的钱，我们强烈建议你捐给慈善机构。\n\n\n# 通过issue进行贡献\n\n通过issues进行贡献非常简单，但也有一些规则:\n\n * 将issues选项卡保留为指南问题，禁止个人hackintosh问题。这里不是讨论安装问题的地方。\n * 如果为了更好地说明错误，请注明它在哪个页。我不喜欢在这些问题的地方进行寻宝游戏。\n\n你可以在这里找到bug追踪器:bug追踪器\n\n\n# 通过pr进行贡献\n\n通过prs贡献时的一些指导原则:\n\n * 请动动脑筋。\n * 校对你提交的内容。\n * 如果我们觉得它不合适或包含不准确的信息，pull请求可能会被拒绝。我们通常会告诉你为什么它被拒绝了，或者要求修改。\n   * 我们也将感谢任何较大的提交来源，使我们更容易验证您提供的信息是有效的\n * 图像必须存放在本地的仓库中 ../images/ 文件夹下\n * 你的pr必须通过markdown lint程序检查并修复所有问题。\n * 在一般情况下,尽量避免使用“non-acidanthera”工具。一般来说，我们希望避免使用第三方工具——如果不可能的话，那么你可以链接它。\n   * 明确禁止使用的工具:\n     * unibeast, multibeast和kextbeast\n       * 更多信息可以在这里找到: tonymacx86-stance\n     * transmac\n       * 知道创建无用的usb驱动器\n     * niresh安装程序\n       * 我们想避免盗版的指南\n\n\n# 如何贡献\n\n测试提交并确保其格式正确的最好方法是下载node.js。然后运行npm install来安装依赖。当你运行npm run dev时，它将设置一个本地web服务器，你可以连接它来查看你所做的更改。npm test也会将所有关于格式和拼写检查的错误抛给你。如果你想让markdownlint自动尝试修复代码，请运行npm run fix-lint。\n\n简单的步骤:\n\n * fork 此仓库（英文原始指南）\n * 安装所需工具:\n   * node.js\n * 做出你的更改。\n * 构建网站:\n   * npm install (安装所有需要的插件)\n   * npm run dev (预览站点)\n     * 可以在http://localhost:8080找到\n * 检查lint和拼写检查:\n   * npm test\n   * npm run lint 和 npm run spellcheck (单独运行测试)\n   * npm run fix-lint (修复任何潜在的问题)\n   * *对于默认拼写检查不支持的单词，请将它们添加到dictionary.txt 并运行 npm run sort-dict\n\n\n# 提示\n\n以下是一些让贡献变得更容易的工具:\n\n * visual studio code\n * typora 用于实时markdown渲染。\n * textmate 方便和强大的大规模查找/替换。\n * github desktop 提供更友好的用户界面。\n\n\n# 通过翻译进行贡献\n\n虽然dortania的指南主要以英语为基础，但我们知道世界上还有很多其他语言，并不是每个人都能流利地说英语。如果你想帮助把我们的指南翻译成不同的语言，我们非常乐意支持你。\n\n需要注意的主要事项:\n\n * 翻译必须是一个专用的分支，不会被合并到dortania的指南中\n * forks 必须表明它们是dortania的翻译，不是官方的\n * forks 必须遵守我们的[license](license .md)\n\n如果满足上述条件，您就可以毫无疑问地托管您的翻译!dortania的网站是用vuepress使用github actions建立的，最后托管在github pages上，所以托管你自己的翻译是没有成本的。\n\n如果您对翻译或托管有任何问题或担忧，请随时联系我们的bug追踪者。\n\n目前已知的翻译:\n\n * inyextciones(西班牙语)\n * macos86(italian, 不再维护)\n * technopat(土耳其)\n * thrrip(中文)\n * shijuro(俄罗斯)\n * viopencore(越南)\n\n请注意，这些翻译受到作者偏好、翻译更改和人为错误的影响。阅读时请记住这一点，因为它们不再是dortania的官方指南。",charsets:{cjk:!0}},{title:"Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)",frontmatter:{},regularPath:"/LICENSE.html",relativePath:"LICENSE.md",key:"v-534eac26",path:"/LICENSE.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\n\nNote: This is a human-readable version, to find the full license see here: Legal Code\n\nYou are free to:\n\n * Share — copy and redistribute the material in any medium or format\n * Adapt — remix, transform, and build upon the material\n\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\n\nUnder the following terms:\n\n * Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n * NonCommercial — You may not use the material for commercial purposes.\n * ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\n * No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nNotices:\n\n * You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\n * No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.",normalizedContent:"# attribution-noncommercial-sharealike 4.0 international (cc by-nc-sa 4.0)\n\nnote: this is a human-readable version, to find the full license see here: legal code\n\nyou are free to:\n\n * share — copy and redistribute the material in any medium or format\n * adapt — remix, transform, and build upon the material\n\nthe licensor cannot revoke these freedoms as long as you follow the license terms.\n\nunder the following terms:\n\n * attribution — you must give appropriate credit, provide a link to the license, and indicate if changes were made. you may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n * noncommercial — you may not use the material for commercial purposes.\n * sharealike — if you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\n * no additional restrictions — you may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nnotices:\n\n * you do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\n * no warranties are given. the license may not give you all of the permissions necessary for your intended use. for example, other rights such as publicity, privacy, or moral rights may limit how you use the material.",charsets:{}},{title:"Home",frontmatter:{home:!0,heroImage:"/dortania-logo-clear.png",heroText:"OpenCore的安装指南",actionText:"准备开始→",actionLink:"prerequisites.md",meta:[{name:"描述",content:"当前支持的版本 0.8.8"}]},regularPath:"/",relativePath:"README.md",key:"v-63ef920e",path:"/",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# 什么是OpenCore以及谁适用本指南\n\nOpenCore就是我们常说的“引导加载程序”——它是我们用来使用macOS系统进行准备的复杂软件——特别是通过为macOS注入新数据，如SMBIOS、ACPI表和kext。 本工具和别的像Clover之类的其他工具的不同之处在于它在设计时就考虑到了安全和高效率，使我们能够使用在MAC实体机上的许多安全功能，如 系统完整性保护 和 文件库.更深入的了解可以在这里找到：为什么OpenCore在Clover和其他软件之上\n\n本指南主要关注以下两点:\n\n * 在基于X86架构的PC上安装macOS\n * 教会你如何进行你的破解\n\n因此，您需要阅读、学习甚至使用Google。OpenCore并不是简单的傻瓜式一键安装设置。\n\n请牢记OpenCore目前还在测试阶段，它还是个新项目，虽然已经相当稳定，而且可以说在几乎所有方面都比clover更加稳定，但OpenCore仍然经常更新，所以配置模块会经常变更（也就是新布局取代旧的）。\n\n最后，那些有问题的人可以访问 r/Hackintosh subreddit 和 r/Hackintosh Discord 寻求更多帮助。\n\n中文翻译由宿命提供，由星座三太子校对，此翻译受限于作者及贡献者的个人喜好及个人理解，并非是dortania官方翻译。\n\n黑果交流QQ群：796661960",normalizedContent:"# 什么是opencore以及谁适用本指南\n\nopencore就是我们常说的“引导加载程序”——它是我们用来使用macos系统进行准备的复杂软件——特别是通过为macos注入新数据，如smbios、acpi表和kext。 本工具和别的像clover之类的其他工具的不同之处在于它在设计时就考虑到了安全和高效率，使我们能够使用在mac实体机上的许多安全功能，如 系统完整性保护 和 文件库.更深入的了解可以在这里找到：为什么opencore在clover和其他软件之上\n\n本指南主要关注以下两点:\n\n * 在基于x86架构的pc上安装macos\n * 教会你如何进行你的破解\n\n因此，您需要阅读、学习甚至使用google。opencore并不是简单的傻瓜式一键安装设置。\n\n请牢记opencore目前还在测试阶段，它还是个新项目，虽然已经相当稳定，而且可以说在几乎所有方面都比clover更加稳定，但opencore仍然经常更新，所以配置模块会经常变更（也就是新布局取代旧的）。\n\n最后，那些有问题的人可以访问 r/hackintosh subreddit 和 r/hackintosh discord 寻求更多帮助。\n\n中文翻译由宿命提供，由星座三太子校对，此翻译受限于作者及贡献者的个人喜好及个人理解，并非是dortania官方翻译。\n\n黑果交流qq群：796661960",charsets:{cjk:!0}},{title:"Clover Boot Arg Conversion",frontmatter:{search:!1},regularPath:"/clover-conversion/Clover-boot-arg.html",relativePath:"clover-conversion/Clover-boot-arg.md",key:"v-2817348d",path:"/clover-conversion/Clover-boot-arg.html",headers:[{level:2,title:"macOS flags",slug:"macos-flags",normalizedTitle:"macos flags",charIndex:442},{level:2,title:"Kexts flags",slug:"kexts-flags",normalizedTitle:"kexts flags",charIndex:1085},{level:2,title:"Chameleon flags",slug:"chameleon-flags",normalizedTitle:"chameleon flags",charIndex:1266}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"macOS flags Kexts flags Chameleon flags",content:"# Clover Boot Arg Conversion\n\nThis section is mainly used for explaining what boot-args are no longer relevant, it's quite common for users to be still carrying legacy args which have little to no real affect in newer versions of macOS or have little use in OpenCore\n\nThis list is based of memory and an annoyed self with seeing these flags keep popping up, got other flags to add then I recommend opening an issue. All help is welcomed!\n\n\n# macOS flags\n\ndart=0:\n\n * Used for disabling VT-D support\n * With Clover, when this flag was present it would also drop your DMAR table from ACPI\n * This flag also requires SIP to be disabled in macOS 10.15 Catalina, so with OpenCore this flag is no longer recommended and instead replaced with Kernel -> Quirks -> DisableIoMapper\n\nkext-dev-mode=1:\n\n * Used for allowing unsigned kexts to be loaded, flag only present in Yosemite\n * CSR_ALLOW_UNSIGNED_KEXTS bit to be flipped in csr-active-config NVRAM variable for newer releases\n * This is not needed on OpenCore due to the kernel injection method used: Attaching to the prelinked kernel\n\n\n# Kexts flags\n\nnvda_drv=1: Used for enabling NVIDIA's Web Drivers, no longer works in macOS 10.12\n\n * This flag was actually turned into nvda_drv_vrl=1 for Sierra and High Sierra\n\n\n# Chameleon flags\n\nFor some reason people kept using these flags into Clover which had no effect, and so we really need to stop the train on this one with OpenCore\n\nPCIRootUID=Value\n\n * This sets the _UID of Device (PCI0) to whatever the value is, supposedly needed on legacy AMD GPUs but this is debatable. Ironically Clover still uses this flag but most users know it from Chameleon. Source\n\nGraphicsEnabler=Yes/No\n\n * InjectAMD/NVIDIA was the Clover equivalent but no feature parity in OpenCore besides running WhateverGreen\n\nIGPEnabler=Yes/No\n\n * Same idea as GraphicsEnabler, Clover equivalent is InjectIntel so feature parity would be WhateverGreen's Framebuffer patching\n\n-f\n\n * Enables cacheless booting on Chameleon and Clover, OpenCore has a slightly different option under Kernel -> Scheme -> KernelCache and set the entry to Cacheless\n   * Currently cacheless booting is only supported on 64-bit kernels from OS X 10.6 to 10.9",normalizedContent:"# clover boot arg conversion\n\nthis section is mainly used for explaining what boot-args are no longer relevant, it's quite common for users to be still carrying legacy args which have little to no real affect in newer versions of macos or have little use in opencore\n\nthis list is based of memory and an annoyed self with seeing these flags keep popping up, got other flags to add then i recommend opening an issue. all help is welcomed!\n\n\n# macos flags\n\ndart=0:\n\n * used for disabling vt-d support\n * with clover, when this flag was present it would also drop your dmar table from acpi\n * this flag also requires sip to be disabled in macos 10.15 catalina, so with opencore this flag is no longer recommended and instead replaced with kernel -> quirks -> disableiomapper\n\nkext-dev-mode=1:\n\n * used for allowing unsigned kexts to be loaded, flag only present in yosemite\n * csr_allow_unsigned_kexts bit to be flipped in csr-active-config nvram variable for newer releases\n * this is not needed on opencore due to the kernel injection method used: attaching to the prelinked kernel\n\n\n# kexts flags\n\nnvda_drv=1: used for enabling nvidia's web drivers, no longer works in macos 10.12\n\n * this flag was actually turned into nvda_drv_vrl=1 for sierra and high sierra\n\n\n# chameleon flags\n\nfor some reason people kept using these flags into clover which had no effect, and so we really need to stop the train on this one with opencore\n\npcirootuid=value\n\n * this sets the _uid of device (pci0) to whatever the value is, supposedly needed on legacy amd gpus but this is debatable. ironically clover still uses this flag but most users know it from chameleon. source\n\ngraphicsenabler=yes/no\n\n * injectamd/nvidia was the clover equivalent but no feature parity in opencore besides running whatevergreen\n\nigpenabler=yes/no\n\n * same idea as graphicsenabler, clover equivalent is injectintel so feature parity would be whatevergreen's framebuffer patching\n\n-f\n\n * enables cacheless booting on chameleon and clover, opencore has a slightly different option under kernel -> scheme -> kernelcache and set the entry to cacheless\n   * currently cacheless booting is only supported on 64-bit kernels from os x 10.6 to 10.9",charsets:{}},{title:"Converting common properties from Clover to OpenCore",frontmatter:{search:!1},regularPath:"/clover-conversion/Clover-config.html",relativePath:"clover-conversion/Clover-config.md",key:"v-05f885ed",path:"/clover-conversion/Clover-config.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# Converting common properties from Clover to OpenCore\n\nSo this little(well not so little as I reread this...) page is for users who are having issues migrating from Clover to OpenCore as some of their legacy quirks are required or the Configuration.pdf isn't well suited for laptop users.\n\n\n# Kexts and Firmware drivers\n\nSee Kexts and Firmware drivers.\n\n\n# Acpi\n\nACPI Renames:\n\nSo with the transition from Clover to OpenCore we should start removing unneeded patches you may have carried along for some time:\n\n * EHCI Patches: Recommended to power off the controller with SSDT-EHCx_OFF. Skylake and newer users do not have an EHCI controller so no need for this.\n   * change EHC1 to EH01\n   * change EHC2 to EH02\n * XHCI Patches: Not needed once an Injector kext is made\n   * change XHCI to XHC\n   * change XHC1 to XHC\n * SATA patches: Purely cosmetic in macOS now\n   * change SAT0 to SATA\n   * change SAT1 to SATA\n * IMEI Patches: Handled by WhateverGreen\n   * change HECI to IMEI\n   * change HEC1 to IMEI\n   * change MEI to IMEI\n   * change IDER to MEID\n * GFX patches: Handled by WhateverGreen\n   * change GFX0 to IGPU\n   * change PEG0 to GFX0\n   * change PEGP to GFX0\n   * change SL01 to PEGP\n * EC Patches: See here on best solution: Getting started with ACPI\n   * change EC0 to EC\n   * change H_EC to EC\n   * change ECDV to EC\n   * change PGEC to EC\n * Audio renames: Handled by AppleALC\n   * change HDAS to HDEF\n   * change CAVS to HDEF\n   * change AZAL to HDEF\n   * change ALZA to HDEF\n   * change B0D3 to HDAU\n * Z390 BIOS RTC bug fix: See here on best solution: Getting started with ACPI(SSDT-AWAC)\n   * change STAS to [Blank]\n   * Fix Z390 BIOS DSDT Device(RTC) bug\n   * Fix 300-series RTC Bug\n * NVMe patches: NVMeFix fixes power management\n   * change PXSX to ANS1\n   * change PXSX to ANS2\n * Airport/WiFi Patches: AirportBrcmFixup\n   * change PXSX to ARPT\n * Other purely cosmetic patches:\n   * change LPC0 to LPCB(use SSDT-SBUS-MCHC for fixing SMBUS support)\n   * change PC00 to PCIO\n   * change FPU to MATH\n   * change TMR to TIMR\n   * change PIC to IPIC\n   * change GBE1 to ETH0\n\nPatches\n\n * TgtBridge patches:\n   \n   * ACPI -> Patch -> ... -> Base\n\n * DisableASPM:\n   \n   * DeviceProperties -> Add -> PciRoot... -> pci-aspm-default | Data | <00>\n\n * HaltEnabler:\n   \n   * ACPI -> Quirks -> FadtEnableReset -> YES\n\nFixes:\n\n * FixAirport:\n   \n   * AirportBrcmFixup\n\n * FixIPIC:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixSBUS:\n   \n   * SSDT-SBUS-MCHC\n\n * FixShutdown:\n   \n   * FixShutdown-USB-SSDT\n   * _PTS to ZPTS Patch\n   * This will not harm Windows or Linux installs as this is just adding missing methods that should've been there to start with. Blame the firmware writers\n\n * FixDisplay:\n   \n   * Manual framebuffer patching, WhateverGreen does most of the work already\n\n * FixHDA:\n   \n   * Handled by AppleALC\n\n * FixHPET:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixSATA:\n   \n   * Kernel -> Quirks -> ExternalDiskIcons -> YES\n\n * FixADP1:\n   \n   * Renames device AC0_ to ADP1, see Rename-SSDT for an example\n   * Also injects Name (_PRW, Package (0x02) {0x1C,0x03}) into the device if not present. Source\n\n * FixRTC:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixTMR:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * AddPNLF:\n   \n   * See SSDT-PNLF\n\n * AddMCHC:\n   \n   * SSDT-SBUS-MCHC\n\n * AddIMEI:\n   \n   * SSDT-SBUS-MCHC\n   * WhateverGreen will also handle fixing IMEI naming\n   * For Sandy Bridge on Z77 or IvyBridge on Z67, the IMEI will need to be faked: SSDT-IMEI\n\n * FakeLPC:\n   \n   * DeviceProperties -> Add -> PciRoot... -> device-id\n   * You'll want to spoof it to a supported LPC controller already in AppleLPC\n\n * FixIntelGfx:\n   \n   * WhateverGreen handles this\n\n * AddHDMI:\n   \n   * WhateverGreen handles this\n\nDropTables:\n\n * ACPI -> Delete\n\nSSDT:\n\n * PluginType:\n   \n   * SSDT-PLUG\n   * See Getting started with ACPI for more details\n\n * Generate P States: ssdtPRGen.sh(For Sandy Bridge and IvyBridge)\n\n * Generate C States: ssdtPRGen.sh(For Sandy Bridge and IvyBridge)\n\n\n# Boot\n\nBoot Argument:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args\n\nNeverHibernate:\n\n * Misc -> Boot -> HibernateMode -> None\n\nDefault Boot Volume:\n\n * Misc -> Security -> AllowSetDefault -> True\n   * Press Ctrl+Enter in the picker to set default device\n * Alternative is Startup Disk in macOS's System Preferences, just like on real Macs\n\n\n# Boot Graphics\n\nDefaultBackgroundColor:\n\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> DefaultBackgroundColor\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n   * To calculate your own, convert an RGB value to HEX\n\nEFILoginHiDPI:\n\n * Clover only flag, for OpenCore UI scaling see UIScale and UEFI -> Output\n\nflagstate:\n\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> flagstate | Data | <>\n   * 0 -> <00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000(dumped from a mac)\n   * NVRAM location needs to be double checked for this one\n\nUIScale:\n\n * UEFI -> Quirks -> UIScale | Integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to HiDPI displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\n\n# CPU\n\nType:\n\n * PlatformInfo -> Generic -> ProcessorType\n * See AppleSmBios.h for all supported values\n\nHWPEnable: Better alternative is to properly manage MSR 0x770 with HWPEnable\n\nQEMU: Proper VM/KVM support is implemented in OpenCore\n\nTurboDisable: Better alternative is to control your frequencies with CPUFriend or ssdtPRGen\n\n\n# Devices\n\nUSB:\n\n * FixOwnership: UEFI -> Quirk -> ReleaseUsbOwnership\n   * You should also enable XHCI Hand-off in your BIOS\n * ClockID: DeviceProperties -> Add -> PciRoot... -> AAPL,clock-id\n * HighCurrent: DeviceProperties -> Add -> PciRoot... -> AAPL, HighCurrent\n   * Irrelevant for OS X 10.11 and newer\n   * Newer variant is either PowerProperties defined in IOUSBHostFamily.kext -> AppleUSBHostPlatformProperties or added with a USBX SSDT for Skylake SMBIOS and newer\n\nAudio:\n\nFor the following, you will need to know your PciRoot for your audio controller and its name(commonly known as HDEF but also HDAS, HDAU and such), this can be found with gfxutil:\n\npath/to/gfxutil -f HDEF\n\n\n * Inject: DeviceProperties -> Add -> PciRoot... -> layout-id\n * AFGLowPowerState: DeviceProperties -> Add -> PciRoot... -> AFGLowPowerState -> <01000000>\n * ResetHDA: UEFI -> Audio -> ResetTrafficClass\n   * Optionally there's also AppleALC's alctsel=1 boot-arg or JackFix\n\nAdd Properties:\n\n * No equivalent, need to specify with a PciRoot path\n\nProperties:\n\n * DeviceProperties -> Add\n\nFakeID: For the following, you will need to know your PciRoot for your device and apply their properties with DeviceProperties -> Add, PciRoot can be found with gfxutil\n\n * USB\n   \n   * device-id\n   * device_type\n   * device_type\n\n * IMEI\n   \n   * device-id\n   * vendor-id\n\n * WIFI\n   \n   * name\n   * compatible\n\n * LAN\n   \n   * device-id\n   * compatible\n   * vendor-id\n\n * XHCI\n   \n   * device-id\n   * device_type: UHCI\n   * device_type: OHCI\n\ndevice_type: EHCI\n\n * device-id\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-in-sleep\n * built-in\n\ndevice_type: XHCI\n\n * device-id\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-available\n * AAPL,current-in-sleep\n * built-in\n\nForceHPET:\n\n * UEFI -> Quirks -> ActivateHpetSupport\n\n\n# Disable Drivers\n\nJust don't add your drivers to UEFI -> Drivers, alternatively add # in-front of the driver in your config.plist for OpenCore to skip it.\n\n\n# Gui\n\n\n# Graphics\n\n * Note: PciRoot... should be replaced with\n\nInjectIntel:\n\n * GMA Patching\n\nInjectAti:\n\n * DeviceProperties -> Add -> PciRoot... -> device-id\n   * ie: <B0670000> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> @0,connector-type\n   * You may need to add additional Connectors (ie. @1,connector-type, @2,connector-type) for the amount of ports you have. See here for the list of connector types:\n\nLVDS                    <02 00 00 00>\nDVI (Dual Link)         <04 00 00 00>\nDVI (Single Link)       <00 02 00 00>\nVGA                     <10 00 00 00>\nS-Video                 <80 00 00 00>\nDP                      <00 04 00 00>\nHDMI                    <00 08 00 00>\nDUMMY                   <01 00 00 00>\n\n\nInjectNVIDIA:\n\n * NVIDIA Patching\n\nFakeIntel:\n\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> device-id\n   * ie. 66010003 for the HD 4000\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> vendor-id -> <86800000>\n\nFakeAti:\n\n * DeviceProperties -> Add -> PciRoot... -> device-id\n   * ie: <B0670000> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> ATY,DeviceID\n   * ie: <B067> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> @0,compatible\n   * ie. ATY,Elodea for HD 6970M\n * DeviceProperties -> Add -> PciRoot... -> vendor-id-> <02100000>\n * DeviceProperties -> Add -> PciRoot... -> ATY,VendorID -> <0210>\n\nNote: See here on making an SSDT for GPU Spoofing, DeviceProperties injection via OpenCore seems to fail sometimes when trying to spoof a GPU: Renaming GPUs For others like InjectAti, see the Sample.dsl in the WhateverGreen docs\n\nCustom EDID\n\n * WhateverGreen's EDID docs\n\nDual Link:\n\n * DeviceProperties -> Add -> PciRoot... -> AAPL00,DualLink\n   * 1 -> <01000000>\n   * 0 -> <00000000>\n\nNVCAP\n\n * NVIDIA Patching\n\ndisplay-cfg:\n\n * DeviceProperties -> Add -> PciRoot... -> @0,display-cfg\n * See fassl's post on the matter: NVIDIA injection\n\nLoadVBios:\n\n * See sample.dsl for more info on custom VBIOS injection\n\nPatchVBios: See LoadVBIOS\n\nNVIDIAGeneric:\n\n * DeviceProperties -> Add -> PciRoot... -> model | string | Add the GPU name\n\nNVIDIASingle: See disabling unsupported GPUs\n\nNVIDIANoEFI:\n\n * DeviceProperties -> Add -> PciRoot... -> NVDA,noEFI | Boolean | True\n * See FredWst' comment for more info: GT 640 scramble\n\nig-platform-id:\n\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> APPL,ig-platform-id\n\nBootDisplay:\n\n * DeviceProperties -> Add -> PciRoot... -> @0,AAPL,boot-display\n\nRadeonDeInit:\n\nIn most cases it is advisable to use WhateverGreen, which handles this automatically. This SSDT is not needed if WhateverGreen is used.\n\n * Radeon-DeInit-SSDT\n   * Do note that this is meant for GFX0, adjust for your system\n\n\n# Kernel and Kext Patches\n\nKernelPm:\n\n * Kernel -> Quirks -> AppleXcpmCfgLock -> YES\n * Note that Clover will auto-apply this patch without setting it if the MSR E2 was locked, so you may actually need AppleXcpmCfgLock even if Clover didn't\n\nAppleIntelCPUPM:\n\n * Kernel -> Quirks -> AppleCpuPmCfgLock -> YES\n\nDellSMBIOSPatch:\n\nAn odd quirk for Dell systems running APTIO V\n\n * Kernel -> Quirks -> CustomSMBIOSGuid -> YES\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\nKextsToPatch:\n\n * Kernel -> Patch\n * See Common Kernel and Kext patch conversions for common patch conversions\n\nKernelToPatch:\n\n * Kernel -> Patch\n * See Common Kernel and Kext patch conversions for common patch conversions\n\nForceKextsToLoad:\n\n * Kernel -> Force\n\nKernel LAPIC:\n\n * Kernel -> Quirks -> LapicKernelPanic -> YES\n\nKernelXCPM:\n\n * Kernel -> Quirks -> AppleXcpmExtraMsrs -> YES\n\nFor an extensive list of patches, please compare OpenCore's CommonPatches.c with Clover's kernel_patcher.c. Some patches are not transferred over so if you're having issues this is the section to check, example is converting the KernelIvyBridgeXCPM() to OpenCore:\n\nBase: _xcpm_bootstrap\nComment: _xcpm_bootstrap (Ivy Bridge) 10.15\nCount: 1\nEnabled: YES\nFind: 8D43C43C22\nIdentifier: kernel\nLimit: 0\nMask: FFFF00FFFF\nMinKernel: 19.\nMaxKernel: 19.99.99\nReplace: 8D43C63C22\nReplaceMask: 0000FF0000\nSkip: 0\n\n\nSource\n\nFor Low end Haswell+ like Celerons, please see here for recommended patches: Bugtracker Issues 365\n\nUSB Port Limit Patches:\n\n * Kernel -> Quirks -> XhciPortLimit -> YES\n\nExternal Icons Patch:\n\n * Kernel -> Quirks -> ExternalDiskIcons -> YES\n * Used for when you internal disk are seen as external on macOS\n\nAppleRTC\n\nIssue with AppleRTC, quite a simple fix:\n\n * config.plist -> Kernel -> Quirks -> DisableRtcChecksum -> true\n\nNote: If you still have issues, you'll need to use RTCMemoryFixup and exclude ranges. See here for more info, and here for a guide.\n\nFakeCPUID:\n\n * Kernel -> Emulate:\n   * Cpuid1Mask: <Clover_FCPUID_Extended_to_4_bytes_Swapped_Bytes> | 00 00 00 00 | 00 00 00 00 | 00 00 00 00\n     * ex(0x0306A9): A9060300 00000000 00000000 00000000\n   * Cpuid1Data(Swap 00 for FF if needing to swap with a longer value)\n     * ex: FFFFFFFF 00000000 00000000 00000000\n\nNote: Finding CPUID's for Intel can be a bit harder than looking at Intel ARK, easiest way to find it is via Microsoft's Intel microcode update notes\n\n\n# Rt Variables\n\nROM:\n\n * No direct translation for UseMacAddr0 as you need to provide your hardware ROM, can be found in System Preferences -> Network -> Advanced -> Hardware\n * Also verify your En0 is still built-in when running OpenCore, this can break iMessage and iCloud when there's no built-in property.\n\nMLB:\n\n * PlatformInfo -> Generic -> MLB\n\nBooterConfig:\n\n * UEFI -> Quirks -> UIScale | Integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to HiDPI displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\nCsrActiveConfig:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config:\n   \n   * 0x0: 00000000\n   * 0x3: 03000000\n   * 0x67: 67000000\n   * 0x3E7: E7030000\n\n\n# SMBIOS\n\nProduct Name:\n\n * PlatformInfo -> Generic -> SystemProductName\n\nSerial Number:\n\n * PlatformInfo -> Generic -> SystemSerialNumber\n\nBoard Serial Number:\n\n * PlatformInfo -> Generic -> MLB\n\nSmUUID:\n\n * PlatformInfo -> Generic -> SystemUUID\n\nMemory:\n\n * PlatformInfo -> CustomMemory -> True\n * PlatformInfo -> Memory\n   * See Configuration.pdf for more info\n\nSlots AAPL Injection:\n\n * DeviceProperties -> Add -> PciRoot... -> APPL,slot-name | string | Add slot\n\n\n# System Parameters\n\nCustomUUID:\n\n * Heavily deprecated and not recommended even on Clover, no equivalent on OpenCore\n * More info on why: Hardware UUID injection for OpenCore #711\n\nInjectSystemID:\n\n * Also legacy as it's used for replicating Chameleon user's UUIDs\n\nBacklightLevel:\n\n * Property set in NVRAM\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> backlight-level | Data | <Insert value>\n   * 0x0101 -> <0101>\n\nInjectKexts:\n\n * No equivalent but you really have no excuse to keep FakeSMC inside macOS\n\nNoCaches:\n\n * This only works up to 10.7 on Clover, and OpenCore requires an OS that supports a prelinked(10.7) so there can't be an equivalent\n\nExposeSysVariables:\n\n * Just add your SMBIOS properties under PlatformInfo\n * Confusing quirk tbh, it's not even mentioned in more recent versions of the Clover docs on AppleLife\n\nNVIDIAWeb:\n\n * What this does is apply sudo nvram nvda_drv=1 on every boot. To get a similar effect you can find it under the following path:\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> nvda_drv: <31>\n\n\n# Status\n\nSection finished 100%:\n\n * Boot Graphics\n * Disable Drivers\n * KernelAndKextPatches\n * RTVariables\n * SMBIOS\n * SystemParameters\n\nSection mostly finished:\n\n * Acpi\n * Boot\n * CPU\n * Device\n\nSection missing:\n\n * GUI",normalizedContent:"# converting common properties from clover to opencore\n\nso this little(well not so little as i reread this...) page is for users who are having issues migrating from clover to opencore as some of their legacy quirks are required or the configuration.pdf isn't well suited for laptop users.\n\n\n# kexts and firmware drivers\n\nsee kexts and firmware drivers.\n\n\n# acpi\n\nacpi renames:\n\nso with the transition from clover to opencore we should start removing unneeded patches you may have carried along for some time:\n\n * ehci patches: recommended to power off the controller with ssdt-ehcx_off. skylake and newer users do not have an ehci controller so no need for this.\n   * change ehc1 to eh01\n   * change ehc2 to eh02\n * xhci patches: not needed once an injector kext is made\n   * change xhci to xhc\n   * change xhc1 to xhc\n * sata patches: purely cosmetic in macos now\n   * change sat0 to sata\n   * change sat1 to sata\n * imei patches: handled by whatevergreen\n   * change heci to imei\n   * change hec1 to imei\n   * change mei to imei\n   * change ider to meid\n * gfx patches: handled by whatevergreen\n   * change gfx0 to igpu\n   * change peg0 to gfx0\n   * change pegp to gfx0\n   * change sl01 to pegp\n * ec patches: see here on best solution: getting started with acpi\n   * change ec0 to ec\n   * change h_ec to ec\n   * change ecdv to ec\n   * change pgec to ec\n * audio renames: handled by applealc\n   * change hdas to hdef\n   * change cavs to hdef\n   * change azal to hdef\n   * change alza to hdef\n   * change b0d3 to hdau\n * z390 bios rtc bug fix: see here on best solution: getting started with acpi(ssdt-awac)\n   * change stas to [blank]\n   * fix z390 bios dsdt device(rtc) bug\n   * fix 300-series rtc bug\n * nvme patches: nvmefix fixes power management\n   * change pxsx to ans1\n   * change pxsx to ans2\n * airport/wifi patches: airportbrcmfixup\n   * change pxsx to arpt\n * other purely cosmetic patches:\n   * change lpc0 to lpcb(use ssdt-sbus-mchc for fixing smbus support)\n   * change pc00 to pcio\n   * change fpu to math\n   * change tmr to timr\n   * change pic to ipic\n   * change gbe1 to eth0\n\npatches\n\n * tgtbridge patches:\n   \n   * acpi -> patch -> ... -> base\n\n * disableaspm:\n   \n   * deviceproperties -> add -> pciroot... -> pci-aspm-default | data | <00>\n\n * haltenabler:\n   \n   * acpi -> quirks -> fadtenablereset -> yes\n\nfixes:\n\n * fixairport:\n   \n   * airportbrcmfixup\n\n * fixipic:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixsbus:\n   \n   * ssdt-sbus-mchc\n\n * fixshutdown:\n   \n   * fixshutdown-usb-ssdt\n   * _pts to zpts patch\n   * this will not harm windows or linux installs as this is just adding missing methods that should've been there to start with. blame the firmware writers\n\n * fixdisplay:\n   \n   * manual framebuffer patching, whatevergreen does most of the work already\n\n * fixhda:\n   \n   * handled by applealc\n\n * fixhpet:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixsata:\n   \n   * kernel -> quirks -> externaldiskicons -> yes\n\n * fixadp1:\n   \n   * renames device ac0_ to adp1, see rename-ssdt for an example\n   * also injects name (_prw, package (0x02) {0x1c,0x03}) into the device if not present. source\n\n * fixrtc:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixtmr:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * addpnlf:\n   \n   * see ssdt-pnlf\n\n * addmchc:\n   \n   * ssdt-sbus-mchc\n\n * addimei:\n   \n   * ssdt-sbus-mchc\n   * whatevergreen will also handle fixing imei naming\n   * for sandy bridge on z77 or ivybridge on z67, the imei will need to be faked: ssdt-imei\n\n * fakelpc:\n   \n   * deviceproperties -> add -> pciroot... -> device-id\n   * you'll want to spoof it to a supported lpc controller already in applelpc\n\n * fixintelgfx:\n   \n   * whatevergreen handles this\n\n * addhdmi:\n   \n   * whatevergreen handles this\n\ndroptables:\n\n * acpi -> delete\n\nssdt:\n\n * plugintype:\n   \n   * ssdt-plug\n   * see getting started with acpi for more details\n\n * generate p states: ssdtprgen.sh(for sandy bridge and ivybridge)\n\n * generate c states: ssdtprgen.sh(for sandy bridge and ivybridge)\n\n\n# boot\n\nboot argument:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> boot-args\n\nneverhibernate:\n\n * misc -> boot -> hibernatemode -> none\n\ndefault boot volume:\n\n * misc -> security -> allowsetdefault -> true\n   * press ctrl+enter in the picker to set default device\n * alternative is startup disk in macos's system preferences, just like on real macs\n\n\n# boot graphics\n\ndefaultbackgroundcolor:\n\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14 -> defaultbackgroundcolor\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n   * to calculate your own, convert an rgb value to hex\n\nefiloginhidpi:\n\n * clover only flag, for opencore ui scaling see uiscale and uefi -> output\n\nflagstate:\n\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14 -> flagstate | data | <>\n   * 0 -> <00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000(dumped from a mac)\n   * nvram location needs to be double checked for this one\n\nuiscale:\n\n * uefi -> quirks -> uiscale | integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to hidpi displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\n\n# cpu\n\ntype:\n\n * platforminfo -> generic -> processortype\n * see applesmbios.h for all supported values\n\nhwpenable: better alternative is to properly manage msr 0x770 with hwpenable\n\nqemu: proper vm/kvm support is implemented in opencore\n\nturbodisable: better alternative is to control your frequencies with cpufriend or ssdtprgen\n\n\n# devices\n\nusb:\n\n * fixownership: uefi -> quirk -> releaseusbownership\n   * you should also enable xhci hand-off in your bios\n * clockid: deviceproperties -> add -> pciroot... -> aapl,clock-id\n * highcurrent: deviceproperties -> add -> pciroot... -> aapl, highcurrent\n   * irrelevant for os x 10.11 and newer\n   * newer variant is either powerproperties defined in iousbhostfamily.kext -> appleusbhostplatformproperties or added with a usbx ssdt for skylake smbios and newer\n\naudio:\n\nfor the following, you will need to know your pciroot for your audio controller and its name(commonly known as hdef but also hdas, hdau and such), this can be found with gfxutil:\n\npath/to/gfxutil -f hdef\n\n\n * inject: deviceproperties -> add -> pciroot... -> layout-id\n * afglowpowerstate: deviceproperties -> add -> pciroot... -> afglowpowerstate -> <01000000>\n * resethda: uefi -> audio -> resettrafficclass\n   * optionally there's also applealc's alctsel=1 boot-arg or jackfix\n\nadd properties:\n\n * no equivalent, need to specify with a pciroot path\n\nproperties:\n\n * deviceproperties -> add\n\nfakeid: for the following, you will need to know your pciroot for your device and apply their properties with deviceproperties -> add, pciroot can be found with gfxutil\n\n * usb\n   \n   * device-id\n   * device_type\n   * device_type\n\n * imei\n   \n   * device-id\n   * vendor-id\n\n * wifi\n   \n   * name\n   * compatible\n\n * lan\n   \n   * device-id\n   * compatible\n   * vendor-id\n\n * xhci\n   \n   * device-id\n   * device_type: uhci\n   * device_type: ohci\n\ndevice_type: ehci\n\n * device-id\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-in-sleep\n * built-in\n\ndevice_type: xhci\n\n * device-id\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-available\n * aapl,current-in-sleep\n * built-in\n\nforcehpet:\n\n * uefi -> quirks -> activatehpetsupport\n\n\n# disable drivers\n\njust don't add your drivers to uefi -> drivers, alternatively add # in-front of the driver in your config.plist for opencore to skip it.\n\n\n# gui\n\n\n# graphics\n\n * note: pciroot... should be replaced with\n\ninjectintel:\n\n * gma patching\n\ninjectati:\n\n * deviceproperties -> add -> pciroot... -> device-id\n   * ie: <b0670000> for the r9 390x\n * deviceproperties -> add -> pciroot... -> @0,connector-type\n   * you may need to add additional connectors (ie. @1,connector-type, @2,connector-type) for the amount of ports you have. see here for the list of connector types:\n\nlvds                    <02 00 00 00>\ndvi (dual link)         <04 00 00 00>\ndvi (single link)       <00 02 00 00>\nvga                     <10 00 00 00>\ns-video                 <80 00 00 00>\ndp                      <00 04 00 00>\nhdmi                    <00 08 00 00>\ndummy                   <01 00 00 00>\n\n\ninjectnvidia:\n\n * nvidia patching\n\nfakeintel:\n\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> device-id\n   * ie. 66010003 for the hd 4000\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> vendor-id -> <86800000>\n\nfakeati:\n\n * deviceproperties -> add -> pciroot... -> device-id\n   * ie: <b0670000> for the r9 390x\n * deviceproperties -> add -> pciroot... -> aty,deviceid\n   * ie: <b067> for the r9 390x\n * deviceproperties -> add -> pciroot... -> @0,compatible\n   * ie. aty,elodea for hd 6970m\n * deviceproperties -> add -> pciroot... -> vendor-id-> <02100000>\n * deviceproperties -> add -> pciroot... -> aty,vendorid -> <0210>\n\nnote: see here on making an ssdt for gpu spoofing, deviceproperties injection via opencore seems to fail sometimes when trying to spoof a gpu: renaming gpus for others like injectati, see the sample.dsl in the whatevergreen docs\n\ncustom edid\n\n * whatevergreen's edid docs\n\ndual link:\n\n * deviceproperties -> add -> pciroot... -> aapl00,duallink\n   * 1 -> <01000000>\n   * 0 -> <00000000>\n\nnvcap\n\n * nvidia patching\n\ndisplay-cfg:\n\n * deviceproperties -> add -> pciroot... -> @0,display-cfg\n * see fassl's post on the matter: nvidia injection\n\nloadvbios:\n\n * see sample.dsl for more info on custom vbios injection\n\npatchvbios: see loadvbios\n\nnvidiageneric:\n\n * deviceproperties -> add -> pciroot... -> model | string | add the gpu name\n\nnvidiasingle: see disabling unsupported gpus\n\nnvidianoefi:\n\n * deviceproperties -> add -> pciroot... -> nvda,noefi | boolean | true\n * see fredwst' comment for more info: gt 640 scramble\n\nig-platform-id:\n\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> appl,ig-platform-id\n\nbootdisplay:\n\n * deviceproperties -> add -> pciroot... -> @0,aapl,boot-display\n\nradeondeinit:\n\nin most cases it is advisable to use whatevergreen, which handles this automatically. this ssdt is not needed if whatevergreen is used.\n\n * radeon-deinit-ssdt\n   * do note that this is meant for gfx0, adjust for your system\n\n\n# kernel and kext patches\n\nkernelpm:\n\n * kernel -> quirks -> applexcpmcfglock -> yes\n * note that clover will auto-apply this patch without setting it if the msr e2 was locked, so you may actually need applexcpmcfglock even if clover didn't\n\nappleintelcpupm:\n\n * kernel -> quirks -> applecpupmcfglock -> yes\n\ndellsmbiospatch:\n\nan odd quirk for dell systems running aptio v\n\n * kernel -> quirks -> customsmbiosguid -> yes\n * platforminfo -> updatesmbiosmode -> custom\n\nkextstopatch:\n\n * kernel -> patch\n * see common kernel and kext patch conversions for common patch conversions\n\nkerneltopatch:\n\n * kernel -> patch\n * see common kernel and kext patch conversions for common patch conversions\n\nforcekextstoload:\n\n * kernel -> force\n\nkernel lapic:\n\n * kernel -> quirks -> lapickernelpanic -> yes\n\nkernelxcpm:\n\n * kernel -> quirks -> applexcpmextramsrs -> yes\n\nfor an extensive list of patches, please compare opencore's commonpatches.c with clover's kernel_patcher.c. some patches are not transferred over so if you're having issues this is the section to check, example is converting the kernelivybridgexcpm() to opencore:\n\nbase: _xcpm_bootstrap\ncomment: _xcpm_bootstrap (ivy bridge) 10.15\ncount: 1\nenabled: yes\nfind: 8d43c43c22\nidentifier: kernel\nlimit: 0\nmask: ffff00ffff\nminkernel: 19.\nmaxkernel: 19.99.99\nreplace: 8d43c63c22\nreplacemask: 0000ff0000\nskip: 0\n\n\nsource\n\nfor low end haswell+ like celerons, please see here for recommended patches: bugtracker issues 365\n\nusb port limit patches:\n\n * kernel -> quirks -> xhciportlimit -> yes\n\nexternal icons patch:\n\n * kernel -> quirks -> externaldiskicons -> yes\n * used for when you internal disk are seen as external on macos\n\napplertc\n\nissue with applertc, quite a simple fix:\n\n * config.plist -> kernel -> quirks -> disablertcchecksum -> true\n\nnote: if you still have issues, you'll need to use rtcmemoryfixup and exclude ranges. see here for more info, and here for a guide.\n\nfakecpuid:\n\n * kernel -> emulate:\n   * cpuid1mask: <clover_fcpuid_extended_to_4_bytes_swapped_bytes> | 00 00 00 00 | 00 00 00 00 | 00 00 00 00\n     * ex(0x0306a9): a9060300 00000000 00000000 00000000\n   * cpuid1data(swap 00 for ff if needing to swap with a longer value)\n     * ex: ffffffff 00000000 00000000 00000000\n\nnote: finding cpuid's for intel can be a bit harder than looking at intel ark, easiest way to find it is via microsoft's intel microcode update notes\n\n\n# rt variables\n\nrom:\n\n * no direct translation for usemacaddr0 as you need to provide your hardware rom, can be found in system preferences -> network -> advanced -> hardware\n * also verify your en0 is still built-in when running opencore, this can break imessage and icloud when there's no built-in property.\n\nmlb:\n\n * platforminfo -> generic -> mlb\n\nbooterconfig:\n\n * uefi -> quirks -> uiscale | integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to hidpi displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\ncsractiveconfig:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config:\n   \n   * 0x0: 00000000\n   * 0x3: 03000000\n   * 0x67: 67000000\n   * 0x3e7: e7030000\n\n\n# smbios\n\nproduct name:\n\n * platforminfo -> generic -> systemproductname\n\nserial number:\n\n * platforminfo -> generic -> systemserialnumber\n\nboard serial number:\n\n * platforminfo -> generic -> mlb\n\nsmuuid:\n\n * platforminfo -> generic -> systemuuid\n\nmemory:\n\n * platforminfo -> custommemory -> true\n * platforminfo -> memory\n   * see configuration.pdf for more info\n\nslots aapl injection:\n\n * deviceproperties -> add -> pciroot... -> appl,slot-name | string | add slot\n\n\n# system parameters\n\ncustomuuid:\n\n * heavily deprecated and not recommended even on clover, no equivalent on opencore\n * more info on why: hardware uuid injection for opencore #711\n\ninjectsystemid:\n\n * also legacy as it's used for replicating chameleon user's uuids\n\nbacklightlevel:\n\n * property set in nvram\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> backlight-level | data | <insert value>\n   * 0x0101 -> <0101>\n\ninjectkexts:\n\n * no equivalent but you really have no excuse to keep fakesmc inside macos\n\nnocaches:\n\n * this only works up to 10.7 on clover, and opencore requires an os that supports a prelinked(10.7) so there can't be an equivalent\n\nexposesysvariables:\n\n * just add your smbios properties under platforminfo\n * confusing quirk tbh, it's not even mentioned in more recent versions of the clover docs on applelife\n\nnvidiaweb:\n\n * what this does is apply sudo nvram nvda_drv=1 on every boot. to get a similar effect you can find it under the following path:\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> nvda_drv: <31>\n\n\n# status\n\nsection finished 100%:\n\n * boot graphics\n * disable drivers\n * kernelandkextpatches\n * rtvariables\n * smbios\n * systemparameters\n\nsection mostly finished:\n\n * acpi\n * boot\n * cpu\n * device\n\nsection missing:\n\n * gui",charsets:{cjk:!0}},{title:"Converting from Clover to OpenCore",frontmatter:{search:!1},regularPath:"/clover-conversion/",relativePath:"clover-conversion/README.md",key:"v-30c73b20",path:"/clover-conversion/",headers:[{level:2,title:"Cleaning the Clover Junk in macOS",slug:"cleaning-the-clover-junk-in-macos",normalizedTitle:"cleaning the clover junk in macos",charIndex:509},{level:2,title:"Removing kexts from macOS(S/L/E and L/E)",slug:"removing-kexts-from-macos-s-l-e-and-l-e",normalizedTitle:"removing kexts from macos(s/l/e and l/e)",charIndex:1345},{level:2,title:"Cleaning the Clover Junk in your hardware",slug:"cleaning-the-clover-junk-in-your-hardware",normalizedTitle:"cleaning the clover junk in your hardware",charIndex:2272},{level:2,title:"Optional: Avoiding SMBIOS injection into other OSes",slug:"optional-avoiding-smbios-injection-into-other-oses",normalizedTitle:"optional: avoiding smbios injection into other oses",charIndex:2953}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Cleaning the Clover Junk in macOS Removing kexts from macOS(S/L/E and L/E) Cleaning the Clover Junk in your hardware Optional: Avoiding SMBIOS injection into other OSes",content:"# Converting from Clover to OpenCore\n\nSo you see the new fancy OpenCore bootloader and just dying to try it out, well you've come to the right place! Many things in Clover have feature parity with OpenCore but many do not, here we'll be going over what you can bring over and what you cannot.\n\nTo get started, we have some resources that will aid you:\n\n * Config.plist conversion\n * Kexts and Firmware driver conversion(.kext, .efi)\n * Boot Argument conversion\n * Common Kernel and Kext patch conversions\n\n\n# Cleaning the Clover Junk in macOS\n\nSo to start, Clover would like to give a big F*** You if you're using emulated NVRAM. Why? Well it likely installed some trash that's a pain in the arse to get rid of. You will need to have SIP disabled to clean it up.\n\nThings to check for:\n\n * /Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi\n * /Volumes/EFI/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_ESP.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nIf folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\nUsers of Clover's Preference Pane will also need to remove these:\n\n * /Library/PreferencePanes/Clover.prefPane\n * /Library/Application\\ Support/clover\n\n\n# Removing kexts from macOS(S/L/E and L/E)\n\nA common tradition with Clover was to install kexts into macOS, specifically System/Library/Extensions and Library/Extensions. Reasoning being that Clover's kext injection system was known to fail either with OS updates or just spontaneously. Thankfully with OpenCore, a much more robust and stable injection mechanism's been made that is far harder to break. So time to do a bit of spring cleaning.\n\nNote: OpenCore will fail to inject kexts already in your kernelcache so cleaning this out will also resolve those issues\n\nNow open up terminal and run the following:\n\nsudo kextcache -i /\n\n\nThis command will yell at you about any kexts that shouldn't be in either S/L/E or L/E.\n\nRemove all hack kexts:\n\nsudo -s\ntouch /Library/Extensions /System/Library/Extensions​\nkextcache -i /​\n\n\n * Note, macOS Catalina will need the mount -uw / command to mount the system drive as Read/Write\n\n\n# Cleaning the Clover Junk in your hardware\n\nThe other thing that Clover may have hidden from you is NVRAM variables, this is bad as OpenCore won't overwrite variables unless explicitly told via the Delete feature found under NVRAM -> Delete. To fix this, we'll need to clear then via OpenCore's ClearNvram feature.\n\nIn you config.plist:\n\n * Misc -> Security -> AllowNvramReset -> True\n\nAnd on your initial boot of OpenCore, select Reset NVRAM boot option. This will wipe everything and reboot the system when finished.\n\n * Note: Thinkpad laptops are known to be semi-bricked after an NVRAM reset in OpenCore, we recommend resetting NVRAM by updating the BIOS on these machines.\n\n\n# Optional: Avoiding SMBIOS injection into other OSes\n\nBy default OpenCore will inject SMBIOS data into all OSes, the reason for this is 2 parts:\n\n * This allows for proper multiboot support like with BootCamp\n * Avoids edge cases where info is injected several times, commonly seen with Clover\n\nHowever, there are quirks in OpenCore that allow for SMBIOS injection to be macOS limited by patching where macOS reads SMBIOS info from. These quirks can break in the future and so we only recommend this option in the event of certain software breaking in other OSes. For best stability, please avoid\n\nTo enable macOS-only SMBIOS injection:\n\n * Kernel -> Quirks -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom",normalizedContent:"# converting from clover to opencore\n\nso you see the new fancy opencore bootloader and just dying to try it out, well you've come to the right place! many things in clover have feature parity with opencore but many do not, here we'll be going over what you can bring over and what you cannot.\n\nto get started, we have some resources that will aid you:\n\n * config.plist conversion\n * kexts and firmware driver conversion(.kext, .efi)\n * boot argument conversion\n * common kernel and kext patch conversions\n\n\n# cleaning the clover junk in macos\n\nso to start, clover would like to give a big f*** you if you're using emulated nvram. why? well it likely installed some trash that's a pain in the arse to get rid of. you will need to have sip disabled to clean it up.\n\nthings to check for:\n\n * /volumes/efi/efi/clover/drivers64uefi/emuvariableuefi-64.efi\n * /volumes/efi/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_esp.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nif folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\nusers of clover's preference pane will also need to remove these:\n\n * /library/preferencepanes/clover.prefpane\n * /library/application\\ support/clover\n\n\n# removing kexts from macos(s/l/e and l/e)\n\na common tradition with clover was to install kexts into macos, specifically system/library/extensions and library/extensions. reasoning being that clover's kext injection system was known to fail either with os updates or just spontaneously. thankfully with opencore, a much more robust and stable injection mechanism's been made that is far harder to break. so time to do a bit of spring cleaning.\n\nnote: opencore will fail to inject kexts already in your kernelcache so cleaning this out will also resolve those issues\n\nnow open up terminal and run the following:\n\nsudo kextcache -i /\n\n\nthis command will yell at you about any kexts that shouldn't be in either s/l/e or l/e.\n\nremove all hack kexts:\n\nsudo -s\ntouch /library/extensions /system/library/extensions​\nkextcache -i /​\n\n\n * note, macos catalina will need the mount -uw / command to mount the system drive as read/write\n\n\n# cleaning the clover junk in your hardware\n\nthe other thing that clover may have hidden from you is nvram variables, this is bad as opencore won't overwrite variables unless explicitly told via the delete feature found under nvram -> delete. to fix this, we'll need to clear then via opencore's clearnvram feature.\n\nin you config.plist:\n\n * misc -> security -> allownvramreset -> true\n\nand on your initial boot of opencore, select reset nvram boot option. this will wipe everything and reboot the system when finished.\n\n * note: thinkpad laptops are known to be semi-bricked after an nvram reset in opencore, we recommend resetting nvram by updating the bios on these machines.\n\n\n# optional: avoiding smbios injection into other oses\n\nby default opencore will inject smbios data into all oses, the reason for this is 2 parts:\n\n * this allows for proper multiboot support like with bootcamp\n * avoids edge cases where info is injected several times, commonly seen with clover\n\nhowever, there are quirks in opencore that allow for smbios injection to be macos limited by patching where macos reads smbios info from. these quirks can break in the future and so we only recommend this option in the event of certain software breaking in other oses. for best stability, please avoid\n\nto enable macos-only smbios injection:\n\n * kernel -> quirks -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom",charsets:{}},{title:"Clover Kexts and Firmware driver conversion(.kext, .efi)",frontmatter:{search:!1},regularPath:"/clover-conversion/clover-efi.html",relativePath:"clover-conversion/clover-efi.md",key:"v-c594cb12",path:"/clover-conversion/clover-efi.html",headers:[{level:2,title:"Kexts",slug:"kexts",normalizedTitle:"kexts",charIndex:9},{level:2,title:"Firmware Drivers",slug:"firmware-drivers",normalizedTitle:"firmware drivers",charIndex:430},{level:3,title:"AptioMemoryFix Note",slug:"aptiomemoryfix-note",normalizedTitle:"aptiomemoryfix note",charIndex:2252}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Kexts Firmware Drivers AptioMemoryFix Note",content:"# Clover Kexts and Firmware driver conversion(.kext, .efi)\n\nMain thing to note is that you must specify your kexts and firmware drivers in your config.plist, or else they will not load. All kexts that are currently supported on Clover will work on OpenCore, however many have been deprecated with better variants being integrated into OpenCore. Firmware drivers are a bit different as they can in-fact break booting.\n\n * Kexts\n * Firmware Drivers\n\n\n# Kexts\n\nFor the most part, all kexts are supported in OpenCore. However there are a few integrated\n\nIntegrated Kexts:\n\n * NullCPUPowerManagement.kext\n   * Integrated into DummyPowerManagement under Kernel -> Emulate\n * BT4LEContinuityFixup.kext\n   * Integrated into ExtendBTFeatureFlags under Kernel -> Quirks\n\n\n# Firmware Drivers\n\nSupported ones:\n\n * AudioDxe.efi (Make sure this is from OpenCorePkg and not Goldfish64's or Clover's repo)\n * CsmVideoDxe.efi (Note that BiosVideo.efi may be preferred)\n * EnhancedFatDxe.efi\n * ExFatDxeLegacy.efi\n * ExFatDxe.efi\n * GrubEXFAT.efi\n * GrubISO9660.efi\n * GrubNTFS.efi\n * GrubUDF.efi\n * HiiDatabase.efi\n * HfsPlus.efi\n * HfsPlusLegacy.efi\n * NTFS.efi\n * NvmExpressDxe.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi\n * OsxFatBinaryDrv.efi\n * Ps2MouseDxe.efi\n * TbtForcePower.efi\n * UsbMouseDxe.efi\n * VBoxExt2.efi\n * VBoxExt4.efi\n * VBoxHfs.efi\n * VBoxIso9600.efi\n * XhciDxe.efi\n\nDrivers provided/merged into OpenCore and so are no longer needed:\n\n * APFS.efi\n * ApfsDriverLoader.efi\n * AppleEvent.efi\n * AppleGenericInput.efi\n * AppleImageCodec.efi\n * AppleKeyMapAggregator.efi\n * AppleUiSupport.efi\n * AppleUITheme.efi\n * AptioInputFix.efi\n * AptioMemoryFix.efi\n * AudioDxe.efi(well kinda, see AudioDxe shipped with OpenCorePkg)\n * BootChimeDxe.efi\n * DataHubDxe.efi\n * EmuVariableUEFI.efi\n * EnglishDxe.efi\n * FirmwareVolume.efi\n * HashServiceFix.efi\n * SMCHelper.efi\n * OcQuirks.efi\n * VirtualSMC.efi\n\nExplicitly unsupported drivers:\n\n * AppleUsbKbDxe.efi(replaced with OpenUsbKbDxe.efi)\n * FSInject.efi\n * FwRuntimeServices.efi(replaced with OpenRuntime.efi)\n * osxaptiofix2drv-free2000.efi\n * osxaptiofix2drv.efi\n * osxaptiofix3drv.efi\n * osxaptiofixdrv.efi\n * OsxFatBinaryDrv.efi\n * OsxLowMemFixDrv.efi\n * UsbKbDxe.efi(replaced with OpenUsbKbDxe.efi)\n\n\n# AptioMemoryFix Note\n\nWell before we actually get started on converting the Clover config, we must first talk about converting from AptioMemoryFix. The main thing to note is that it's inside of OpenCore with OpenRuntime being an extension, this means that AptioMemoryFix and that there's also a lot more settings to choose from. Please see the hardware specific sections of the OpenCore guide to know what Booter settings your system may require(HEDT like X99 and X299 should look to the closest CPU like Skylake-X should refer to Skylake guide and read the comments as they mention specifics for your system).",normalizedContent:"# clover kexts and firmware driver conversion(.kext, .efi)\n\nmain thing to note is that you must specify your kexts and firmware drivers in your config.plist, or else they will not load. all kexts that are currently supported on clover will work on opencore, however many have been deprecated with better variants being integrated into opencore. firmware drivers are a bit different as they can in-fact break booting.\n\n * kexts\n * firmware drivers\n\n\n# kexts\n\nfor the most part, all kexts are supported in opencore. however there are a few integrated\n\nintegrated kexts:\n\n * nullcpupowermanagement.kext\n   * integrated into dummypowermanagement under kernel -> emulate\n * bt4lecontinuityfixup.kext\n   * integrated into extendbtfeatureflags under kernel -> quirks\n\n\n# firmware drivers\n\nsupported ones:\n\n * audiodxe.efi (make sure this is from opencorepkg and not goldfish64's or clover's repo)\n * csmvideodxe.efi (note that biosvideo.efi may be preferred)\n * enhancedfatdxe.efi\n * exfatdxelegacy.efi\n * exfatdxe.efi\n * grubexfat.efi\n * grubiso9660.efi\n * grubntfs.efi\n * grubudf.efi\n * hiidatabase.efi\n * hfsplus.efi\n * hfspluslegacy.efi\n * ntfs.efi\n * nvmexpressdxe.efi\n * openruntime.efi\n * openusbkbdxe.efi\n * osxfatbinarydrv.efi\n * ps2mousedxe.efi\n * tbtforcepower.efi\n * usbmousedxe.efi\n * vboxext2.efi\n * vboxext4.efi\n * vboxhfs.efi\n * vboxiso9600.efi\n * xhcidxe.efi\n\ndrivers provided/merged into opencore and so are no longer needed:\n\n * apfs.efi\n * apfsdriverloader.efi\n * appleevent.efi\n * applegenericinput.efi\n * appleimagecodec.efi\n * applekeymapaggregator.efi\n * appleuisupport.efi\n * appleuitheme.efi\n * aptioinputfix.efi\n * aptiomemoryfix.efi\n * audiodxe.efi(well kinda, see audiodxe shipped with opencorepkg)\n * bootchimedxe.efi\n * datahubdxe.efi\n * emuvariableuefi.efi\n * englishdxe.efi\n * firmwarevolume.efi\n * hashservicefix.efi\n * smchelper.efi\n * ocquirks.efi\n * virtualsmc.efi\n\nexplicitly unsupported drivers:\n\n * appleusbkbdxe.efi(replaced with openusbkbdxe.efi)\n * fsinject.efi\n * fwruntimeservices.efi(replaced with openruntime.efi)\n * osxaptiofix2drv-free2000.efi\n * osxaptiofix2drv.efi\n * osxaptiofix3drv.efi\n * osxaptiofixdrv.efi\n * osxfatbinarydrv.efi\n * osxlowmemfixdrv.efi\n * usbkbdxe.efi(replaced with openusbkbdxe.efi)\n\n\n# aptiomemoryfix note\n\nwell before we actually get started on converting the clover config, we must first talk about converting from aptiomemoryfix. the main thing to note is that it's inside of opencore with openruntime being an extension, this means that aptiomemoryfix and that there's also a lot more settings to choose from. please see the hardware specific sections of the opencore guide to know what booter settings your system may require(hedt like x99 and x299 should look to the closest cpu like skylake-x should refer to skylake guide and read the comments as they mention specifics for your system).",charsets:{}},{title:"Converting common Kernel and Kext patches",frontmatter:{search:!1},regularPath:"/clover-conversion/clover-patch.html",relativePath:"clover-conversion/clover-patch.md",key:"v-b3d44012",path:"/clover-conversion/clover-patch.html",headers:[{level:2,title:"Manually converting a patch",slug:"manually-converting-a-patch",normalizedTitle:"manually converting a patch",charIndex:48},{level:2,title:"Common patches in OpenCore and co",slug:"common-patches-in-opencore-and-co",normalizedTitle:"common patches in opencore and co",charIndex:2241},{level:3,title:"Kernel Patches",slug:"kernel-patches",normalizedTitle:"kernel patches",charIndex:2524},{level:3,title:"Kext Patches",slug:"kext-patches",normalizedTitle:"kext patches",charIndex:3223}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Manually converting a patch Common patches in OpenCore and co Kernel Patches Kext Patches",content:"# Converting common Kernel and Kext patches\n\n\n# Manually converting a patch\n\nWhen converting a kernel/kext patch into one for OpenCore, you'll need to remember a few things\n\n * InfoPlistPatch has no feature parity\n * MatchOS is replaced with MinKernel and MaxKernel\n * Both kernel and kext patches go under Kernel -> Patch, and you use Identifier to say whether it's the kernel or a specific kext you want to patch\n\nNow lets look at this example:\n\nKernelToPatch:\n\nKEY          TYPE      VALUE\nComment      String    cpuid_set_cpufamily - force CPUFAMILY_INTEL_PENRYN\nDisabled     Boolean   False\nMatchBuild   String    18G95,18G103\nMatchOS      String    10.14.6\nFind         Data      31db803d4869980006755c\nReplace      Data      bbbc4fea78e95d00000090\n\nSo to convert this patch, see below:\n\n * Comment: Available both on Clover and OpenCore\n * Disabled: OpenCore uses Enabled instead\n * MatchBuild: OpenCore uses MinKernel and MaxKernel, see below for more info\n * MatchOS: OpenCore uses MinKernel and MaxKernel, see below for more info\n * Find: Available both on Clover and OpenCore\n * Replace: Available both on Clover and OpenCore\n * MaskFind: OpenCore uses Mask instead\n * MaskReplace: Available both on Clover and OpenCore\n\nSo the above patch would become:\n\nKernel -> Patch:\n\nKEY           TYPE      VALUE\nComment       String    cpuid_set_cpufamily - force CPUFAMILY_INTEL_PENRYN\nEnabled       Boolean   True\nMinKernel     String    18.7.0\nMaxKernel     String    18.7.0\nFind          Data      31db803d4869980006755c\nReplace       Data      bbbc4fea78e95d00000090\nIdentifier    String    kernel\nLimit         Number    0\nCount         Number    0\nSkip          Number    0\nMask          Data      \nReplaceMask   Data      \n\nFor Min and MaxKernel, we can use the below as for info, so 18G95 has the kernel version 18.7.0 and 18G103 has 18.7.0(both being the same kernel):\n\n * macOS Mojave: Release history\n\nFor Identifier, you'll either define kernel or the kext you want to patch(ie. com.apple.iokit.IOGraphicsFamily )\n\nRegarding Limit, Count and Skip, they are set to 0 so they apply to all instances. Mask and ReplaceMask can be left as blank as Clover doesn't support masking(until very recently but won't be covered here).\n\n\n# Common patches in OpenCore and co\n\nLittle section mentioning common Kernel and Kexts patches that have been absorbed into OpenCore or other kexts. This list is not complete so any that may have been forgotten can be mentioned by opening a new issue. Any help is much appreciated\n\n\n# Kernel Patches\n\nFor a full list of patches OpenCore supports, see /Library/OcAppleKernelLib/CommonPatches.c\n\nGeneral Patches:\n\n * MSR 0xE2 _xcpm_idle instant reboot (c) Pike R. Alpha\n   * Kernel -> Quirks -> AppleXcpmCfgLock\n\nHEDT Specific Patches:\n\nAll of the following patches are inside the Kernel -> Quirk -> AppleXcpmExtraMsrs\n\n * _xcpm_bootstrap © Pike R. Alpha\n * xcpm_pkg_scope_msrs © Pike R. Alpha\n * _xcpm_SMT_scope_msrs 1 © Pike R. Alpha\n * _xcpm_SMT_scope_msrs #2 (c) Pike R. Alpha\n * _xcpm_core_scope_msrs © Pike R. Alpha\n * _xcpm_ performance_patch © Pike R. Alpha\n * xcpm MSR Patch 1 and 2 @Pike R. Alpha\n * /0x82D390/MSR_PP0_POLICY 0x63a xcpm support patch 1 and 2 Pike R. Alpha\n\n\n# Kext Patches\n\n * Disable Panic Kext logging\n   * Kernel -> Quirks -> PanicNoKextDump\n * AppleAHCIPort External Icon Patch1\n   * Kernel -> Quirks -> ExternalDiskIcons\n * SSD Trim Enabler\n   * Kernel -> Quirks -> ThirdPartyDrives\n * USB Port Limit Patches\n   * Kernel -> Quirks -> XhciPortLimit\n * FredWst DP/HDMI patch\n   * AppleALC + WhateverGreen\n * IOPCIFamily Patch\n   * Kernel -> Quirks -> IncreasePciBarSize\n * Disable board-ID check\n   * WhateverGreen\n * AppleHDA Patch\n   * AppleALC\n * IONVMe Patches\n   * Not required anymore on High Sierra and newer\n   * For power management on Mojave and newer: NVMeFix",normalizedContent:"# converting common kernel and kext patches\n\n\n# manually converting a patch\n\nwhen converting a kernel/kext patch into one for opencore, you'll need to remember a few things\n\n * infoplistpatch has no feature parity\n * matchos is replaced with minkernel and maxkernel\n * both kernel and kext patches go under kernel -> patch, and you use identifier to say whether it's the kernel or a specific kext you want to patch\n\nnow lets look at this example:\n\nkerneltopatch:\n\nkey          type      value\ncomment      string    cpuid_set_cpufamily - force cpufamily_intel_penryn\ndisabled     boolean   false\nmatchbuild   string    18g95,18g103\nmatchos      string    10.14.6\nfind         data      31db803d4869980006755c\nreplace      data      bbbc4fea78e95d00000090\n\nso to convert this patch, see below:\n\n * comment: available both on clover and opencore\n * disabled: opencore uses enabled instead\n * matchbuild: opencore uses minkernel and maxkernel, see below for more info\n * matchos: opencore uses minkernel and maxkernel, see below for more info\n * find: available both on clover and opencore\n * replace: available both on clover and opencore\n * maskfind: opencore uses mask instead\n * maskreplace: available both on clover and opencore\n\nso the above patch would become:\n\nkernel -> patch:\n\nkey           type      value\ncomment       string    cpuid_set_cpufamily - force cpufamily_intel_penryn\nenabled       boolean   true\nminkernel     string    18.7.0\nmaxkernel     string    18.7.0\nfind          data      31db803d4869980006755c\nreplace       data      bbbc4fea78e95d00000090\nidentifier    string    kernel\nlimit         number    0\ncount         number    0\nskip          number    0\nmask          data      \nreplacemask   data      \n\nfor min and maxkernel, we can use the below as for info, so 18g95 has the kernel version 18.7.0 and 18g103 has 18.7.0(both being the same kernel):\n\n * macos mojave: release history\n\nfor identifier, you'll either define kernel or the kext you want to patch(ie. com.apple.iokit.iographicsfamily )\n\nregarding limit, count and skip, they are set to 0 so they apply to all instances. mask and replacemask can be left as blank as clover doesn't support masking(until very recently but won't be covered here).\n\n\n# common patches in opencore and co\n\nlittle section mentioning common kernel and kexts patches that have been absorbed into opencore or other kexts. this list is not complete so any that may have been forgotten can be mentioned by opening a new issue. any help is much appreciated\n\n\n# kernel patches\n\nfor a full list of patches opencore supports, see /library/ocapplekernellib/commonpatches.c\n\ngeneral patches:\n\n * msr 0xe2 _xcpm_idle instant reboot (c) pike r. alpha\n   * kernel -> quirks -> applexcpmcfglock\n\nhedt specific patches:\n\nall of the following patches are inside the kernel -> quirk -> applexcpmextramsrs\n\n * _xcpm_bootstrap © pike r. alpha\n * xcpm_pkg_scope_msrs © pike r. alpha\n * _xcpm_smt_scope_msrs 1 © pike r. alpha\n * _xcpm_smt_scope_msrs #2 (c) pike r. alpha\n * _xcpm_core_scope_msrs © pike r. alpha\n * _xcpm_ performance_patch © pike r. alpha\n * xcpm msr patch 1 and 2 @pike r. alpha\n * /0x82d390/msr_pp0_policy 0x63a xcpm support patch 1 and 2 pike r. alpha\n\n\n# kext patches\n\n * disable panic kext logging\n   * kernel -> quirks -> panicnokextdump\n * appleahciport external icon patch1\n   * kernel -> quirks -> externaldiskicons\n * ssd trim enabler\n   * kernel -> quirks -> thirdpartydrives\n * usb port limit patches\n   * kernel -> quirks -> xhciportlimit\n * fredwst dp/hdmi patch\n   * applealc + whatevergreen\n * iopcifamily patch\n   * kernel -> quirks -> increasepcibarsize\n * disable board-id check\n   * whatevergreen\n * applehda patch\n   * applealc\n * ionvme patches\n   * not required anymore on high sierra and newer\n   * for power management on mojave and newer: nvmefix",charsets:{}},{title:"Broadwell-E",frontmatter:{},regularPath:"/config-HEDT/broadwell-e.html",relativePath:"config-HEDT/broadwell-e.md",key:"v-0ec291ed",path:"/config-HEDT/broadwell-e.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:98},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1327},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1338},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2871},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2956},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3208},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3316},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3453},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3208},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4477},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1338},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2871},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:4916},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1338},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7125},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8698},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8899},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2956},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3208},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12836},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13986},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3316},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14437},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15337},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17679},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17748},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17866},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3801},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1338},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2871},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23044},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23697},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3762},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20947},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12132},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27196},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27438},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27648},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28033},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3208},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25396},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29603},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:29923},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:7565},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3830}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Broadwell-E\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS    DESCRIPTION\nSSDT-PLUG         Allows for native CPU power management on Haswell and newer,\n                  see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX      Fixes both the embedded controller and USB power, see\n                  Getting Started With ACPI Guide for more details.\nSSDT-RTC0-RANGE   Required for all Big Sur users to ensure their RTC device is\n                  compatible, see Getting Started With ACPI Guide for more\n                  details.\nSSDT-UNC          Required for all Big Sur users to ensure their UNC devices\n                  are compatible, see Getting Started With ACPI Guide for more\n                  details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs and enabling power management on Haswell-E and Broadwell-E\n\n * Broadwell E:\n   \n   * Cpuid1Data: D4060300 00000000 00000000 00000000\n   * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\nMore in-depth Info\n * Cpuid1Data: D4060300 00000000 00000000 00000000\n   * Fake CPUID entry\n * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n   * Mask for fake CPUID\n * DummyPowerManagement: No\n   * Disables AppleIntelCPUPowerManagement, only required for AMD CPUs\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nAppleXcpmExtraMsrs        YES       \nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64, alternative is npci=0x3000 which\n              disables debugging related to gIOPCITunnelledKey in\n              addition. Required for when getting stuck on PCI Start\n              Configuration as there are IRQ conflicts relating to your\n              PCI lanes. Source\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. Due to NVRAM issues on X99, we'll be changing the following:\n\nQUIRK             ENABLED\nLegacyOverwrite   YES\nWriteFlash        NO\n\nMore in-depth Info\n\n * LegacyOverwrite: YES\n   \n   * Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM like X99\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: NO\n   \n   * Enables writing to flash memory for all added variables, not compatible with emulated NVRAM\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Broadwell-E example, we'll choose the iMacPro1,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #              iMacPro1,1 SMBIOS Info                 #\n#######################################################\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# broadwell-e\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts    description\nssdt-plug         allows for native cpu power management on haswell and newer,\n                  see getting started with acpi guide for more details.\nssdt-ec-usbx      fixes both the embedded controller and usb power, see\n                  getting started with acpi guide for more details.\nssdt-rtc0-range   required for all big sur users to ensure their rtc device is\n                  compatible, see getting started with acpi guide for more\n                  details.\nssdt-unc          required for all big sur users to ensure their unc devices\n                  are compatible, see getting started with acpi guide for more\n                  details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus and enabling power management on haswell-e and broadwell-e\n\n * broadwell e:\n   \n   * cpuid1data: d4060300 00000000 00000000 00000000\n   * cpuid1mask: ffffffff 00000000 00000000 00000000\n\nmore in-depth info\n * cpuid1data: d4060300 00000000 00000000 00000000\n   * fake cpuid entry\n * cpuid1mask: ffffffff 00000000 00000000 00000000\n   * mask for fake cpuid\n * dummypowermanagement: no\n   * disables appleintelcpupowermanagement, only required for amd cpus\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\napplexcpmextramsrs        yes       \ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64, alternative is npci=0x3000 which\n              disables debugging related to giopcitunnelledkey in\n              addition. required for when getting stuck on pci start\n              configuration as there are irq conflicts relating to your\n              pci lanes. source\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. due to nvram issues on x99, we'll be changing the following:\n\nquirk             enabled\nlegacyoverwrite   yes\nwriteflash        no\n\nmore in-depth info\n\n * legacyoverwrite: yes\n   \n   * permits overwriting firmware variables from nvram.plist, only needed for systems without native nvram like x99\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: no\n   \n   * enables writing to flash memory for all added variables, not compatible with emulated nvram\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this broadwell-e example, we'll choose the imacpro1,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #              imacpro1,1 smbios info                 #\n#######################################################\n\ntype:         imacpro1,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Haswell-E",frontmatter:{},regularPath:"/config-HEDT/haswell-e.html",relativePath:"config-HEDT/haswell-e.md",key:"v-cbc0a2a6",path:"/config-HEDT/haswell-e.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:96},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1325},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1336},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2869},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2954},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3206},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3314},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3451},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3206},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4475},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1336},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2869},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:4914},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1336},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7123},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8694},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8895},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2954},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3206},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12832},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13982},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3314},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14433},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15333},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17675},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17744},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17862},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3799},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1336},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2869},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23040},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23691},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3760},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20943},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12128},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27190},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27432},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27642},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28027},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3206},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25390},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29597},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:29917},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:7561},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3828}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Haswell-E\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS    DESCRIPTION\nSSDT-PLUG         Allows for native CPU power management on Haswell and newer,\n                  see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX      Fixes both the embedded controller and USB power, see\n                  Getting Started With ACPI Guide for more details.\nSSDT-RTC0-RANGE   Required for all Big Sur users to ensure their RTC device is\n                  compatible, see Getting Started With ACPI Guide for more\n                  details.\nSSDT-UNC          Required for all Big Sur users to ensure their UNC devices\n                  are compatible, see Getting Started With ACPI Guide for more\n                  details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs and enabling power management on Haswell-E and Broadwell-E\n\n * Haswell E:\n   \n   * Cpuid1Data: C3060300 00000000 00000000 00000000\n   * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\nMore in-depth Info\n * Cpuid1Data: C3060300 00000000 00000000 00000000\n   * Fake CPUID entry\n * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n   * Mask for fake CPUID\n * DummyPowerManagement: No\n   * Disables AppleIntelCPUPowerManagement, only required for AMD CPUs\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nAppleXcpmExtraMsrs        YES       \nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64, alternative is npci=0x3000 which\n              disables debugging related to gIOPCITunnelledKey in\n              addition. Required for when getting stuck on PCI Start\n              Configuration as there are IRQ conflicts relating to your\n              PCI lanes. Source\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. Due to NVRAM issues on X99, we'll be changing the following:\n\nQUIRK             ENABLED\nLegacyOverwrite   YES\nWriteFlash        NO\n\nMore in-depth Info\n\n * LegacyOverwrite: YES\n   \n   * Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM like X99\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: NO\n   \n   * Enables writing to flash memory for all added variables, not compatible with emulated NVRAM\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Haswell-E example, we'll choose the iMacPro1,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #              iMacPro1,1 SMBIOS Info                 #\n#######################################################\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# haswell-e\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts    description\nssdt-plug         allows for native cpu power management on haswell and newer,\n                  see getting started with acpi guide for more details.\nssdt-ec-usbx      fixes both the embedded controller and usb power, see\n                  getting started with acpi guide for more details.\nssdt-rtc0-range   required for all big sur users to ensure their rtc device is\n                  compatible, see getting started with acpi guide for more\n                  details.\nssdt-unc          required for all big sur users to ensure their unc devices\n                  are compatible, see getting started with acpi guide for more\n                  details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus and enabling power management on haswell-e and broadwell-e\n\n * haswell e:\n   \n   * cpuid1data: c3060300 00000000 00000000 00000000\n   * cpuid1mask: ffffffff 00000000 00000000 00000000\n\nmore in-depth info\n * cpuid1data: c3060300 00000000 00000000 00000000\n   * fake cpuid entry\n * cpuid1mask: ffffffff 00000000 00000000 00000000\n   * mask for fake cpuid\n * dummypowermanagement: no\n   * disables appleintelcpupowermanagement, only required for amd cpus\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\napplexcpmextramsrs        yes       \ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64, alternative is npci=0x3000 which\n              disables debugging related to giopcitunnelledkey in\n              addition. required for when getting stuck on pci start\n              configuration as there are irq conflicts relating to your\n              pci lanes. source\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. due to nvram issues on x99, we'll be changing the following:\n\nquirk             enabled\nlegacyoverwrite   yes\nwriteflash        no\n\nmore in-depth info\n\n * legacyoverwrite: yes\n   \n   * permits overwriting firmware variables from nvram.plist, only needed for systems without native nvram like x99\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: no\n   \n   * enables writing to flash memory for all added variables, not compatible with emulated nvram\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this haswell-e example, we'll choose the imacpro1,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #              imacpro1,1 smbios info                 #\n#######################################################\n\ntype:         imacpro1,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Sandy and Ivy Bridge-E",frontmatter:{},regularPath:"/config-HEDT/ivy-bridge-e.html",relativePath:"config-HEDT/ivy-bridge-e.md",key:"v-1e66a2f2",path:"/config-HEDT/ivy-bridge-e.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:219},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1448},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1459},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2635},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2720},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2972},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3080},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3217},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2972},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4241},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1459},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2635},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5224},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1459},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7433},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7569},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:7770},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2720},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2972},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:11616},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12766},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3080},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13217},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14117},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16459},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:16528},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:16646},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3565},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1459},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2635},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21225},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:21877},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3526},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19358},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10912},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25376},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25618},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25828},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26213},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2972},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23576},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27783},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28103},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8098},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3594}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Sandy and Ivy Bridge-E\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.9, Mavericks\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-UNC         Required for all Big Sur users to ensure their UNC devices\n                 are compatible, see Getting Started With ACPI Guide for more\n                 details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nPciRoot(0x0)/Pci(0x1,0x1)/Pci(0x0,0x0)\n\nThis entry relates to Intel's I350 controller found on many Intel and Supermicro server boards, and some Intel Server PCIe adapters. What we'll be doing here is tricking Apple's I210 driver into supporting our I350 network controller:\n\nKEY         TYPE   VALUE\ndevice-id   Data   33150000\n\n * Note: If your board doesn't have an onboard I350 NIC, there's no reason to add this entry.\n * Note 2: If you get a kernel panic on the AppleIntelI210Ethernet kext, or not all of the adapters are showing up, you may need to edit or add additional PciRoot properties for each adapter.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs, thankfully Sandy and Ivy bridge E are officially supported so no patching necessary.\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Ivy Bridge-E example, we'll choose the MacPro6,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro6,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro6,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# sandy and ivy bridge-e\n\nsupport                 version\ninitial macos support   os x 10.9, mavericks\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-unc         required for all big sur users to ensure their unc devices\n                 are compatible, see getting started with acpi guide for more\n                 details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\npciroot(0x0)/pci(0x1,0x1)/pci(0x0,0x0)\n\nthis entry relates to intel's i350 controller found on many intel and supermicro server boards, and some intel server pcie adapters. what we'll be doing here is tricking apple's i210 driver into supporting our i350 network controller:\n\nkey         type   value\ndevice-id   data   33150000\n\n * note: if your board doesn't have an onboard i350 nic, there's no reason to add this entry.\n * note 2: if you get a kernel panic on the appleinteli210ethernet kext, or not all of the adapters are showing up, you may need to edit or add additional pciroot properties for each adapter.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus, thankfully sandy and ivy bridge e are officially supported so no patching necessary.\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this ivy bridge-e example, we'll choose the macpro6,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro6,1 smbios info                 #\n#######################################################\n\ntype:         macpro6,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Nehalem and Westmere",frontmatter:{},regularPath:"/config-HEDT/nehalem.html",relativePath:"config-HEDT/nehalem.md",key:"v-1596dced",path:"/config-HEDT/nehalem.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:217},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1446},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1457},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2453},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2538},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2790},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:2898},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3058},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2790},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4868},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1457},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2453},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5307},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1457},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7516},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7636},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:7837},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2538},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2790},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:11683},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12833},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:2898},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13284},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14184},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16526},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:16595},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:16713},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3978},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1457},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2453},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21292},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22023},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:2915},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19425},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10979},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25528},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25770},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25980},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26365},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2790},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23722},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27935},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28255},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8165},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3513}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Nehalem and Westmere\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.5.6, Leopard\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control on UEFI Boards\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register on UEFI platforms\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses on UEFI boards\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs, thankfully Nehalem is officially supported so no patching necessary.\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Nehalem example, we have a few SMBIOS to choose from:\n\nSMBIOS      HARDWARE\nMacPro5,1   Mojave and older\nMacPro6,1   Catalina and newer\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro5,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro5,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# nehalem and westmere\n\nsupport                 version\ninitial macos support   os x 10.5.6, leopard\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control on uefi boards\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register on uefi platforms\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses on uefi boards\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus, thankfully nehalem is officially supported so no patching necessary.\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this nehalem example, we have a few smbios to choose from:\n\nsmbios      hardware\nmacpro5,1   mojave and older\nmacpro6,1   catalina and newer\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro5,1 smbios info                 #\n#######################################################\n\ntype:         macpro5,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Skylake-X/W and Cascade Lake-X/W",frontmatter:{},regularPath:"/config-HEDT/skylake-x.html",relativePath:"config-HEDT/skylake-x.md",key:"v-774fae4d",path:"/config-HEDT/skylake-x.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:121},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1350},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1361},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2795},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2880},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3132},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3240},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3377},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3132},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5894},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1361},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2795},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6333},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1361},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8542},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8732},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8933},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2880},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3132},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12209},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13359},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3240},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13810},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14710},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17052},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17121},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17239},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4055},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1361},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2795},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21818},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22469},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4016},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19951},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11505},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25968},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26210},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26420},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26805},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3132},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24168},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28176},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28496},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9261},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3713}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Skylake-X/W and Cascade Lake-X/W\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.13, High Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS    DESCRIPTION\nSSDT-PLUG         Allows for native CPU power management on Haswell and newer,\n                  see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX      Fixes both the embedded controller and USB power, see\n                  Getting Started With ACPI Guide for more details.\nSSDT-RTC0-RANGE   Required for enabling the legacy RTC clock in macOS, this is\n                  also required for all Big Sur users to ensure their RTC\n                  device is compatible. See Getting Started With ACPI Guide\n                  for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         YES       \nEnableWriteUnprotector   NO        \nRebuildAppleMemoryMap    YES       \nSetupVirtualMap          YES       Note newer Asus BIOS(v3006+) will not boot with this quirk\n                                   enabled\nSyncRuntimePermissions   YES       \n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffee Lake\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, shouldn't be needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this\n   * Note newer Asus BIOS(v3006+) will not boot with this quirk enabled\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs, thankfully both Skylake-X and Cascade Lake-X have the same CPU ID as Xeon W chips which ship in the iMac Pro. So here we'll leave it blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Skylake-X example, we'll choose the iMacPro1,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #              iMacPro1,1 SMBIOS Info                 #\n#######################################################\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# skylake-x/w and cascade lake-x/w\n\nsupport                 version\ninitial macos support   macos 10.13, high sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts    description\nssdt-plug         allows for native cpu power management on haswell and newer,\n                  see getting started with acpi guide for more details.\nssdt-ec-usbx      fixes both the embedded controller and usb power, see\n                  getting started with acpi guide for more details.\nssdt-rtc0-range   required for enabling the legacy rtc clock in macos, this is\n                  also required for all big sur users to ensure their rtc\n                  device is compatible. see getting started with acpi guide\n                  for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be passthrough to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         yes       \nenablewriteunprotector   no        \nrebuildapplememorymap    yes       \nsetupvirtualmap          yes       note newer asus bios(v3006+) will not boot with this quirk\n                                   enabled\nsyncruntimepermissions   yes       \n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390. requires protectuefiservices as well on icelake and z390 coffee lake\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, shouldn't be needed on skylake and newer. some firmware like gigabyte may still require it, and will kernel panic without this\n   * note newer asus bios(v3006+) will not boot with this quirk enabled\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus, thankfully both skylake-x and cascade lake-x have the same cpu id as xeon w chips which ship in the imac pro. so here we'll leave it blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this skylake-x example, we'll choose the imacpro1,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #              imacpro1,1 smbios info                 #\n#######################################################\n\ntype:         imacpro1,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Clarksfield and Arrandale",frontmatter:{},regularPath:"/config-laptop.plist/arrandale.html",relativePath:"config-laptop.plist/arrandale.md",key:"v-0dcb7ce6",path:"/config-laptop.plist/arrandale.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:253},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1482},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1493},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2845},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2930},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3344},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3452},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3612},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3344},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5377},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1493},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2845},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6540},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1493},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8749},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8891},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9092},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2930},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3344},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12457},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13607},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3452},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14058},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14958},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17300},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17369},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17487},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4532},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1493},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2845},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21408},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22303},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:244},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:24312},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11753},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25868},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26110},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26334},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26719},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3344},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24002},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28537},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:28857},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:29036},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9420},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3214}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Clarksfield and Arrandale\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.3, Snow Leopard\nLast Supported OS       macOS 10.13, High Sierra\nNote                    Most Clarksfield and Arrandale boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-XOSI        Makes all _OSI calls specific to Windows work for macOS\n                 (Darwin) Identifier. This may help enabling some features\n                 like XHCI and others.\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control;\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, simply add the values below to the PciRoot(0x0)/Pci(0x2,0x0) entry:\n\nPROPERTY                   TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-singlelink     Data   01000000\n\n * Note: Apple's Iron Lake drivers only support LVDS displays and not eDP\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Arrandale example, we'll chose the MacBookPro6,1 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS          CPU TYPE                  DISPLAY SIZE\nMacBookPro6,1   Quad Core 45W(High End)   17\"\nMacBookPro6,2   Quad Core 45W(Low End)    15\"\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #             MacBookPro6,1 SMBIOS Info               #\n#######################################################\n\nType:         MacBookPro6,1\nSerial:       C02G3ZYFDC79\nBoard Serial: C021291014NDCMVCB\nSmUUID:       C8A54C45-8E99-440A-9A52-1B62A0074FA5\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\nThese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled) (or Legacy Support, or Hybrid Boot)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly, if available)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x (Virtualization Support)\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop clarksfield and arrandale\n\nsupport                 version\ninitial macos support   os x 10.6.3, snow leopard\nlast supported os       macos 10.13, high sierra\nnote                    most clarksfield and arrandale boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-xosi        makes all _osi calls specific to windows work for macos\n                 (darwin) identifier. this may help enabling some features\n                 like xhci and others.\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control;\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, simply add the values below to the pciroot(0x0)/pci(0x2,0x0) entry:\n\nproperty                   type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-singlelink     data   01000000\n\n * note: apple's iron lake drivers only support lvds displays and not edp\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this arrandale example, we'll chose the macbookpro6,1 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios          cpu type                  display size\nmacbookpro6,1   quad core 45w(high end)   17\"\nmacbookpro6,2   quad core 45w(low end)    15\"\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #             macbookpro6,1 smbios info               #\n#######################################################\n\ntype:         macbookpro6,1\nserial:       c02g3zyfdc79\nboard serial: c021291014ndcmvcb\nsmuuid:       c8a54c45-8e99-440a-9a52-1b62a0074fa5\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\nthese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled) (or legacy support, or hybrid boot)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly, if available)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x (virtualization support)\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Broadwell",frontmatter:{},regularPath:"/config-laptop.plist/broadwell.html",relativePath:"config-laptop.plist/broadwell.md",key:"v-56b90fe6",path:"/config-laptop.plist/broadwell.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:213},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1442},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1453},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2976},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3061},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3521},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3629},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3766},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3521},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4791},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1453},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2976},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7192},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1453},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9401},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9543},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9744},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3061},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3521},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13163},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:14313},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3629},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14764},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15664},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18006},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18075},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:18193},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4115},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1453},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2976},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22114},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23774},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4076},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:25783},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12459},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27273},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27515},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27725},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28110},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3521},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25473},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29928},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:30248},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30427},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10215},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3391}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Broadwell\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.10, Yosemite\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n06002616              Laptop   Recommended value for Broadwell laptops\n02001616              NUC      Recommended value for Broadwell NUCs\n\n# Configuration Notes\n\n * For HD 5600 you need device-id faked to 26160000:\n\nKEY         TYPE   VALUE\ndevice-id   data   26160000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 96MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Broadwell example, we chose the MacBookPro12,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                               DISPLAY SIZE\nMacBook8,1       Dual Core 7W(Low End)     iGPU: HD 5300                          12\"\nMacBookAir7,1    Dual Core 15W             iGPU: HD 6000                          11\"\nMacBookAir7,2    Dual Core 15W             iGPU: HD 6000                          13\"\nMacBookPro12,1   Dual Core 28W(High End)   iGPU: Iris 6100                        13\"\nMacBookPro11,2   Quad Core 45W             iGPU: Iris Pro 5200                    15\"\nMacBookPro11,3   Quad Core 45W             iGPU: Iris Pro 5200 + dGPU: GT 750M    15\"\nMacBookPro11,4   Quad Core 45W             iGPU: Iris Pro 5200                    15\"\nMacBookPro11,5   Quad Core 45W             iGPU: Iris Pro 5200 + dGPU: R9 M370X   15\"\niMac16,1         NUC Systems               HD 6000/Iris Pro 6200                  N/A\n\nNote: MacBook8,1 was dropped in macOS Monterey. If running macOS Monterey, select another model.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro12,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro12,1\nSerial:       C02M9SYJFY10\nBoard Serial: C02408101J9G2Y7A8\nSmUUID:       7B227BEC-660D-405F-8E60-411B3E4EF055\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop broadwell\n\nsupport                 version\ninitial macos support   os x 10.10, yosemite\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n06002616              laptop   recommended value for broadwell laptops\n02001616              nuc      recommended value for broadwell nucs\n\n# configuration notes\n\n * for hd 5600 you need device-id faked to 26160000:\n\nkey         type   value\ndevice-id   data   26160000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 96mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this broadwell example, we chose the macbookpro12,1 smbios. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                               display size\nmacbook8,1       dual core 7w(low end)     igpu: hd 5300                          12\"\nmacbookair7,1    dual core 15w             igpu: hd 6000                          11\"\nmacbookair7,2    dual core 15w             igpu: hd 6000                          13\"\nmacbookpro12,1   dual core 28w(high end)   igpu: iris 6100                        13\"\nmacbookpro11,2   quad core 45w             igpu: iris pro 5200                    15\"\nmacbookpro11,3   quad core 45w             igpu: iris pro 5200 + dgpu: gt 750m    15\"\nmacbookpro11,4   quad core 45w             igpu: iris pro 5200                    15\"\nmacbookpro11,5   quad core 45w             igpu: iris pro 5200 + dgpu: r9 m370x   15\"\nimac16,1         nuc systems               hd 6000/iris pro 6200                  n/a\n\nnote: macbook8,1 was dropped in macos monterey. if running macos monterey, select another model.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro12,1 smbios info            #\n#######################################################\n\ntype:         macbookpro12,1\nserial:       c02m9syjfy10\nboard serial: c02408101j9g2y7a8\nsmuuid:       7b227bec-660d-405f-8e60-411b3e4ef055\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Coffee Lake Plus and Comet Lake",frontmatter:{},regularPath:"/config-laptop.plist/coffee-lake-plus.html",relativePath:"config-laptop.plist/coffee-lake-plus.md",key:"v-b1677592",path:"/config-laptop.plist/coffee-lake-plus.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:188},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1417},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1428},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3776},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3861},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4321},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4429},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4566},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4321},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:7046},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1428},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3776},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:9899},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1428},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:12108},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:13162},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:13363},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3861},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4321},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:16639},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:17789},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4429},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:18240},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:19140},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:21482},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:21551},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:21669},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3151},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1428},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3776},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:25590},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:26998},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3112},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:29007},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:15935},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:30497},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:30739},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:30949},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:31334},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4321},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:28697},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:32956},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:33276},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:33586},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:13691},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:4191}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Coffee Lake Plus and Comet Lake\n\nSUPPORT                      VERSION\nInitial macOS Support(CFL)   macOS 10.13, High Sierra\nInitial macOS Support(CML)   macOS 10.15, Catalina\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-AWAC        This is the 300 series RTC patch, required for most B360,\n                 B365, H310, H370, Z390 and some Z370 boards which prevent\n                 systems from booting macOS. The alternative is SSDT-RTC0 for\n                 when AWAC SSDT is incompatible due to missing the Legacy RTC\n                 clock, to check whether you need it and which to use please\n                 see Getting started with ACPI page.\nSSDT-PMC         So true 300 series motherboards(non-Z370) don't declare the\n                 FW chip as MMIO in ACPI and so XNU ignores the MMIO region\n                 declared by the UEFI memory map. This SSDT brings back NVRAM\n                 support. Note that 10th gen CPUs do not need this. See\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be pass-through to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED\nDevirtualiseMmio         YES\nEnableWriteUnprotector   NO\nProtectUefiServices      YES\nRebuildAppleMemoryMap    YES\nSyncRuntimePermissions   YES\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffee Lake\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProtectUefiServices: YES\n   * Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems'\n   * If on Z390, enable this quirk\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, shouldn't be needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n0900A53E              Laptop   Recommended value for UHD 630\n00009B3E              Laptop   Recommended value for UHD 620\n07009B3E              NUC      Recommended value for UHD 620/630\n0000A53E              NUC      Recommended value for UHD 655\n\n# Configuration Notes\n\n * For UHD 630 you likely do not need to fake the device-id as it is already 0x3E9B. If it's anything else, you may use device-id=9B3E0000:\n   * You can check under Device Manager in Windows by bring up the iGPU, opening properties, selecting details, and clicking Hardware IDs.\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * A UHD 620 in a Comet Lake CPU requires device-id=9B3E0000:\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons. For those with Coffee Lake Plus you can skip this section, but for those with Comet Lake CPUs see below\n\nComet Lake info\n\nComet Lake U62 CPUs require a spoof to Comet Lake U42 as macOS does not support these CPUs. You can check Device Manager in Windows to see if you have a Comet Lake U62 CPU:\n\n 1. Go to the \"Processors\" section\n 2. Double click on one of the CPUs\n 3. Click on the \"Details\" tab\n 4. Click on the \"Hardware ID\" field\n 5. If it says ACPI\\GenuineIntel_-_Intel64_Family_6_Model_166, you need to spoof:\n\n * Cpuid1Data: EC060800000000000000000000000000\n * Cpuid1Mask: FFFFFFFF000000000000000000000000\n\nOn Linux, you can use lscpu | grep \"Model:\". If the model is 166, you need to spoof.\n\nAnother way to check is with the OpenCore debug log:\n\n> 00:023 00:005 OCCPU: Found Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz\n> \n> 00:028 00:005 OCCPU: Signature A0660 Stepping 0 Model A6 Family 6 Type 0 ExtModel A ExtFamily 0 uCode C6\n\nIf the model is A6, you need to spoof.\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Coffee Lake Plus example, we'll chose the MacBookPro16,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows(note that the below SMBIOS require macOS 10.15, Catalina):\n\nSMBIOS           CPU TYPE             GPU TYPE                           DISPLAY SIZE   TOUCH ID\nMacBookPro16,1   Hexa/Octa Core 45W   iGPU: UHD 630 + dGPU: 5300/5500M   15\"            Yes\nMacBookPro16,3   Quad Core 15W        iGPU: Iris 645                     13\"            Yes\nMacBookPro16,4   Hexa/Octa Core 45W   iGPU: UHD 630 + dGPU: 5600M        15\"            Yes\nMacmini8,1       NUC Systems          HD 6000/Iris Pro 6200              N/A            No\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro16,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro16,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\n * Note: MacSerial currently does not support Linux, so you must grab a Windows or macOS machine to generate the MacBookPro16,2+ values\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop coffee lake plus and comet lake\n\nsupport                      version\ninitial macos support(cfl)   macos 10.13, high sierra\ninitial macos support(cml)   macos 10.15, catalina\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-awac        this is the 300 series rtc patch, required for most b360,\n                 b365, h310, h370, z390 and some z370 boards which prevent\n                 systems from booting macos. the alternative is ssdt-rtc0 for\n                 when awac ssdt is incompatible due to missing the legacy rtc\n                 clock, to check whether you need it and which to use please\n                 see getting started with acpi page.\nssdt-pmc         so true 300 series motherboards(non-z370) don't declare the\n                 fw chip as mmio in acpi and so xnu ignores the mmio region\n                 declared by the uefi memory map. this ssdt brings back nvram\n                 support. note that 10th gen cpus do not need this. see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be pass-through to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled\ndevirtualisemmio         yes\nenablewriteunprotector   no\nprotectuefiservices      yes\nrebuildapplememorymap    yes\nsyncruntimepermissions   yes\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390. requires protectuefiservices as well on icelake and z390 coffee lake\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * protectuefiservices: yes\n   * protects uefi services from being overridden by the firmware, mainly relevant for vms, icelake and z390 systems'\n   * if on z390, enable this quirk\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, shouldn't be needed on skylake and newer. some firmware like gigabyte may still require it, and will kernel panic without this\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n0900a53e              laptop   recommended value for uhd 630\n00009b3e              laptop   recommended value for uhd 620\n07009b3e              nuc      recommended value for uhd 620/630\n0000a53e              nuc      recommended value for uhd 655\n\n# configuration notes\n\n * for uhd 630 you likely do not need to fake the device-id as it is already 0x3e9b. if it's anything else, you may use device-id=9b3e0000:\n   * you can check under device manager in windows by bring up the igpu, opening properties, selecting details, and clicking hardware ids.\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * a uhd 620 in a comet lake cpu requires device-id=9b3e0000:\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons. for those with coffee lake plus you can skip this section, but for those with comet lake cpus see below\n\ncomet lake info\n\ncomet lake u62 cpus require a spoof to comet lake u42 as macos does not support these cpus. you can check device manager in windows to see if you have a comet lake u62 cpu:\n\n 1. go to the \"processors\" section\n 2. double click on one of the cpus\n 3. click on the \"details\" tab\n 4. click on the \"hardware id\" field\n 5. if it says acpi\\genuineintel_-_intel64_family_6_model_166, you need to spoof:\n\n * cpuid1data: ec060800000000000000000000000000\n * cpuid1mask: ffffffff000000000000000000000000\n\non linux, you can use lscpu | grep \"model:\". if the model is 166, you need to spoof.\n\nanother way to check is with the opencore debug log:\n\n> 00:023 00:005 occpu: found intel(r) core(tm) i5-10210u cpu @ 1.60ghz\n> \n> 00:028 00:005 occpu: signature a0660 stepping 0 model a6 family 6 type 0 extmodel a extfamily 0 ucode c6\n\nif the model is a6, you need to spoof.\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this coffee lake plus example, we'll chose the macbookpro16,1 smbios - this is done intentionally for compatibility's sake. the breakdown is as follows(note that the below smbios require macos 10.15, catalina):\n\nsmbios           cpu type             gpu type                           display size   touch id\nmacbookpro16,1   hexa/octa core 45w   igpu: uhd 630 + dgpu: 5300/5500m   15\"            yes\nmacbookpro16,3   quad core 15w        igpu: iris 645                     13\"            yes\nmacbookpro16,4   hexa/octa core 45w   igpu: uhd 630 + dgpu: 5600m        15\"            yes\nmacmini8,1       nuc systems          hd 6000/iris pro 6200              n/a            no\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro16,1 smbios info            #\n#######################################################\n\ntype:         macbookpro16,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\n * note: macserial currently does not support linux, so you must grab a windows or macos machine to generate the macbookpro16,2+ values\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{cjk:!0}},{title:"Laptop Coffee Lake and Whiskey Lake",frontmatter:{},regularPath:"/config-laptop.plist/coffee-lake.html",relativePath:"config-laptop.plist/coffee-lake.md",key:"v-590069e6",path:"/config-laptop.plist/coffee-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:215},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1444},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3433},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3518},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3978},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4086},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4223},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3978},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6111},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3433},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:8965},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1455},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:11174},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:11316},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:11517},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3518},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3978},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14793},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15943},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4086},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16394},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17294},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19636},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19705},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19823},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4702},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3433},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23744},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:25074},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4663},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:27083},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:14089},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:28573},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:28815},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:29025},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29410},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3978},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:26773},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:31032},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:31352},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:31662},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:11845},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3848}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Coffee Lake and Whiskey Lake\n\nSUPPORT                                VERSION\nInitial macOS Support (Coffee Lake)    macOS 10.13, High Sierra\nInitial macOS Support (Whiskey Lake)   macOS 10.14.1, Mojave\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-AWAC        This is the 300 series RTC patch, required for most B360,\n                 B365, H310, H370, Z390 and some Z370 boards which prevent\n                 systems from booting macOS. The alternative is SSDT-RTC0 for\n                 when AWAC SSDT is incompatible due to missing the Legacy RTC\n                 clock, to check whether you need it and which to use please\n                 see Getting started with ACPI page.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED\nEnableWriteUnprotector   NO\nRebuildAppleMemoryMap    YES\nSyncRuntimePermissions   YES\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n0900A53E              Laptop   Recommended value for UHD 630\n00009B3E              Laptop   Recommended value for UHD 620\n07009B3E              NUC      Recommended value for UHD 620/630\n0000A53E              NUC      Recommended value for UHD 655\n\n# Configuration Notes\n\n * For UHD 630 you likely do not need to fake the device-id as it is already 0x3E9B. If it's anything else, you may use device-id=9B3E0000:\n   * You can check under Device Manager in Windows by bring up the iGPU, opening properties, selecting details, and clicking Hardware IDs.\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * A UHD 620 in a Coffee Lake CPU requires device-id=9B3E0000:\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Coffee Lake example, we'll chose the MacBookPro15,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows:\n\nSMBIOS           CPU TYPE        GPU TYPE                                     DISPLAY SIZE   TOUCH ID\nMacBookPro15,1   Hexa Core 45W   iGPU: UHD 630 + dGPU: Radeon Pro 555X/560X   15\"            Yes\nMacBookPro15,2   Quad Core 15W   iGPU: Iris 655                               13\"            Yes\nMacBookPro15,3   Hexa Core 45W   iGPU: UHD 630 + dGPU: Vega 16/20             15\"            Yes\nMacBookPro15,4   Quad Core 15W   iGPU: Iris 645                               13\"            Yes\nMacmini8,1       NUC Systems     HD 6000/Iris Pro 6200                        N/A            No\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro15,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro15,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop coffee lake and whiskey lake\n\nsupport                                version\ninitial macos support (coffee lake)    macos 10.13, high sierra\ninitial macos support (whiskey lake)   macos 10.14.1, mojave\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-awac        this is the 300 series rtc patch, required for most b360,\n                 b365, h310, h370, z390 and some z370 boards which prevent\n                 systems from booting macos. the alternative is ssdt-rtc0 for\n                 when awac ssdt is incompatible due to missing the legacy rtc\n                 clock, to check whether you need it and which to use please\n                 see getting started with acpi page.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled\nenablewriteunprotector   no\nrebuildapplememorymap    yes\nsyncruntimepermissions   yes\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n0900a53e              laptop   recommended value for uhd 630\n00009b3e              laptop   recommended value for uhd 620\n07009b3e              nuc      recommended value for uhd 620/630\n0000a53e              nuc      recommended value for uhd 655\n\n# configuration notes\n\n * for uhd 630 you likely do not need to fake the device-id as it is already 0x3e9b. if it's anything else, you may use device-id=9b3e0000:\n   * you can check under device manager in windows by bring up the igpu, opening properties, selecting details, and clicking hardware ids.\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * a uhd 620 in a coffee lake cpu requires device-id=9b3e0000:\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this coffee lake example, we'll chose the macbookpro15,1 smbios - this is done intentionally for compatibility's sake. the breakdown is as follows:\n\nsmbios           cpu type        gpu type                                     display size   touch id\nmacbookpro15,1   hexa core 45w   igpu: uhd 630 + dgpu: radeon pro 555x/560x   15\"            yes\nmacbookpro15,2   quad core 15w   igpu: iris 655                               13\"            yes\nmacbookpro15,3   hexa core 45w   igpu: uhd 630 + dgpu: vega 16/20             15\"            yes\nmacbookpro15,4   quad core 15w   igpu: iris 645                               13\"            yes\nmacmini8,1       nuc systems     hd 6000/iris pro 6200                        n/a            no\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro15,1 smbios info            #\n#######################################################\n\ntype:         macbookpro15,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Haswell",frontmatter:{},regularPath:"/config-laptop.plist/haswell.html",relativePath:"config-laptop.plist/haswell.md",key:"v-0f014c0d",path:"/config-laptop.plist/haswell.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:215},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1444},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2978},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3063},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3523},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3631},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3768},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3523},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4793},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2978},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7345},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1455},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9554},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9696},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9897},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3063},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3523},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13316},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:14466},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3631},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14917},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15817},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18159},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18228},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:18346},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4117},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2978},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22267},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23859},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4078},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:25873},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12612},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27363},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27605},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27815},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28200},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3523},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25563},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30018},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:30338},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30517},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10368},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3393}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Haswell\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.8, Mountain Lion\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n0500260A              Laptop   To be used usually with HD 5000, HD 5100 and HD 5200\n0600260A              Laptop   To be used usually with HD 4200, HD 4400 and HD 4600, you\n                               must use a device-id(see below)\n0300220D              NUC      To be used usually with all Haswell NUCs, HD 4200/4400/4600\n                               must use a device-id(see below)\n\n# Configuration Notes\n\nIn addition to the AAPL,ig-platform-id, you'll want to add the cursor byte size patch from 6MB (00006000) to 9MB because of some glitches:\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-cursormem      Data   00009000\n\nSpecial note for HD 4200, HD 4400 and HD 4600:\n\nYou will also require a device-id spoof to be supported:\n\nKEY         TYPE   VALUE\ndevice-id   Data   12040000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Haswell example, we chose the MacBookPro11,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE        GPU TYPE                               DISPLAY SIZE\nMacBookAir6,1    Dual Core 15W   iGPU: HD 5000                          11\"\nMacBookAir6,2    Dual Core 15W   iGPU: HD 5000                          13\"\nMacBookPro11,1   Dual Core 28W   iGPU: Iris 5100                        13\"\nMacBookPro11,2   Quad Core 45W   iGPU: Iris Pro 5200                    15\"\nMacBookPro11,3   Quad Core 45W   iGPU: Iris Pro 5200 + dGPU: GT 750M    15\"\nMacBookPro11,4   Quad Core 45W   iGPU: Iris Pro 5200                    15\"\nMacBookPro11,5   Quad Core 45W   iGPU: Iris Pro 5200 + dGPU: R9 M370X   15\"\nMacmini7,1       NUC Systems     HD 5000/Iris 5100                      N/A\n\nNote: For macOS Monterey, only the following SMBIOS are supported\n\nMonterey SMBIOS table\n\nSMBIOS           HARDWARE\nMacBookPro11,4   Quad Core 45W\nMacBookPro11,5   Quad Core 45W\nMacmini7,1       NUC Systems\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro11,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro11,1\nSerial:       C02M9SYJFY10\nBoard Serial: C02408101J9G2Y7A8\nSmUUID:       7B227BEC-660D-405F-8E60-411B3E4EF055\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop haswell\n\nsupport                 version\ninitial macos support   os x 10.8, mountain lion\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n0500260a              laptop   to be used usually with hd 5000, hd 5100 and hd 5200\n0600260a              laptop   to be used usually with hd 4200, hd 4400 and hd 4600, you\n                               must use a device-id(see below)\n0300220d              nuc      to be used usually with all haswell nucs, hd 4200/4400/4600\n                               must use a device-id(see below)\n\n# configuration notes\n\nin addition to the aapl,ig-platform-id, you'll want to add the cursor byte size patch from 6mb (00006000) to 9mb because of some glitches:\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-cursormem      data   00009000\n\nspecial note for hd 4200, hd 4400 and hd 4600:\n\nyou will also require a device-id spoof to be supported:\n\nkey         type   value\ndevice-id   data   12040000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this haswell example, we chose the macbookpro11,1 smbios. the typical breakdown is as follows:\n\nsmbios           cpu type        gpu type                               display size\nmacbookair6,1    dual core 15w   igpu: hd 5000                          11\"\nmacbookair6,2    dual core 15w   igpu: hd 5000                          13\"\nmacbookpro11,1   dual core 28w   igpu: iris 5100                        13\"\nmacbookpro11,2   quad core 45w   igpu: iris pro 5200                    15\"\nmacbookpro11,3   quad core 45w   igpu: iris pro 5200 + dgpu: gt 750m    15\"\nmacbookpro11,4   quad core 45w   igpu: iris pro 5200                    15\"\nmacbookpro11,5   quad core 45w   igpu: iris pro 5200 + dgpu: r9 m370x   15\"\nmacmini7,1       nuc systems     hd 5000/iris 5100                      n/a\n\nnote: for macos monterey, only the following smbios are supported\n\nmonterey smbios table\n\nsmbios           hardware\nmacbookpro11,4   quad core 45w\nmacbookpro11,5   quad core 45w\nmacmini7,1       nuc systems\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro11,1 smbios info            #\n#######################################################\n\ntype:         macbookpro11,1\nserial:       c02m9syjfy10\nboard serial: c02408101j9g2y7a8\nsmuuid:       7b227bec-660d-405f-8e60-411b3e4ef055\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Icelake",frontmatter:{},regularPath:"/config-laptop.plist/icelake.html",relativePath:"config-laptop.plist/icelake.md",key:"v-1b3d6a4d",path:"/config-laptop.plist/icelake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:100},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1329},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3392},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3477},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3937},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4045},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4182},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3937},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6613},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3392},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:8757},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1340},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:10966},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:11108},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:11309},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3477},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3937},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14585},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15735},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4045},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16186},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17086},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19428},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19497},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19615},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4742},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3392},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23811},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24900},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4703},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:26909},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:13881},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:28399},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:28641},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28851},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29236},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3937},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:26599},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30858},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:31178},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:31464},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:11637},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3807}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Icelake\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.15, Catalina\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-AWAC        This is the 300 series RTC patch, required for most B360,\n                 B365, H310, H370, Z390 and some Z370 boards which prevent\n                 systems from booting macOS. The alternative is SSDT-RTC0 for\n                 when AWAC SSDT is incompatible due to missing the Legacy RTC\n                 clock, to check whether you need it and which to use please\n                 see Getting started with ACPI page.\nSSDT-RHUB        Needed to fix Root-device errors on many Icelake laptops\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be pass-through to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED\nDevirtualiseMmio         YES\nEnableWriteUnprotector   NO\nProtectUefiServices      YES\nRebuildAppleMemoryMap    YES\nSetupVirtualMap          NO\nSyncRuntimePermissions   YES\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffee Lake\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProtectUefiServices: YES\n   * Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems'\n   * If on Z390, enable this quirk\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: NO\n   * Fixes SetVirtualAddresses calls to virtual addresses, can cause early kernel panics on Ice Lake machines\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Port Count\n   * The number of displays supported\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   PORT COUNT   COMMENT\n0000528A              6            Recommended G4/G7 value\n\n# Configuration Notes\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 256MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE     VALUE\nframebuffer-patch-enable   Number   1\nframebuffer-stolenmem      Data     00003001\nframebuffer-fbmem          Data     00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n-igfxcdc      Resolves Clock ID based kernel panics on Icelake CPUs,\n              recommended for all users\n-igfxdvmt     Similar to the above, resolves issue with some firmwares\n              having 60MB reserved for iGPU memory which can cause kernel\n              panics\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this IceLake example, we chose the MacBookAir9,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows:\n\nSMBIOS           CPU TYPE             GPU TYPE      DISPLAY SIZE   TOUCH ID\nMacBookAir9,1    Dual/Quad Core 12W   iGPU: G4/G7   13\"            Yes\nMacBookPro16,2   Quad Core 28W        iGPU: G4/G7   13\"            Yes\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookAir9,1 SMBIOS Info             #\n#######################################################\n\nType:         MacBookAir9,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\n * Note: MacSerial currently does not support Linux, so you must grab a Windows or macOS machine to generate the MacBookPro16,2 values\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 256MB\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop icelake\n\nsupport                 version\ninitial macos support   macos 10.15, catalina\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-awac        this is the 300 series rtc patch, required for most b360,\n                 b365, h310, h370, z390 and some z370 boards which prevent\n                 systems from booting macos. the alternative is ssdt-rtc0 for\n                 when awac ssdt is incompatible due to missing the legacy rtc\n                 clock, to check whether you need it and which to use please\n                 see getting started with acpi page.\nssdt-rhub        needed to fix root-device errors on many icelake laptops\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be pass-through to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled\ndevirtualisemmio         yes\nenablewriteunprotector   no\nprotectuefiservices      yes\nrebuildapplememorymap    yes\nsetupvirtualmap          no\nsyncruntimepermissions   yes\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390. requires protectuefiservices as well on icelake and z390 coffee lake\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * protectuefiservices: yes\n   * protects uefi services from being overridden by the firmware, mainly relevant for vms, icelake and z390 systems'\n   * if on z390, enable this quirk\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: no\n   * fixes setvirtualaddresses calls to virtual addresses, can cause early kernel panics on ice lake machines\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * port count\n   * the number of displays supported\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   port count   comment\n0000528a              6            recommended g4/g7 value\n\n# configuration notes\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 256mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type     value\nframebuffer-patch-enable   number   1\nframebuffer-stolenmem      data     00003001\nframebuffer-fbmem          data     00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n-igfxcdc      resolves clock id based kernel panics on icelake cpus,\n              recommended for all users\n-igfxdvmt     similar to the above, resolves issue with some firmwares\n              having 60mb reserved for igpu memory which can cause kernel\n              panics\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this icelake example, we chose the macbookair9,1 smbios - this is done intentionally for compatibility's sake. the breakdown is as follows:\n\nsmbios           cpu type             gpu type      display size   touch id\nmacbookair9,1    dual/quad core 12w   igpu: g4/g7   13\"            yes\nmacbookpro16,2   quad core 28w        igpu: g4/g7   13\"            yes\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookair9,1 smbios info             #\n#######################################################\n\ntype:         macbookair9,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\n * note: macserial currently does not support linux, so you must grab a windows or macos machine to generate the macbookpro16,2 values\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 256mb\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Ivy Bridge",frontmatter:{},regularPath:"/config-laptop.plist/ivy-bridge.html",relativePath:"config-laptop.plist/ivy-bridge.md",key:"v-3f17ab11",path:"/config-laptop.plist/ivy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:139},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1368},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1379},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3080},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:4016},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4430},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4538},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4675},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4430},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5700},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1379},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3080},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:12888},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1379},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:15097},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:15239},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:15440},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:4016},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4430},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:18716},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:19866},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4538},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:20317},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:21217},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:23559},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:23628},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:23746},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:5024},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1379},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3080},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:27667},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:29635},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4985},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:31649},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:18012},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:33139},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:33381},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:33591},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:33976},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4430},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:31339},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:35794},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:36114},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:36293},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:15768},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3606}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Ivy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.7, Lion\nLast Supported OS       macOS 11, Big Sur\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-XOSI        Makes all _OSI calls specific to Windows work for macOS\n                 (Darwin) Identifier. This may help enabling some features\n                 like XHCI and others.\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-IMEI        Needed to add a missing IMEI device on Ivy Bridge CPU with 6\n                 series motherboards, not needed for 7 series motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support IvyBridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n03006601              Laptop   To be used with 1366 by 768 displays or lower\n04006601              Laptop   To be used with 1600 by 900 displays or higher, see below\n                               for addition patches\n09006601              Laptop   To be used with some devices that have eDP connected monitor\n                               (contrary to classical LVDS), must be tested with 03006601\n                               and 04006601 first before trying this.\n0B006601              NUC      To be used with Intel NUCs\n\n# Configuration Notes\n\n * VGA is not supported (unless it's running through a DP to VGA internal adapter, which apparently only rare devices will see it as DP and not VGA, it's all about luck.)\n\n * If you're using 04006601 as your ig-platform-id, you may need to add the following parameters to fix external outputs as otherwise you will only have one output. (Credit to Rehabman)\n\nKEY                        TYPE     VALUE                                                   EXPLANATION\nframebuffer-patch-enable   Number   1                                                       enabling the semantic patches in principle (from the\n                                                                                            WhateverGreen manual)\nframebuffer-memorycount    Number   2                                                       Matching FBMemoryCount to the one on 03006601 (1 on 04 vs 2\n                                                                                            on 03)\nframebuffer-pipecount      Number   2                                                       Matching PipeCount to the one on 03006601 (3 on 04 vs 2 on\n                                                                                            03)\nframebuffer-portcount      Number   4                                                       Matching PortCount to the one on 03006601 (1 on 04 vs 4 on\n                                                                                            03)\nframebuffer-stolenmem      Data     00000004                                                Matching STOLEN memory to 64MB (0x04000000 from hex to base\n                                                                                            10 in Bytes) to the one on 03006601\n                                                                                            Check here for more information.\nframebuffer-con1-enable    Number   1                                                       This will enable patching on connector 1 of the driver.\n                                                                                            (Which is the second connector after con0, which is the\n                                                                                            eDP/LVDS one)\nframebuffer-con1-alldata   Data     02050000 00040000 07040000 03040000 00040000 81000000   When using all data with a connector, either you give all\n                                    04060000 00040000 81000000                              information of that connector (port-bused-type-flag) or that\n                                                                                            port and the ones following it, like in this case.\n                                                                                            In this case, the ports in 04 are limited to 1:\n                                                                                            05030000 02000000 30020000 (which corresponds to port 5,\n                                                                                            which is LVDS)\n                                                                                            However on 03 there are 3 extra ports:\n                                                                                            05030000 02000000 30000000 (LVDS, con0, like 04)\n                                                                                            02050000 00040000 07040000 (DP, con1)\n                                                                                            03040000 00040000 81000000 (DP, con2)\n                                                                                            04060000 00040000 81000000 (DP, con3)\n                                                                                            Since we changed the number of PortCount to 4 in a platform\n                                                                                            that has only 1, that means we need to define the 3 others\n                                                                                            (and we that starting with con1 to the end).\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nSandy/IvyBridge Hybrids:\n\nSome laptops from this era came with a mixed chipset setup, using Ivy Bridge CPUs with Sandy Bridge chipsets which creates issues with macOS since it expects a certain IMEI ID that it doesn't find and would get stuck at boot(As Apple's iGPU drivers require an IMEI device), to fix this we need to fake the IMEI's IDs in these models\n\n * To know if you're affected check if your CPU is an Intel Core ix-3xxx and your chipset is Hx6x (for example a laptop with HM65 or HM67 with a Core i3-3110M) through tools like AIDA64.\n * In your config add a new PciRoot device named PciRoot(0x0)/Pci(0x16,0x0)\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1E0000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Ivy Bridge example, we'll chose the iMac13,2 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                        DISPLAY SIZE\nMacBookAir5,1    Dual Core 17W             iGPU: HD 4000                   11\"\nMacBookAir5,2    Dual Core 17W             iGPU: HD 4000                   13\"\nMacBookPro10,1   Quad Core 45W             iGPU: HD 4000 + dGPU: GT 650M   15\"\nMacBookPro10,2   Dual Core 35W(High End)   iGPU: HD 4000                   13\"\nMacmini6,1       Dual Core NUC             iGPU: HD 4000                   N/A\nMacmini6,2       Quad Core NUC             iGPU: HD 4000                   N/A\n\nNote: The following SMBIOS are only supported up-to and including macOS 10.15, Catalina. For cases where you must boot Big Sur, see below:\n\nBig Sur SMBIOS table\n\nNote choosing a SMBIOS from the list below for Catalina or older is not recommended, as Power Management and such can break when using unoptimized SMBIOS.\n\nSMBIOS           CPU TYPE        DISPLAY SIZE\nMacBookAir6,1    Dual Core 15W   11\"\nMacBookAir6,2    Dual Core 15W   13\"\nMacBookPro11,1   Dual Core 28W   13\"\nMacBookPro11,2   Quad Core 45W   15\"\nMacBookPro11,3   Quad Core 45W   15\"\nMacBookPro11,4   Quad Core 45W   15\"\nMacBookPro11,5   Quad Core 45W   15\"\nMacmini7,1       NUC Systems     N/A\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro10,2 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro10,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\nThese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled) (or Legacy Support, or Hybrid Boot)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly, if available)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x (Virtualization Support)\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop ivy bridge\n\nsupport                 version\ninitial macos support   os x 10.7, lion\nlast supported os       macos 11, big sur\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-xosi        makes all _osi calls specific to windows work for macos\n                 (darwin) identifier. this may help enabling some features\n                 like xhci and others.\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-imei        needed to add a missing imei device on ivy bridge cpu with 6\n                 series motherboards, not needed for 7 series motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support ivybridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n03006601              laptop   to be used with 1366 by 768 displays or lower\n04006601              laptop   to be used with 1600 by 900 displays or higher, see below\n                               for addition patches\n09006601              laptop   to be used with some devices that have edp connected monitor\n                               (contrary to classical lvds), must be tested with 03006601\n                               and 04006601 first before trying this.\n0b006601              nuc      to be used with intel nucs\n\n# configuration notes\n\n * vga is not supported (unless it's running through a dp to vga internal adapter, which apparently only rare devices will see it as dp and not vga, it's all about luck.)\n\n * if you're using 04006601 as your ig-platform-id, you may need to add the following parameters to fix external outputs as otherwise you will only have one output. (credit to rehabman)\n\nkey                        type     value                                                   explanation\nframebuffer-patch-enable   number   1                                                       enabling the semantic patches in principle (from the\n                                                                                            whatevergreen manual)\nframebuffer-memorycount    number   2                                                       matching fbmemorycount to the one on 03006601 (1 on 04 vs 2\n                                                                                            on 03)\nframebuffer-pipecount      number   2                                                       matching pipecount to the one on 03006601 (3 on 04 vs 2 on\n                                                                                            03)\nframebuffer-portcount      number   4                                                       matching portcount to the one on 03006601 (1 on 04 vs 4 on\n                                                                                            03)\nframebuffer-stolenmem      data     00000004                                                matching stolen memory to 64mb (0x04000000 from hex to base\n                                                                                            10 in bytes) to the one on 03006601\n                                                                                            check here for more information.\nframebuffer-con1-enable    number   1                                                       this will enable patching on connector 1 of the driver.\n                                                                                            (which is the second connector after con0, which is the\n                                                                                            edp/lvds one)\nframebuffer-con1-alldata   data     02050000 00040000 07040000 03040000 00040000 81000000   when using all data with a connector, either you give all\n                                    04060000 00040000 81000000                              information of that connector (port-bused-type-flag) or that\n                                                                                            port and the ones following it, like in this case.\n                                                                                            in this case, the ports in 04 are limited to 1:\n                                                                                            05030000 02000000 30020000 (which corresponds to port 5,\n                                                                                            which is lvds)\n                                                                                            however on 03 there are 3 extra ports:\n                                                                                            05030000 02000000 30000000 (lvds, con0, like 04)\n                                                                                            02050000 00040000 07040000 (dp, con1)\n                                                                                            03040000 00040000 81000000 (dp, con2)\n                                                                                            04060000 00040000 81000000 (dp, con3)\n                                                                                            since we changed the number of portcount to 4 in a platform\n                                                                                            that has only 1, that means we need to define the 3 others\n                                                                                            (and we that starting with con1 to the end).\n\npciroot(0x0)/pci(0x16,0x0)\n\nsandy/ivybridge hybrids:\n\nsome laptops from this era came with a mixed chipset setup, using ivy bridge cpus with sandy bridge chipsets which creates issues with macos since it expects a certain imei id that it doesn't find and would get stuck at boot(as apple's igpu drivers require an imei device), to fix this we need to fake the imei's ids in these models\n\n * to know if you're affected check if your cpu is an intel core ix-3xxx and your chipset is hx6x (for example a laptop with hm65 or hm67 with a core i3-3110m) through tools like aida64.\n * in your config add a new pciroot device named pciroot(0x0)/pci(0x16,0x0)\n\nkey         type   value\ndevice-id   data   3a1e0000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this ivy bridge example, we'll chose the imac13,2 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                        display size\nmacbookair5,1    dual core 17w             igpu: hd 4000                   11\"\nmacbookair5,2    dual core 17w             igpu: hd 4000                   13\"\nmacbookpro10,1   quad core 45w             igpu: hd 4000 + dgpu: gt 650m   15\"\nmacbookpro10,2   dual core 35w(high end)   igpu: hd 4000                   13\"\nmacmini6,1       dual core nuc             igpu: hd 4000                   n/a\nmacmini6,2       quad core nuc             igpu: hd 4000                   n/a\n\nnote: the following smbios are only supported up-to and including macos 10.15, catalina. for cases where you must boot big sur, see below:\n\nbig sur smbios table\n\nnote choosing a smbios from the list below for catalina or older is not recommended, as power management and such can break when using unoptimized smbios.\n\nsmbios           cpu type        display size\nmacbookair6,1    dual core 15w   11\"\nmacbookair6,2    dual core 15w   13\"\nmacbookpro11,1   dual core 28w   13\"\nmacbookpro11,2   quad core 45w   15\"\nmacbookpro11,3   quad core 45w   15\"\nmacbookpro11,4   quad core 45w   15\"\nmacbookpro11,5   quad core 45w   15\"\nmacmini7,1       nuc systems     n/a\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro10,2 smbios info            #\n#######################################################\n\ntype:         macbookpro10,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\nthese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled) (or legacy support, or hybrid boot)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly, if available)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x (virtualization support)\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Kaby Lake",frontmatter:{},regularPath:"/config-laptop.plist/kaby-lake.html",relativePath:"config-laptop.plist/kaby-lake.md",key:"v-66600c2d",path:"/config-laptop.plist/kaby-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:100},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1329},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2882},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2967},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3427},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3535},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3672},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3427},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4697},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2882},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:11331},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1340},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:13540},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:13682},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:13883},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2967},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3427},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:17159},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:18309},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3535},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:18760},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:19660},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:22002},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:22071},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:22189},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4021},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2882},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:26110},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:27393},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3982},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:29402},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:16455},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:30892},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:31134},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:31344},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:31729},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3427},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:29092},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:33351},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:33671},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:33981},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:14211},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3297}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Kaby Lake\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.12, Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops (ie. with built-in displays) or for Intel NUCs (ie. standalone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n00001B59              Laptop   Recommended for HD 615, HD 620, HD 630, HD 640 and HD 650\n00001659              Laptop   Alternative value to 00001B59 if you have acceleration\n                               issues, and recommended for all HD and UHD 620 NUCs\n0000C087              Laptop   Recommended for Amber Lake's UHD 617 and Kaby Lake-R's UHD\n                               620\n00001E59              NUC      Recommended for HD 615\n00001B59              NUC      Recommended for HD 630\n02002659              NUC      Recommended for HD 640/650\n\n# Configuration Notes\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB or higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case add these values to the iGPU properties:\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\n * For all UHD 620 users (Kaby Lake-R), you'll need a device-id spoof:\n\nKEY         TYPE   VALUE\ndevice-id   Data   16590000\n\n * HD 6xx users (UHD 6xx users are not concerned) may have some issues with output where plugging in a display out would cause a lock up (kernel panic); here are some patches to mitigate that (credit RehabMan). If you're having these lock ups, try the following sets of patches (try both, but only one set at a time):\n   \n   * con1 as 105, con2 as 204, both HDMI\n     \n     KEY                        TYPE   VALUE\n     framebuffer-con1-enable    Data   01000000\n     framebuffer-con1-alldata   Data   01050A00 00080000 87010000\n     framebuffer-con2-enable    Data   01000000\n     framebuffer-con2-alldata   Data   02040A00 00080000 87010000\n   \n   * con1 as 105, con2 as 306, HDMI and DP\n     \n     KEY                        TYPE   VALUE\n     framebuffer-con1-enable    Data   01000000\n     framebuffer-con1-alldata   Data   01050A00 00080000 87010000\n     framebuffer-con2-enable    Data   01000000\n     framebuffer-con2-alldata   Data   03060A00 00040000 87010000\n\nExplanation\n\nLet's take in consideration these 2 usual framebuffers:\n\n * 00001B59 which has the following BusID information:\n   \n   [0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n   [2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n   [3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n   00000800 02000000 98000000\n   02040A00 00080000 87010000\n   03060A00 00040000 87010000\n   \n\n * and 00001659 which has the following BusID information:\n   \n   [0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n   [1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n   [2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n   00000800 02000000 98000000\n   01050900 00040000 87010000\n   02040A00 00080000 87010000\n   \n\nWhich look similar at first glance, until you see the small details like the Port ID (the first 2 digits of each hex line). Both of the framebuffers are valid, but not all OEMs ship the same port configuration on all laptops (some have eDP for internal display, some have HDMI instead of DP ports, some have VGA and so on...).\n\nFor either framebuffer, the first port (port 00) is ConnectorLVDS (meaning the internal display), which is the same on both configurations, that's how you get a display out for macOS. The differences come to the 2 other ports:\n\n * 00001B59\n\n02040A00 00080000 87010000 --\x3e\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n\n03060A00 00040000 87010000 --\x3e\n[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n\n\n * 00001659\n\n01050900 00040000 87010000 --\x3e\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n\n02040A00 00080000 87010000 --\x3e\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n\n\nThe patches above have these effects:\n\n * Patchset 1:\n   * Convert second connector of the ports to 0105 with HDMI connector type\n   * Convert third connector of the ports to 0204 with HDMI connector type\n * Patchset 2:\n   * Convert second connector of the ports to 0105 with HDMI connector type\n   * Convert third connector of the ports to 0306 with DP connector type\n\nDepending on your real hardware setup, you might want to switch things up, but usually for most laptops, one of the two patches might be required, in case your outputs work out-of-the-box with no issues or crashes, you do not need these patches then.\n\nHow to read the BusID\n\nThe bits in the hex string are read as following:\n\n(taking 01050900 00040000 87010000 as example)\n\nBIT        NAME             VALUE\nBit 1      Port             01\nBit 2      Bus ID           05\nBit 3-4    Pipe Number      0900\nBit 5-8    Connector Type   00040000\nBit 9-12   Flags            87010000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Kaby Lake example, we'll chose the MacBookPro14,1 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                                    DISPLAY SIZE   TOUCH ID\nMacBookPro14,1   Dual Core 15W(Low End)    iGPU: Iris Plus 640                         13\"            No\nMacBookPro14,2   Dual Core 15W(High End)   iGPU: Iris Plus 650                         13\"            Yes\nMacBookPro14,3   Quad Core 45W             iGPU: HD 630 + dGPU: Radeon Pro 555X/560X   15\"            Yes\niMac18,1         NUC Systems               iGPU: Iris Plus 640                         N/A            No\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro14,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro14,1\nSerial:       C02Z2CZ5H7JY\nBoard Serial: C02928701GUH69FFB\nSmUUID:       AA043F8D-33B6-4A1A-94F7-46972AAD0607\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop kaby lake\n\nsupport                 version\ninitial macos support   macos 10.12, sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops (ie. with built-in displays) or for intel nucs (ie. standalone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n00001b59              laptop   recommended for hd 615, hd 620, hd 630, hd 640 and hd 650\n00001659              laptop   alternative value to 00001b59 if you have acceleration\n                               issues, and recommended for all hd and uhd 620 nucs\n0000c087              laptop   recommended for amber lake's uhd 617 and kaby lake-r's uhd\n                               620\n00001e59              nuc      recommended for hd 615\n00001b59              nuc      recommended for hd 630\n02002659              nuc      recommended for hd 640/650\n\n# configuration notes\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb or higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case add these values to the igpu properties:\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\n * for all uhd 620 users (kaby lake-r), you'll need a device-id spoof:\n\nkey         type   value\ndevice-id   data   16590000\n\n * hd 6xx users (uhd 6xx users are not concerned) may have some issues with output where plugging in a display out would cause a lock up (kernel panic); here are some patches to mitigate that (credit rehabman). if you're having these lock ups, try the following sets of patches (try both, but only one set at a time):\n   \n   * con1 as 105, con2 as 204, both hdmi\n     \n     key                        type   value\n     framebuffer-con1-enable    data   01000000\n     framebuffer-con1-alldata   data   01050a00 00080000 87010000\n     framebuffer-con2-enable    data   01000000\n     framebuffer-con2-alldata   data   02040a00 00080000 87010000\n   \n   * con1 as 105, con2 as 306, hdmi and dp\n     \n     key                        type   value\n     framebuffer-con1-enable    data   01000000\n     framebuffer-con1-alldata   data   01050a00 00080000 87010000\n     framebuffer-con2-enable    data   01000000\n     framebuffer-con2-alldata   data   03060a00 00040000 87010000\n\nexplanation\n\nlet's take in consideration these 2 usual framebuffers:\n\n * 00001b59 which has the following busid information:\n   \n   [0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n   [2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n   [3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n   00000800 02000000 98000000\n   02040a00 00080000 87010000\n   03060a00 00040000 87010000\n   \n\n * and 00001659 which has the following busid information:\n   \n   [0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n   [1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - connectordp\n   [2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n   00000800 02000000 98000000\n   01050900 00040000 87010000\n   02040a00 00080000 87010000\n   \n\nwhich look similar at first glance, until you see the small details like the port id (the first 2 digits of each hex line). both of the framebuffers are valid, but not all oems ship the same port configuration on all laptops (some have edp for internal display, some have hdmi instead of dp ports, some have vga and so on...).\n\nfor either framebuffer, the first port (port 00) is connectorlvds (meaning the internal display), which is the same on both configurations, that's how you get a display out for macos. the differences come to the 2 other ports:\n\n * 00001b59\n\n02040a00 00080000 87010000 --\x3e\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n\n03060a00 00040000 87010000 --\x3e\n[3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n\n\n * 00001659\n\n01050900 00040000 87010000 --\x3e\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - connectordp\n\n02040a00 00080000 87010000 --\x3e\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n\n\nthe patches above have these effects:\n\n * patchset 1:\n   * convert second connector of the ports to 0105 with hdmi connector type\n   * convert third connector of the ports to 0204 with hdmi connector type\n * patchset 2:\n   * convert second connector of the ports to 0105 with hdmi connector type\n   * convert third connector of the ports to 0306 with dp connector type\n\ndepending on your real hardware setup, you might want to switch things up, but usually for most laptops, one of the two patches might be required, in case your outputs work out-of-the-box with no issues or crashes, you do not need these patches then.\n\nhow to read the busid\n\nthe bits in the hex string are read as following:\n\n(taking 01050900 00040000 87010000 as example)\n\nbit        name             value\nbit 1      port             01\nbit 2      bus id           05\nbit 3-4    pipe number      0900\nbit 5-8    connector type   00040000\nbit 9-12   flags            87010000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this kaby lake example, we'll chose the macbookpro14,1 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                                    display size   touch id\nmacbookpro14,1   dual core 15w(low end)    igpu: iris plus 640                         13\"            no\nmacbookpro14,2   dual core 15w(high end)   igpu: iris plus 650                         13\"            yes\nmacbookpro14,3   quad core 45w             igpu: hd 630 + dgpu: radeon pro 555x/560x   15\"            yes\nimac18,1         nuc systems               igpu: iris plus 640                         n/a            no\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro14,1 smbios info            #\n#######################################################\n\ntype:         macbookpro14,1\nserial:       c02z2cz5h7jy\nboard serial: c02928701guh69ffb\nsmuuid:       aa043f8d-33b6-4a1a-94f7-46972aad0607\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Sandy Bridge",frontmatter:{},regularPath:"/config-laptop.plist/sandy-bridge.html",relativePath:"config-laptop.plist/sandy-bridge.md",key:"v-4c310623",path:"/config-laptop.plist/sandy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:227},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1456},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1467},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3195},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:4134},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4548},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4656},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4793},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4548},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5818},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1467},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3195},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:8373},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1467},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:10582},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10724},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:10925},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:4134},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4548},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14290},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15440},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4656},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:15891},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:16791},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19133},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19202},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19320},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:5142},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1467},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3195},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23241},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24561},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:218},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:26570},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:13586},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:28126},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:28368},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28592},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28977},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4548},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:26260},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30795},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:31115},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:31294},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:11253},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3724}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Sandy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.7, Snow Leopard\nLast Supported OS       macOS 10.13, High Sierra\nNote                    Most Sandy bridge boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-XOSI        Makes all _OSI calls specific to Windows work for macOS\n                 (Darwin) Identifier. This may help enabling some features\n                 like XHCI and others.\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-IMEI        Needed to add a missing IMEI device on Sandy Bridge CPU with\n                 7 series motherboards. This is not needed for 6-series\n                 motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support Sandy Bridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,snb-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,snb-platform-id - this is normally enough\n\nAAPL,SNB-PLATFORM-ID   TYPE     COMMENT\n00000100               Laptop   To be used with laptops\n10000300               NUC      To be used with Intel NUCs\n\n# Configuration Notes\n\n * VGA is not supported (unless it's running through a DP to VGA internal adapter, which apparently only rare devices will see it as DP and not VGA, it's all about luck.)\n * HD 2000 series are unsupported as well\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nSandy/IvyBridge Hybrids:\n\nSome laptops from this era came with a mixed chipset setup, using Sandy Bridge CPUs with Ivy Bridge chipsets which creates issues with macOS since it expects a certain IMEI ID that it doesn't find and would get stuck at boot(As Apple's iGPU drivers require an IMEI device), to fix this we need to fake the IMEI's IDs in these models\n\n * To know if you're affected check if your CPU is an Intel Core ix-3xxx and your chipset is Hx6x (for example a laptop with HM65 or HM67 with a Core i3-3110M) through tools like AIDA64.\n * In your config add a new PciRoot device named PciRoot(0x0)/Pci(0x16,0x0)\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1C0000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Sandy Bridge example, we'll chose the MacBookPro8,1 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS          CPU TYPE                  GPU TYPE                DISPLAY SIZE\nMacBookAir4,1   Dual Core 17W             iGPU: HD 3000           11\"\nMacBookAir4,2   Dual Core 17W             iGPU: HD 3000           13\"\nMacBookPro8,1   Dual Core 35W             iGPU: HD 3000           13\"\nMacBookPro8,2   Quad Core 45W(High End)   iGPU: HD 3000 + 6490M   15\"\nMacBookPro8,3   Quad Core 45W(High End)   iGPU: HD 3000 + 6750M   17\"\nMacmini5,1      Dual Core NUC             iGPU: HD 3000           N/A\nMacmini5,3      Quad Core NUC             iGPU: HD 3000           N/A\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #                MacBookPro8,2 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro8,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\nThese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled) (or Legacy Support, or Hybrid Boot)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly, if available)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x (Virtualization Support)\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop sandy bridge\n\nsupport                 version\ninitial macos support   os x 10.6.7, snow leopard\nlast supported os       macos 10.13, high sierra\nnote                    most sandy bridge boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-xosi        makes all _osi calls specific to windows work for macos\n                 (darwin) identifier. this may help enabling some features\n                 like xhci and others.\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-imei        needed to add a missing imei device on sandy bridge cpu with\n                 7 series motherboards. this is not needed for 6-series\n                 motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support sandy bridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,snb-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,snb-platform-id - this is normally enough\n\naapl,snb-platform-id   type     comment\n00000100               laptop   to be used with laptops\n10000300               nuc      to be used with intel nucs\n\n# configuration notes\n\n * vga is not supported (unless it's running through a dp to vga internal adapter, which apparently only rare devices will see it as dp and not vga, it's all about luck.)\n * hd 2000 series are unsupported as well\n\npciroot(0x0)/pci(0x16,0x0)\n\nsandy/ivybridge hybrids:\n\nsome laptops from this era came with a mixed chipset setup, using sandy bridge cpus with ivy bridge chipsets which creates issues with macos since it expects a certain imei id that it doesn't find and would get stuck at boot(as apple's igpu drivers require an imei device), to fix this we need to fake the imei's ids in these models\n\n * to know if you're affected check if your cpu is an intel core ix-3xxx and your chipset is hx6x (for example a laptop with hm65 or hm67 with a core i3-3110m) through tools like aida64.\n * in your config add a new pciroot device named pciroot(0x0)/pci(0x16,0x0)\n\nkey         type   value\ndevice-id   data   3a1c0000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this sandy bridge example, we'll chose the macbookpro8,1 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios          cpu type                  gpu type                display size\nmacbookair4,1   dual core 17w             igpu: hd 3000           11\"\nmacbookair4,2   dual core 17w             igpu: hd 3000           13\"\nmacbookpro8,1   dual core 35w             igpu: hd 3000           13\"\nmacbookpro8,2   quad core 45w(high end)   igpu: hd 3000 + 6490m   15\"\nmacbookpro8,3   quad core 45w(high end)   igpu: hd 3000 + 6750m   17\"\nmacmini5,1      dual core nuc             igpu: hd 3000           n/a\nmacmini5,3      quad core nuc             igpu: hd 3000           n/a\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #                macbookpro8,2 smbios info            #\n#######################################################\n\ntype:         macbookpro8,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\nthese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled) (or legacy support, or hybrid boot)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly, if available)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x (virtualization support)\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Skylake",frontmatter:{},regularPath:"/config-laptop.plist/skylake.html",relativePath:"config-laptop.plist/skylake.md",key:"v-514ba50d",path:"/config-laptop.plist/skylake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:184},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1413},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1424},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2966},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3051},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3511},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3619},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3756},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3511},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4781},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1424},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2966},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7837},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1424},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:10046},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10188},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:10389},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3051},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3511},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13665},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:14815},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3619},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:15266},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:16166},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18508},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18577},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:18695},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4105},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1424},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2966},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22617},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24050},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4066},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:26059},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12961},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27549},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27791},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28001},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28386},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3511},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25749},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30008},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:30328},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30638},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10717},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3381}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Skylake\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\nNote                    Skylake's iGPU is only officially supported up to macOS 12\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n00001619              Laptop   Recommended value for HD 515, HD 520, HD 530, HD 540, HD 550\n                               and P530\n00001E19              Laptop   Alternative for HD 515 if you have issues with the above\n                               entry\n00001B19              Laptop   Recommended value for HD 510\n00001E19              NUC      Recommended for HD 515\n02001619              NUC      Recommended for HD 520/530\n02002619              NUC      Recommended for HD 540/550\n05003B19              NUC      Recommended for HD 580\n\nNote: If booting macOS Ventura, you need to spoof your iGPU as the closest Kaby Lake model.\n\n# Configuration Notes\n\n * For HD 510 you will need to use a device-id spoof:\n\nKEY         TYPE   VALUE\ndevice-id   Data   02190000\n\n * For HD 550 and P530 (and potentially all HD P-series iGPUs), you may need to use device-id=16190000:\n\nKEY         TYPE   VALUE\ndevice-id   Data   16190000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modifications\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Skylake example, we'll choose the MacBookPro13,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                                  DISPLAY SIZE   TOUCH ID\nMacBook9,1       Dual Core 7W(Low End)     iGPU: HD 515                              12\"            No\nMacBookPro13,1   Dual Core 15W(Low End)    iGPU: Iris 540                            13\"            No\nMacBookPro13,2   Dual Core 15W(High End)   iGPU: Iris 550                            13\"            Yes\nMacBookPro13,3   Quad Core 45W             iGPU: HD 530 + dGPU: Radeon Pro 450/455   15\"            Yes\niMac17,1         NUC Systems               iGPU: HD 530 + R9 290                     N/A            No\n\nNote 2: All of these SMBIOSes were dropped in macOS Ventura. If running macOS Ventura, use a Kaby Lake SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro13,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro13,1\nSerial:       C02S3HYWGG7L\nBoard Serial: C02629102GUGPF7AD\nSmUUID:       3508AD44-B67D-4AD7-A109-7955130A1033\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop skylake\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\nnote                    skylake's igpu is only officially supported up to macos 12\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n00001619              laptop   recommended value for hd 515, hd 520, hd 530, hd 540, hd 550\n                               and p530\n00001e19              laptop   alternative for hd 515 if you have issues with the above\n                               entry\n00001b19              laptop   recommended value for hd 510\n00001e19              nuc      recommended for hd 515\n02001619              nuc      recommended for hd 520/530\n02002619              nuc      recommended for hd 540/550\n05003b19              nuc      recommended for hd 580\n\nnote: if booting macos ventura, you need to spoof your igpu as the closest kaby lake model.\n\n# configuration notes\n\n * for hd 510 you will need to use a device-id spoof:\n\nkey         type   value\ndevice-id   data   02190000\n\n * for hd 550 and p530 (and potentially all hd p-series igpus), you may need to use device-id=16190000:\n\nkey         type   value\ndevice-id   data   16190000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modifications\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this skylake example, we'll choose the macbookpro13,1 smbios. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                                  display size   touch id\nmacbook9,1       dual core 7w(low end)     igpu: hd 515                              12\"            no\nmacbookpro13,1   dual core 15w(low end)    igpu: iris 540                            13\"            no\nmacbookpro13,2   dual core 15w(high end)   igpu: iris 550                            13\"            yes\nmacbookpro13,3   quad core 45w             igpu: hd 530 + dgpu: radeon pro 450/455   15\"            yes\nimac17,1         nuc systems               igpu: hd 530 + r9 290                     n/a            no\n\nnote 2: all of these smbioses were dropped in macos ventura. if running macos ventura, use a kaby lake smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro13,1 smbios info            #\n#######################################################\n\ntype:         macbookpro13,1\nserial:       c02s3hywgg7l\nboard serial: c02629102gugpf7ad\nsmuuid:       3508ad44-b67d-4ad7-a109-7955130a1033\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"config.plist 设置",frontmatter:{},regularPath:"/config.plist/",relativePath:"config.plist/README.md",key:"v-5a347704",path:"/config.plist/",headers:[{level:2,title:"创建你的 config.plist",slug:"创建你的-config-plist",normalizedTitle:"创建你的 config.plist",charIndex:127},{level:2,title:"添加你的ssdt、kext和固件驱动程序",slug:"添加你的ssdt、kext和固件驱动程序",normalizedTitle:"添加你的ssdt、kext和固件驱动程序",charIndex:274},{level:2,title:"选择你的平台",slug:"选择你的平台",normalizedTitle:"选择你的平台",charIndex:1331},{level:3,title:"Intel 台式电脑",slug:"intel-台式电脑",normalizedTitle:"intel 台式电脑",charIndex:1395},{level:3,title:"Intel 笔记本电脑",slug:"intel-笔记本电脑",normalizedTitle:"intel 笔记本电脑",charIndex:1445},{level:3,title:"Intel HEDT",slug:"intel-hedt",normalizedTitle:"intel hedt",charIndex:2770},{level:3,title:"AMD",slug:"amd",normalizedTitle:"amd",charIndex:3207}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"创建你的 config.plist 添加你的ssdt、kext和固件驱动程序 选择你的平台 Intel 台式电脑 Intel 笔记本电脑 Intel HEDT AMD",content:"# config.plist 设置\n\n现在我们有了所有的kext (.kext)、ssdt (.aml)和固件驱动程序(.efi)，你的USB应该开始看起来像这样:\n\n\n\n * 注意: 你的USB 看起来会不同 ，每个人的系统都会有不同的需求。\n\n\n# 创建你的 config.plist\n\n首先，我们要获取 Sample.plist ，在 OpenCorePkg, 的 Docs 文件夹下:\n\n\n\n接下来让我们将它移动到USB的EFI分区(在Windows上称为BOOT)下的EFI/OC/，并将其重命名为config.plist:\n\n\n\n\n# 添加你的ssdt、kext和固件驱动程序\n\n对于本指南的其余部分，你需要某种形式的plist编辑。对于我们的指南，我们将使用ProperTree和GenSMBIOS来帮助自动化一些乏味的工作:\n\n * ProperTree\n   * 通用plist编辑器\n * GenSMBIOS\n   * 用于生成SMBIOS数据\n\n接下来，让我们打开ProperTree并编辑我们的config.plist:\n\n * ProperTree.command\n   * 适用于macOS\n   * 专业提示:在 Scripts 文件夹中有一个 buildapp.command 实用程序，可以让你在macOS中将ProperTree转换为专用应用程序\n * ProperTree.bat\n   * 适用于Windows\n\n在运行ProperTree之后，打开您的配置。通过按 Cmd/Ctrl + O 并选择 config.plist ，文件在你的USB上。\n\n在配置打开后，按 Cmd/Ctrl + Shift + R ，并将其指向你的EFI/OC文件夹来执行“清洁快照”:\n\n * 这将从 config.plist 中删除所有条目，然后将所有ssdt、kext和固件驱动添加到配置中\n * Cmd/Ctrl + R 是另一个选项，它也会添加你所有的文件，但如果它们之前设置过，则会禁用它们，这对你进行故障排除很有用，但对我们来说现在不需要\n\n\n\n完成后，你会看到配置文件config.plist中填充了你的ssdt、kext和固件驱动:\n\n\n\n * 注意: 如果弹出 “Disable the following kext with Duplicate CFBundleIdentifiers?” ，按 “Yes” 。这是为了确保你没有重复的kext被注入，因为一些kext可能有一些相同的插件(例如：VoodooInput 在 VoodooPS2 和 VoodooI2C 的插件文件夹中)\n\n\n\n如果你想稍微清理一下文件，可以删除 #WARNING 条目。虽然他们在那里不会造成任何问题，所以取决于个人喜好。\n\nDANGER\n\nconfig.plist 必须 与EFI文件夹的内容匹配。如果您删除了一个文件，但将其保留在 Config.plist, OpenCore将出错并停止启动。\n\n如果你做了任何修改，你可以在ProperTree中使用OC快照工具(Cmd/Ctrl + R)来更新config.plist。\n\n\n# 选择你的平台\n\n接下来是重要的部分，选择配置路径。每个平台都有自己独特的特点，所以了解硬件非常重要。看看下面要做什么:\n\n\n# Intel 台式电脑\n\n * *注意:英特尔的NUC系列被认为是移动硬件，对于这些情况，我们建议遵循Intel 笔记本电脑部分\n\n代号                         序号                           发布年代\nYonah, Conroe and Penryn   E8XXX, Q9XXX, etc 1, etc 2   2006-2009 年代\nLynnfield and Clarkdale    5XX-8XX                      2010 年代\nSandy Bridge               2XXX                         2011 年代\nIvy Bridge                 3XXX                         2012 年代\nHaswell                    4XXX                         2013-2014 年代\nSkylake                    6XXX                         2015-2016 年代\nKaby Lake                  7XXX                         2017 年代\nCoffee Lake                8XXX-9XXX                    2017-2019 年代\nComet Lake                 10XXX                        2020 年代\n\n\n# Intel 笔记本电脑\n\n代号                                序号           发布年代\nClarksfield and Arrandale         3XX-9XX      2010 年代\nSandy Bridge                      2XXX         2011 年代\nIvy Bridge                        3XXX         2012 年代\nHaswell                           4XXX         2013-2014 年代\nBroadwell                         5XXX         2014-2015 年代\nSkylake                           6XXX         2015-2016 年代\nKaby Lake and Amber Lake          7XXX         2017 年代\nCoffee Lake and Whiskey Lake      8XXX         2017-2018 年代\nCoffee Lake Plus and Comet Lake   9XXX-10XXX   2019-2020 年代\nIce Lake                          10XXX        2019-2020 年代\n\n\n# Intel HEDT\n\n本节包括发烧友和基于服务器的硬件。\n\n代号                         序号                            发布年代\nNehalem and Westmere       9XX, X3XXX, X5XXX, etc 1, 2   2008-2010 年代\nSandy/Ivy Bridge-E         3XXX, 4XXX                    2011-2013 年代\nHaswell-E                  5XXX                          2014 年代\nBroadwell-E                6XXX                          2016 年代\nSkylake/Cascade Lake-X/W   7XXX, 9XXX, 10XXX             2017-2019 年代\n\n\n# AMD\n\n代号                 序号                       发布年代\nBulldozer/Jaguar   It's weird               AMD was really bad with naming back then\nZen                1XXX, 2XXX, 3XXX, 5XXX   2017-2020 年代\n\n * 注意:Threadripper第三代(39XX)不支持，但是支持第一代和第二代\n   * 最新的BIOS和OpenCore版本已经解决了这个问题，现在支持所有的Threadripper平台",normalizedContent:"# config.plist 设置\n\n现在我们有了所有的kext (.kext)、ssdt (.aml)和固件驱动程序(.efi)，你的usb应该开始看起来像这样:\n\n\n\n * 注意: 你的usb 看起来会不同 ，每个人的系统都会有不同的需求。\n\n\n# 创建你的 config.plist\n\n首先，我们要获取 sample.plist ，在 opencorepkg, 的 docs 文件夹下:\n\n\n\n接下来让我们将它移动到usb的efi分区(在windows上称为boot)下的efi/oc/，并将其重命名为config.plist:\n\n\n\n\n# 添加你的ssdt、kext和固件驱动程序\n\n对于本指南的其余部分，你需要某种形式的plist编辑。对于我们的指南，我们将使用propertree和gensmbios来帮助自动化一些乏味的工作:\n\n * propertree\n   * 通用plist编辑器\n * gensmbios\n   * 用于生成smbios数据\n\n接下来，让我们打开propertree并编辑我们的config.plist:\n\n * propertree.command\n   * 适用于macos\n   * 专业提示:在 scripts 文件夹中有一个 buildapp.command 实用程序，可以让你在macos中将propertree转换为专用应用程序\n * propertree.bat\n   * 适用于windows\n\n在运行propertree之后，打开您的配置。通过按 cmd/ctrl + o 并选择 config.plist ，文件在你的usb上。\n\n在配置打开后，按 cmd/ctrl + shift + r ，并将其指向你的efi/oc文件夹来执行“清洁快照”:\n\n * 这将从 config.plist 中删除所有条目，然后将所有ssdt、kext和固件驱动添加到配置中\n * cmd/ctrl + r 是另一个选项，它也会添加你所有的文件，但如果它们之前设置过，则会禁用它们，这对你进行故障排除很有用，但对我们来说现在不需要\n\n\n\n完成后，你会看到配置文件config.plist中填充了你的ssdt、kext和固件驱动:\n\n\n\n * 注意: 如果弹出 “disable the following kext with duplicate cfbundleidentifiers?” ，按 “yes” 。这是为了确保你没有重复的kext被注入，因为一些kext可能有一些相同的插件(例如：voodooinput 在 voodoops2 和 voodooi2c 的插件文件夹中)\n\n\n\n如果你想稍微清理一下文件，可以删除 #warning 条目。虽然他们在那里不会造成任何问题，所以取决于个人喜好。\n\ndanger\n\nconfig.plist 必须 与efi文件夹的内容匹配。如果您删除了一个文件，但将其保留在 config.plist, opencore将出错并停止启动。\n\n如果你做了任何修改，你可以在propertree中使用oc快照工具(cmd/ctrl + r)来更新config.plist。\n\n\n# 选择你的平台\n\n接下来是重要的部分，选择配置路径。每个平台都有自己独特的特点，所以了解硬件非常重要。看看下面要做什么:\n\n\n# intel 台式电脑\n\n * *注意:英特尔的nuc系列被认为是移动硬件，对于这些情况，我们建议遵循intel 笔记本电脑部分\n\n代号                         序号                           发布年代\nyonah, conroe and penryn   e8xxx, q9xxx, etc 1, etc 2   2006-2009 年代\nlynnfield and clarkdale    5xx-8xx                      2010 年代\nsandy bridge               2xxx                         2011 年代\nivy bridge                 3xxx                         2012 年代\nhaswell                    4xxx                         2013-2014 年代\nskylake                    6xxx                         2015-2016 年代\nkaby lake                  7xxx                         2017 年代\ncoffee lake                8xxx-9xxx                    2017-2019 年代\ncomet lake                 10xxx                        2020 年代\n\n\n# intel 笔记本电脑\n\n代号                                序号           发布年代\nclarksfield and arrandale         3xx-9xx      2010 年代\nsandy bridge                      2xxx         2011 年代\nivy bridge                        3xxx         2012 年代\nhaswell                           4xxx         2013-2014 年代\nbroadwell                         5xxx         2014-2015 年代\nskylake                           6xxx         2015-2016 年代\nkaby lake and amber lake          7xxx         2017 年代\ncoffee lake and whiskey lake      8xxx         2017-2018 年代\ncoffee lake plus and comet lake   9xxx-10xxx   2019-2020 年代\nice lake                          10xxx        2019-2020 年代\n\n\n# intel hedt\n\n本节包括发烧友和基于服务器的硬件。\n\n代号                         序号                            发布年代\nnehalem and westmere       9xx, x3xxx, x5xxx, etc 1, 2   2008-2010 年代\nsandy/ivy bridge-e         3xxx, 4xxx                    2011-2013 年代\nhaswell-e                  5xxx                          2014 年代\nbroadwell-e                6xxx                          2016 年代\nskylake/cascade lake-x/w   7xxx, 9xxx, 10xxx             2017-2019 年代\n\n\n# amd\n\n代号                 序号                       发布年代\nbulldozer/jaguar   it's weird               amd was really bad with naming back then\nzen                1xxx, 2xxx, 3xxx, 5xxx   2017-2020 年代\n\n * 注意:threadripper第三代(39xx)不支持，但是支持第一代和第二代\n   * 最新的bios和opencore版本已经解决了这个问题，现在支持所有的threadripper平台",charsets:{cjk:!0}},{title:"Desktop Lynnfield and Clarkdale",frontmatter:{},regularPath:"/config.plist/clarkdale.html",relativePath:"config.plist/clarkdale.md",key:"v-2e5d1f76",path:"/config.plist/clarkdale.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:384},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1613},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1624},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2620},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2705},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2957},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3065},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3225},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2957},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4990},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1624},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2620},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5356},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1624},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7565},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7707},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:7908},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2705},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2957},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:10952},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12102},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3065},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:12553},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:13453},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:15795},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:15864},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:15982},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4145},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1624},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2620},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:20561},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:21596},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:375},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:18694},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10480},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25161},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25403},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25627},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26012},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2957},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23295},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27582},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:27902},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8236},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3680}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Lynnfield and Clarkdale\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.3, Snow Leopard\nLast Supported OS       macOS 12 Monterey\nNote 1                  For Ventura information, see macOS 13 Ventura\nNote 2                  Apple does not support desktop Iron Lake iGPUs\nNote 3                  Most Lynnfield and Clarkdale boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control;\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Clarkdale example, we'll chose the iMac11,2 SMBIOS - this is done intentionally for compatibility's sake. There are 3 main SMBIOS used for Clarkdale:\n\nSMBIOS      HARDWARE\niMac11,1    Lynnfield SMBIOS\niMac11,2    Clarkdale SMBIOS\nMacPro6,1   Mojave and newer SMBIOS\n\n * If you plan to later run macOS 10.14, Mojave or newer, MacPro6,1 will be the recommended SMBIOS and the iGPU must be disabled in the BIOS due to no longer being supported\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac11,2 SMBIOS Info                  #\n#######################################################\n\nType:         iMac11,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop lynnfield and clarkdale\n\nsupport                 version\ninitial macos support   os x 10.6.3, snow leopard\nlast supported os       macos 12 monterey\nnote 1                  for ventura information, see macos 13 ventura\nnote 2                  apple does not support desktop iron lake igpus\nnote 3                  most lynnfield and clarkdale boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control;\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this clarkdale example, we'll chose the imac11,2 smbios - this is done intentionally for compatibility's sake. there are 3 main smbios used for clarkdale:\n\nsmbios      hardware\nimac11,1    lynnfield smbios\nimac11,2    clarkdale smbios\nmacpro6,1   mojave and newer smbios\n\n * if you plan to later run macos 10.14, mojave or newer, macpro6,1 will be the recommended smbios and the igpu must be disabled in the bios due to no longer being supported\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac11,2 smbios info                  #\n#######################################################\n\ntype:         imac11,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"桌面 Coffee Lake",frontmatter:{},regularPath:"/config.plist/coffee-lake.html",relativePath:"config.plist/coffee-lake.md",key:"v-5cc60c9a",path:"/config.plist/coffee-lake.html",headers:[{level:2,title:"起点",slug:"起点",normalizedTitle:"起点",charIndex:74},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:605},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:616},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:1406},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:1448},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:1571},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:1620},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:1697},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:1571},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:3417},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:616},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:1406},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:4638},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:616},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:6015},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:6098},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:6195},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:1448},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:1571},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:7929},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:8581},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:1620},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:8787},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:9319},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:10515},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:10545},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:10605},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:1162},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:616},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:1406},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:12927},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:13572},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:1134},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:14724},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:7694},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:15606},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:15707},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:15805},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:16013},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:1571},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:14545},{level:2,title:"清理",slug:"清理",normalizedTitle:"清理",charIndex:16667},{level:2,title:"Intel BIOS 设置",slug:"intel-bios-设置",normalizedTitle:"intel bios 设置",charIndex:16808},{level:3,title:"禁用",slug:"禁用",normalizedTitle:"禁用",charIndex:677},{level:3,title:"启用",slug:"启用",normalizedTitle:"启用",charIndex:1917}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"起点 ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory 清理 Intel BIOS 设置 禁用 启用",content:'# 桌面 Coffee Lake\n\n支持          版本\n初始macOS支持   macOS 10.13, High Sierra\n\n\n# 起点\n\n制作一个config plist看起来很难，其实并不难。这只是需要一些时间，本指南将告诉您如何配置所有内容，您不会被冷落。这也意味着如果你有问题，检查你的配置设置以确保它们是正确的。OpenCore的主要注意事项:\n\n * 所有属性必须定义, 没有默认的OpenCore将出现错误，所以不要删除节，除非明确告知。如果指南没有提到该选项，请将其保留为默认值。\n * Sample.plist不能按原样使用, 您必须配置您的系统\n * DO NOT USE CONFIGURATORS, 这些配置器很少遵守OpenCore的规则，甚至一些像Mackie的配置器会添加Clover属性和破坏plists!\n\n现在，我们来快速回顾一下我们需要的工具\n\n * ProperTree\n   * 通用plist编辑器\n * GenSMBIOS\n   * 用于生成SMBIOS数据\n * Sample/config.plist\n   * 请参阅上一节有关如何获取: config.plist 设置\n\n警告\n\n在设置OpenCore之前，请多次阅读本指南，并确保您已经正确设置了它。请注意，图像并不总是最新的，所以请阅读下面的文本，如果没有提到，则保留为默认值。\n\n\n# ACPI\n\n\n\n\n# Add\n\n信息\n\n这是你将为系统添加ssdt的地方，这些对于引导macOS非常重要，并且有许多用途，例如 USB 映射, 禁用不支持的gpu 在我们的系统中，它甚至需要它才能引导**。制作指南可以在这里找到:开始使用ACPI\n\n我们需要几个ssdt来恢复Clover提供的功能:\n\n需要SSDTS        描述\nSSDT-PLUG      允许Haswell上的本地CPU电源管理，更新的版本，请参阅ACPI入门指南了解更多详细信息。\nSSDT-EC-USBX   修复嵌入式控制器和USB电源，参见ACPI指南入门 了解更多详细信息。\nSSDT-AWAC      这是300系列RTC补丁, 大多数B360, B365, H310, H370,\n               Z390和一些Z370板需要，防止系统启动macOS。替代方案是 SSDT-RTC0 当AWAC\n               SSDT由于缺少遗留RTC时钟而不兼容时，要检查您是否需要它以及使用哪个，请参阅ACPI入门 页面.\nSSDT-PMC       所以300系列主板(非z370)不会在ACPI中声明FW芯片为MMIO，所以XNU忽略由UEFI内存映射声明的MMIO区域。这个SSDT恢复了对NVRAM的支持。详见\n               ACPI入门指南\n\n请注意，您不应该在这里添加您生成的DSDT.aml，它已经在您的固件中了。因此，如果存在，请删除config.plist和EFI/OC/ACPI下的条目。\n\n对于那些想要更深入地了解转储DSDT、如何制作这些ssdt并编译它们的人，请参阅 ACPI入门 页面 编译后的ssdt具有 .aml 扩展名(已编译)，将被保存在EFI/OC/ACPI文件夹中，并且必须在你的配置文件ACPI -> Add下指定。\n\n\n# Delete\n\n这将阻止某些ACPI表加载，对于我们来说，我们可以忽略它。\n\n\n# Patch\n\n本节允许我们通过OpenCore动态修改ACPI的部分内容(DSDT、SSDT等)。对我们来说，我们的补丁由我们的ssdt处理。这是一个更简洁的解决方案，因为这将允许我们使用OpenCore引导Windows和其他操作系统\n\n\n# Quirks\n\n与ACPI相关的设置，将所有内容保留为默认设置，因为我们不需要这些选项。\n\n\n# Booter\n\n\n\n本节专门讨论与使用OpenRuntime (AptioMemoryFix.efi的替代品)进行boot.efi补丁相关的问题\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\n信息\n\n与boot.efi补丁和固件修复相关的设置，对我们来说，我们需要更改以下内容:\n\n选项                       启用    注释\nDevirtualiseMmio         YES   \nEnableWriteUnprotector   NO    \nProtectUefiServices      YES   Z390系统需要\nRebuildAppleMemoryMap    YES   \nResizeAppleGpuBars       -1    如果您的固件支持增加GPU条大小(即可缩放条支持)，请将其设置为 0\nSyncRuntimePermissions   YES   \n\n更深入信息\n * AvoidRuntimeDefrag: YES\n   * 修复了UEFI运行时服务，如日期，时间，NVRAM，电源控制等\n * DevirtualiseMmio: YES\n   * 减少被盗内存占用，扩展slide=N值的选项，并对修复Z390上的内存分配问题非常有帮助。需要 ProtectUefiServices 在 IceLake 和 Z390 Coffee Lake上.\n * EnableSafeModeSlide: YES\n   * 允许slide变量在安全模式下使用。\n * EnableWriteUnprotector: NO\n   * 这一选项和RebuildAppleMemoryMap通常会发生冲突，建议在较新的平台上启用后者并禁用此条目。\n   * 然而，由于原始设备制造商没有使用最新的EDKII版本，您可能会发现上述组合将导致早期启动失败。这是由于缺少MEMORY_ATTRIBUTE_TABLE，因此我们建议禁用RebuildAppleMemoryMap并启用EnableWriteUnprotector。有关此问题的更多信息见故障排除部分.\n * ProtectUefiServices: NO\n   * 保护UEFI服务不被固件覆盖，主要与vm、Icelake和Z390系统有关。\n   * 如果在Z390上，启用此选项。\n * ProvideCustomSlide: YES\n   * 用于Slide变量计算。然而，这种选项的必要性取决于OCABC: Only N/256 slide values are usable! 调试日志中的消息。如果显示 OCABC: All slides are usable! You can disable ProvideCustomSlide! 您可以禁用ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * 生成与macOS兼容的内存映射，可能会在一些笔记本电脑OEM固件上崩溃，所以如果您收到早期引导失败，禁用此功能。\n * ResizeAppleGpuBars: -1\n   * 启动macOS时，如果设置为0，将减少GPU PCI条的大小，设置为-1则禁用\n   * 使用此选项可以设置其他PCI Bar值，但可能导致不稳定\n   * 只有在固件中启用了对Resizable BAR的支持时，才需要将此属性设置为0。\n * SetupVirtualMap: YES\n   * 修复了SetVirtualAddresses对虚拟地址的调用，在Skylake和更新的版本上不需要。一些固件如Gigabyte可能仍然需要它，如果没有它，内核将会崩溃。\n * SyncRuntimePermissions: YES\n   * 修正了与MAT表的对齐，并要求使用MAT表启动Windows和Linux，也推荐用于macOS。主要适用于重建苹果内存地图用户。\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\n从映射设置设备属性。\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n本节通过WhateverGreen的Framebuffer补丁指南 设置，用于设置重要的iGPU属性。 如果你有-F系列CPU，你可以忽略这一部分，因为你没有iGPU\n\nconfig.plist还没有这个部分，所以你必须手动创建它。\n\nAAPL,ig-platform-id 是macOS用来确定iGPU驱动程序如何与我们的系统交互的，可以选择的两个值如下:\n\nAAPL,IG-PLATFORM-ID   注释\n07009B3E              使用桌面iGPU驱动显示器时使用\n00009B3E              如果不起作用，可以替换07009B3E\n0300913E              桌面iGPU仅用于计算任务而不驱动显示器时使用的\n\n * 注意:在macOS 10.15.5及更新版本中，使用07009B3E时黑屏似乎有很多问题，如果你遇到类似的问题，请尝试切换到00009B3E\n\n我们还添加了另外两个属性，framebuffer-patch-enable和framebuffer-stolenmem。第一个选项允许通过WhateverGreen.kext打补丁，第二个选项将最小被盗内存设置为19MB。这通常是不必要的，因为可以在BIOS中配置(建议64MB)，但在没有配置时必须配置。\n\n * 注意:无头帧缓冲区(其中dGPU是显示出来的)不需要framebuffer-patch-enable和framebuffer-stolenmem\n\n对于在B360、B365、H310、H370、Z390上啰嗦模式后出现黑屏问题的用户，请参见 BusID iGPU 补丁 页面\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   07009B3E\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\n\n(这是一个没有dGPU和BIOS选项没有iGPU内存的桌面UHD 630的例子)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * 应用AppleALC音频注入，你需要自己研究你的主板有哪个编解码器，并将其与AppleALC的布局匹配。AppleALC支持编解码器.\n * 你可以直接删除这个属性，因为目前它还没有被使用\n\n对于我们来说，我们将使用引导参数alcid=xxx来完成此操作。alcid将覆盖所有其他布局id。更多信息请参见安装后页面\n\n\n# Delete\n\n从映射中删除设备属性，我们可以忽略它\n\n\n# Kernel\n\n\n\n\n# Add\n\n在这里，我们指定要加载哪些kext，以什么特定的顺序加载，以及每个kext适用于什么体系结构。默认情况下，我们建议保留ProperTree所做的操作，但对于32位cpu，请参见以下内容:\n\n更深入信息\n\n最主要的你需要记住的是:\n\n * 装载顺序\n   * 记住，任何插件都应该在它的依赖项之后加载\n   * 这意味着像Lilu这样的kext 必须出现在VirtualSMC、AppleALC、WhateverGreen等之前\n\n提醒一下ProperTree用户可以运行Cmd/Ctrl + Shift + R以正确的顺序添加他们所有的kext，而无需手动输入每个kext。\n\n * Arch\n   * 该kext支持的体系结构\n   * 目前支持的值是 Any, i386 (32位), 和 x86_64 (64位)\n * BundlePath\n   * kext的名称\n   * 示例: Lilu.kext\n * Enabled\n   * 不言自明，启用或禁用kext\n * ExecutablePath\n   * 实际可执行文件的路径隐藏在kext中，你可以通过右键单击并选择显示包内容来查看你的kext的路径。一般来说，它们将是Contents/MacOS/Kext，但有些将Kext隐藏在Plugin文件夹下。请注意，plist中仅kext不需要填充该属性。\n   * 示例: Contents/MacOS/Lilu\n * MinKernel\n   * kext将被注入到的最低内核版本，有关可能的值，请参见下表\n   * 示例. 12.00.00 用于 OS X 10.8\n * MaxKernel\n   * kext将被注入到的最高内核版本，可能的值见下表\n   * 示例. 11.99.99 用于 OS X 10.7\n * PlistPath\n   * 隐藏在kext中的info.plist的路径\n   * 示例: Contents/Info.plist\n\nKernel Support Table\n\nOS X 版本   MINKERNEL   MAXKERNEL\n10.4      8.0.0       8.99.99\n10.5      9.0.0       9.99.99\n10.6      10.0.0      10.99.99\n10.7      11.0.0      11.99.99\n10.8      12.0.0      12.99.99\n10.9      13.0.0      13.99.99\n10.10     14.0.0      14.99.99\n10.11     15.0.0      15.99.99\n10.12     16.0.0      16.99.99\n10.13     17.0.0      17.99.99\n10.14     18.0.0      18.99.99\n10.15     19.0.0      19.99.99\n11        20.0.0      20.99.99\n12        21.0.0      21.99.99\n13        22.0.0      22.99.99\n\n\n# Emulate\n\n用于欺骗不支持的cpu，如Pentiums和Celerons\n\n * Cpuid1Mask: 不填写\n * Cpuid1Data: 不填写\n\n\n# Force\n\n用于从系统卷中加载kext，只适用于某些特定的kext不在缓存中的旧操作系统。(例如 IONetworkingFamily 在 10.6).\n\n对我们来说,我们可以忽略。\n\n\n# Block\n\n阻止某些kext加载。与我们无关。\n\n\n# Patch\n\n对内核和kext进行补丁。\n\n\n# Quirks\n\n信息\n\n与内核相关的设置，我们将启用以下功能:\n\n选项                        是否启用   注释\nAppleXcpmCfgLock          YES    如果在BIOS中禁用了CFG-Lock，则不需要\nDisableIoMapper           YES    如果在BIOS中禁用了VT-D，则不需要\nLapicKernelPanic          NO     惠普的机器需要这个选项\nPanicNoKextDump           YES    \nPowerTimeoutKernelPanic   YES    \nXhciPortLimit             YES    如果运行macOS 11.3+则禁用\n\n更深入信息\n * AppleCpuPmCfgLock: NO\n   * 仅当BIOS中不能禁用CFG-Lock时需要\n   * 只适用于Ivy Bridge 及以上\n     * 注意:Broadwell及更老版本在运行10.10或更老版本时需要此功能\n * AppleXcpmCfgLock: YES\n   * 仅当BIOS中不能禁用CFG-Lock时需要\n   * 仅适用于Haswell和更新版本\n     * 注意:Ivy Bridge-E也包括在内，因为它支持XCPM\n * CustomSMBIOSGuid: NO\n   * 为UpdateSMBIOSMode设置为Custom时执行GUID补丁。通常与戴尔笔记本电脑有关\n   * 通过UpdateSMBIOSMode自定义模式启用此选项也可以禁用SMBIOS注入到“非苹果”操作系统中，但我们不支持这种方法，因为它破坏了Bootcamp兼容性。使用风险自负\n * DisableIoMapper: YES\n   * 如果在BIOS中无法禁用或其他操作系统需要禁用VT-D，则需要绕过VT-D，这是dart=0的更好替代方案，因为SIP可以在Catalina中继续运行\n * DisableLinkeditJettison: YES\n   * 允许Lilu和其他人在不需要keepsyms=1的情况下拥有更可靠的性能\n * DisableRtcChecksum: NO\n   * 防止AppleRTC写入主校验和(0x58-0x59)，这对于接收BIOS重置或在重启/关机后进入安全模式的用户是必需的\n * ExtendBTFeatureFlags NO\n   * 对于那些非apple /非fenvi卡有连续性问题的人很有帮助\n * LapicKernelPanic: NO\n   * 在AP core lapic中断上禁用内核恐慌，这通常是HP系统需要的。相当于Clover的 Kernel LAPIC\n * LegacyCommpage: NO\n   * 解决macOS中64位cpu的SSSE3需求，主要与64位Pentium 4 cpu(即Prescott)相关\n * PanicNoKextDump: YES\n   * 允许在发生内核严重故障时读取内核严重故障日志\n * PowerTimeoutKernelPanic: YES\n   * 帮助修复macOS Catalina中与Apple驱动程序有关的电源变化的内核恐慌，最显著的是数字音频。\n * SetApfsTrimTimeout: -1\n   * 为ssd上的APFS文件系统设置微调超时，以微秒为单位，仅适用于macOS 10.14和更新版本有问题的ssd。\n * XhciPortLimit: YES\n   * 这实际上是15端口限制补丁，不要依赖它，因为它不是修复USB的保证解决方案。如果可能，请创建一个USB映射。\n   * macOS 11.3+， XhciPortLimit可能无法按预期功能。 我们建议用户在升级前禁用此怪癖和映射或从Windows映射. 您也可以安装macOS 11.2.3或更老版本。\n\n\n# Scheme\n\n与传统引导(即 10.4-10.6)相关的设置，大多数情况下你可以跳过，但是对于那些计划引导传统操作系统的人，你可以看到以下内容:\n\n更深入信息\n\n * FuzzyMatch: True\n   \n   * 用于忽略kernelcache的校验和，而不是选择可用的最新缓存。可以帮助提高10.6中许多机器的引导性能\n\n * KernelArch: x86_64\n   \n   * 设置内核的arch类型，你可以在Auto、i386(32位)和x86_64(64位)之间选择。\n   * 如果你正在启动需要32位内核的旧操作系统(即ie 10.4和10.5)，我们建议将其设置为Auto，并让macOS根据你的SMBIOS来决定。支持的值见下表:\n     * 10.4-10.5 — x86_64, i386 或 i386-user32\n       * i386-user32 指向32位用户空间，因此32位cpu必须使用它(或缺少SSSE3的cpu)\n       * x86_64 仍然使用32位内核空间，但是可以确保10.4/5的64位用户空间\n     * 10.6 — i386, i386-user32, 或 x86_64\n     * 10.7 — i386 或r x86_64\n     * 10.8 或更新r — x86_64\n\n * KernelCache: Auto\n   \n   * 设置内核缓存类型，主要用于调试，因此我们建议使用Auto以获得最佳支持\n\n\n# Misc\n\n\n\n\n# Boot\n\n信息\n\n选项              是否启用   注释\nHideAuxiliary   YES    按空格键显示macOS恢复等辅助项\n\n更深入信息\n * HideAuxiliary: YES\n   * 此选项将在选择器中隐藏补充条目，例如macOS recovery和tools。隐藏辅助条目可以提高多磁盘系统的启动性能。您可以在选择器处按空格键来显示这些条目\n\n\n# Debug\n\n信息\n\n有助于调试OpenCore引导问题(除了DisplayDelay，我们将更改所有内容):\n\n选项                是否启用\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\n更多深入信息\n * AppleDebug: YES\n   * 启用boot.efi日志记录，用于调试。注意只有10.15.4及更高版本支持这个功能\n * ApplePanic: YES\n   * 试图将内核异常记录到磁盘\n * DisableWatchDog: YES\n   * 禁用UEFI watchdog，可以帮助解决早期引导问题\n * DisplayLevel: 2147483650\n   * 显示更多的调试信息，需要调试版本的OpenCore\n * SysReport: NO\n   * 有助于调试，例如转储ACPI表\n   * 注意，这仅限于调试版本的OpenCore\n * Target: 67\n   * 显示更多调试信息，需要OpenCore的调试版本\n\n这些值是基于OpenCore调试中计算的值。\n\n\n# Security\n\n信息\n\n安全性是非常不言自明的，不要跳过。我们将修改以下内容:\n\n选项                     是否启用       注释\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    将此设置为 Default ，以便OpenCore自动设置与您的SMBIOS对应的正确值。下一页将详细介绍这个设置。\nVault                  Optional   这是一个单词，省略此设置是不行的。如果您没有将其设置为Optional，您将会后悔，注意它是区分大小写的\n\n更深入信息\n\n * AllowSetDefault: YES\n   \n   * 允许CTRL+Enter和CTRL+Index在选择器中设置默认启动设备\n\n * ApECID: 0\n   \n   * 用于网络个性化的安全启动标识符，由于macOS安装程序中的一个bug，目前这种方式是不可靠的，因此我们强烈建议您保留默认设置。\n\n * AuthRestart: NO\n   \n   * 启用FileVault 2的认证重启，重启时不需要密码。可以被认为是可选的安全风险吗\n\n * BlacklistAppleUpdate: YES\n   \n   * 用于阻止固件更新，作为额外的保护级别，因为macOS Big Sur不再使用run-efi-updater变量\n\n * DmgLoading: Signed\n   \n   * 确保只加载经过签名的dmg\n\n * ExposeSensitiveData: 6\n   \n   * 显示更多调试信息，需要OpenCore的调试版本\n\n * Vault: Optional\n   \n   * 我们不会处理vault，所以我们可以忽略它，您将无法使用这个set来引导。 *这是一个单词，省略此设置是不可选的。如果你不把它设置为Optional，你会后悔的，注意它是区分大小写的\n\n * ScanPolicy: 0\n   \n   * 0允许您查看所有可用的驱动器，请参阅安全 部分了解更多详细信息。如果设置为默认，将不会启动USB设备\n\n * SecureBootModel: Default\n   \n   * 在macOS中控制Apple的安全启动功能，请参阅Security 部分了解更多细节。\n   * 注意:用户可能会发现在已经安装的系统上升级OpenCore可能会导致早期引导失败。要解决这个问题，请参见这里: 卡在 OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\n用于串行调试(一切都保留默认值)。\n\n\n# Tools\n\n用于运行OC调试工具，如shell, ProperTree的snapshot函数将为您添加这些。\n\n\n# Entries\n\n用于指定无法通过OpenCore自然找到的不规则引导路径。\n\n这里不会介绍更多信息，请参阅 Configuration.pdf 的8.6\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\n用于OpenCore的UI缩放，default对我们有用。更多信息请参见深入部分\n\n更深入信息\n\n启动器路径，主要用于UI修改\n\n * DefaultBackgroundColor: boot.efi使用的背景色\n   * 00000000: 西拉黑\n   * BFBFBF00: 浅灰色\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore的NVRAM GUID，主要与RTCMemoryFixup用户相关\n\n更深入信息\n * rtc-blacklist: <>\n   * 与RTCMemoryFixup一起使用，参见这里了解更多信息:修复RTC写入问题\n   * 大多数用户可以忽略此部分\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\n系统完整性保护位掩码\n\n * 通用引导参数:\n\nBOOT-ARGS     描述\n-v            启用详细模式，在你启动时显示所有滚动的幕后文本，而不是苹果logo和进度条。它对任何使用黑苹果的人都是无价的，因为它让你了解引导过程的内部情况，并可以帮助你识别问题、问题kext等\ndebug=0x100   该命令禁用macOS的watchdog，该watchdog有助于防止在内核出现严重错误时重新启动。这样你就有希望收集到一些有用的信息并解决问题。\nkeepsyms=1    这是debug=0x100的伴随设置，它告诉操作系统在内核出现紧急情况时也打印符号。这可以提供一些更有用的见解，以了解造成崩溃本身的原因。\nalcid=1       用于为AppleALC设置layout-id，请参阅支持的编解码器\n              以确定适用于特定系统的布局。关于这方面的更多信息，请参阅安装后页面\n\n * 特定于gpu的引导参数:\n\nBOOT-ARGS        描述\nagdpmod=pikera   用于在一些Navi gpu (RX 5000 &\n                 6000系列)上禁用板ID检查，没有这个你会得到一个黑屏。如果你没有Navi请不要使用(即Polaris和Vega卡不应该使用这个)\n-radcodec        用于允许官方不支持的AMD gpu(欺骗)使用硬件视频编码器\nradpg=15         用于禁用一些电源门控模式，有助于正确初始化基于AMD Cape Verde的gpu\nunfairgva=1      用于在支持的AMD gpu上修复硬件DRM支持\nnvda_drv_vrl=1   用于在macOS Sierra和High Sierra的Maxwell和Pascal卡上启用NVIDIA的Web驱动程序\n-wegnoegpu       用于禁用除集成的Intel\n                 iGPU之外的所有其他gpu，对于那些想运行新版本的macOS，而他们的dGPU不支持的人很有用\n\n * csr-active-config: 00000000\n   \n   * 设置“系统完整性保护”(SIP)。通常建议通过恢复分区使用csrutil进行更改。\n   * 默认情况下，csr-active-config设置为00000000，以启用系统完整性保护。您可以选择许多不同的值，但总的来说，为了最佳安全实践，我们建议启用此选项。更多信息可以在我们的故障排除页面中找到:禁用SIP\n\n * run-efi-updater: No\n   \n   * 这用于防止苹果的固件更新包安装和破坏引导顺序;这很重要，因为这些固件更新(意味着mac)将无法工作。\n\n * prev-lang:kbd: <>\n   \n   * 需要lang-COUNTRY:keyboard格式的非拉丁键盘，建议保持空白，尽管你可以指定它(示例配置中默认是俄语):\n   * 中文: zh-Hans:252(十六进制为7A682D48 616E733A 323532)\n   * 完整列表可在 AppleKeyboardLayouts.txt中找到\n   * 提示:prevr-lang:kbd可以被转换成字符串，所以你可以直接输入zh-Hans:252，而不是转换成十六进制\n   * 提示2:prevr-lang:kbd可以设置为一个空白变量(例如<>)，这将强制在首次启动时显示语言选择器。\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   zh-Hans:252\n\n\n# Delete\n\n信息\n\n强制重写NVRAM变量，请注意，Add 不会覆盖 NVRAM中已经存在的值，所以像boot-args这样的值应该保持不变。对我们来说，我们将更改以下内容:\n\n选项           启用\nWriteFlash   YES\n\n更深入信息\n\n * LegacySchema\n   \n   * 用于赋值NVRAM变量，与OpenVariableRuntimeDxe.efi一起使用。仅适用于没有原生NVRAM的系统\n\n * WriteFlash: YES\n   \n   * 允许所有添加的变量写入闪存。\n\n\n# PlatformInfo\n\n\n\n信息\n\n为了设置SMBIOS信息，我们将使用CorpNewt的GenSMBIOS 应用程序。\n\n在这个Coffee Lake的例子中，我们将选择iMac19,1 SMBIOS——这是为了兼容性而故意这么做的。Coffee Lake主要使用两种SMBIOS:\n\nSMBIOS     硬件\niMac19,1   Mojave和更新的\niMac18,3   用于High Sierra和更老的\n\n * 当你有Pascal或Maxwell dGPU并且仅限于带有Web驱动的macOS版本时，你将使用18,3\n\n运行GenSMBIOS，选择选项1下载MacSerial，选择选项3选择SMBIOS。这会给我们一个类似下面的输出:\n\n  #######################################################\n #               iMac19,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac19,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\nType部分复制到Generic -> SystemProductName。\n\nSerial部分复制到Generic -> SystemSerialNumber。\n\nBoard Serial 部分复制到 Generic -> MLB.\n\nSmUUID 部分复制到 Generic -> SystemUUID.\n\n我们将Generic -> ROM设置为苹果ROM(从真正的Mac中转储)，你的网卡Mac地址，或任何随机的Mac地址(可以是6个随机字节，在本指南中我们将使用11223300 0000。安装后，请跟随修复isservices 页面了解如何找到您的真实MAC地址)\n\n提醒你需要一个无效的串行!当你在苹果的检查覆盖页面中输入你的序列号时，你会得到一条信息，比如“无法检查此序列号的覆盖范围”。"\n\nAutomatic: YES\n\n * 基于Generic节而不是DataHub、NVRAM和SMBIOS节生成platformminfo\n\n\n# Generic\n\n更多深入信息\n\n * AdviseFeatures: NO\n   \n   * 当EFI分区不是Windows驱动器上的第一个分区时使用\n\n * MaxBIOSVersion: NO\n   \n   * 将BIOS版本设置为Max，以避免Big Sur+的固件更新，主要适用于正版mac。\n\n * ProcessorType: 0\n   \n   * 设置为0用于自动类型检测，但是如果需要，这个值可以被覆盖。参见 AppleSmBios.h 获取可能的值\n\n * SpoofVendor: YES\n   \n   * 将供应商字段替换为Acidanthera，在大多数情况下使用苹果作为供应商通常不安全\n\n * SystemMemoryStatus: Auto\n   \n   * 在SMBIOS信息中设置内存是否焊接，纯粹用于修饰，因此我们建议使用Auto\n\n * UpdateDataHub: YES\n   \n   * 更新数据中心字段\n\n * UpdateNVRAM: YES\n   \n   * 更新NVRAM字段\n\n * UpdateSMBIOS: YES\n   \n   * 更新SMBIOS字段\n\n * UpdateSMBIOSMode: Create\n   \n   * 用新分配的EfiReservedMemoryType替换表，在需要CustomSMBIOSGuid的Dell笔记本电脑上使用Custom\n   * 设置为Custom并启用CustomSMBIOSGuid也可以禁用SMBIOS注入到“非apple”操作系统中，但是我们不支持这种方法，因为它破坏了Bootcamp的兼容性。使用风险自负\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * 强制 .efi 驱动程序，更改为NO将自动连接添加的UEFI驱动程序。这可以使启动稍微快一些，但不是所有的驱动程序都自己连接。例如某些文件系统驱动程序不能加载。\n\n\n# Drivers\n\n在这里添加你的.efi驱动程序。\n\n在这里的驱动必须有:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\n更深入信息\n\nKEY         TYPE      描述\nPath        String    OC/Drivers 目录下文件的路径\nLoadEarly   Boolean   在NVRAM设置之前加载驱动程序，如果使用传统NVRAM，应该只启用OpenRuntime.efi和OpenVariableRuntimeDxe.efi\nArguments   String    有些驱动程序接受这里指定的其他参数。\n\n\n# APFS\n\n默认情况下，OpenCore只从macOS Big Sur及更新版本加载APFS驱动程序。如果你启动的是macOS Catalina或更早的版本，你可能需要设置一个新的最低版本/日期。 不设置这个会导致OpenCore找不到你的macOS分区!\n\nmacOS Sierra和更早的版本使用HFS而不是APFS。如果要启动旧版本的macOS，可以跳过本节。\n\nAPFS 版本\n\n如果改变了最小版本，则需要设置MinVersion和MinDate。\n\nMACOS 版本                MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\n与AudioDxe设置相关，我们将忽略它(保持默认设置)。这与macOS中的音频支持无关。\n\n * 进一步使用AudioDxe和音频部分，请参见安装后页面: 添加GUI和启动铃声\n\n\n# Input\n\n与用于FileVault和热键支持的boot.efi键盘传递相关，将所有内容保留为默认值，因为我们不需要这些选项。更多详细信息:Security and FileVault\n\n\n# Output\n\n关于OpenCore的视觉输出，将所有内容保留为默认值，因为我们不需要这些选项。\n\n更深入信息\n\nOUTPUT    VALUE   注释\nUIScale   0       0将根据分辨率自动设置\n                  -1将保持它不变\n                  1表示1倍缩放，用于正常显示\n                  2表示2倍缩放，对于HiDPI显示\n\n\n# ProtocolOverrides\n\n主要针对虚拟机、传统mac和FileVault用户。更多详细信息:Security and FileVault\n\n\n# Quirks\n\n信息\n\n关于UEFI环境的选项，对于我们来说，我们将改变以下内容:\n\nQUIRK              ENABLED   注释\nUnblockFsConnect   NO        主要用于惠普主板\n\n更深入信息\n\n * DisableSecurityPolicy: NO\n   \n   * 禁用固件中的平台安全策略，建议用于有bug的固件，其中禁用安全引导不允许第三方固件驱动加载。\n   * 如果运行微软Surface设备，建议启用此选项\n\n * RequestBootVarRouting: YES\n   \n   * 将AptioMemoryFix从EFI_GLOBAL_VARIABLE_GUID重定向到OC_VENDOR_VARIABLE_GUID。当固件试图删除启动项时需要启用，建议在所有系统上启用，以确保正确的更新安装，启动磁盘控制面板的功能等。\n\n * UnblockFsConnect: NO\n   \n   * 一些固件块分区处理通过驱动模式打开它们，这导致文件系统协议无法安装。主要适用于没有列出驱动器的HP系统\n\n\n# ReservedMemory\n\n用于将某些内存区域从操作系统中免除使用，主要与Sandy Bridge igpu或具有错误内存的系统相关。在本指南中没有涉及这种选项的使用\n\n\n# 清理\n\n现在你可以保存它，并将其放入EFI/OC下的EFI中。\n\n对于那些有启动问题的人，请确保首先阅读故障诊断部分 如果您的问题仍然没有答案，我们有大量的资源供您使用:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS 设置\n\n * 注意:大多数选项可能不会出现在您的固件中，我们建议尽可能匹配，但如果这些选项在您的BIOS中不可用，也不要太担心\n\n\n# 禁用\n\n * 快速启动（Fast Boot）\n * 安全引导（Secure Boot）\n * 串口/COM端口（Serial/COM Port）\n * 并口（Parallel Port）\n * VT-d (如果将DisableIoMapper设置为YES，则可以启用)\n * 兼容性支持模块 (CSM) (在大多数情况下必须关闭，当该选项启用时，像gIO这样的GPU错误/停顿很常见)\n * Thunderbolt (用于初始安装，因为如果安装不正确，Thunderbolt可能会导致问题)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2写保护)(此选项必须关闭，如果你找不到该选项，则在Kernel -> Quirks下启用AppleXcpmCfgLock。你的黑苹果将无法在启用CFG-Lock的情况下启动)\n\n\n# 启用\n\n * VT-x\n * 4G以上解码（Above 4G Decoding）\n * 超线程（Hyper-Threading）\n * 执行禁用位（Execute Disable Bit）\n * EHCI/XHCI切换（EHCI/XHCI Hand-off）\n * 操作系统类型:Windows 8.1/10 UEFI模式(一些主板可能需要”其他操作系统”代替)\n * DVMT预分配（DVMT Pre-Allocated）(iGPU内存): 64MB或更高\n * SATA模式:AHCI\n\n\n# 完成后，我们需要编辑一些额外的值。转到 苹果安全引导页',normalizedContent:'# 桌面 coffee lake\n\n支持          版本\n初始macos支持   macos 10.13, high sierra\n\n\n# 起点\n\n制作一个config plist看起来很难，其实并不难。这只是需要一些时间，本指南将告诉您如何配置所有内容，您不会被冷落。这也意味着如果你有问题，检查你的配置设置以确保它们是正确的。opencore的主要注意事项:\n\n * 所有属性必须定义, 没有默认的opencore将出现错误，所以不要删除节，除非明确告知。如果指南没有提到该选项，请将其保留为默认值。\n * sample.plist不能按原样使用, 您必须配置您的系统\n * do not use configurators, 这些配置器很少遵守opencore的规则，甚至一些像mackie的配置器会添加clover属性和破坏plists!\n\n现在，我们来快速回顾一下我们需要的工具\n\n * propertree\n   * 通用plist编辑器\n * gensmbios\n   * 用于生成smbios数据\n * sample/config.plist\n   * 请参阅上一节有关如何获取: config.plist 设置\n\n警告\n\n在设置opencore之前，请多次阅读本指南，并确保您已经正确设置了它。请注意，图像并不总是最新的，所以请阅读下面的文本，如果没有提到，则保留为默认值。\n\n\n# acpi\n\n\n\n\n# add\n\n信息\n\n这是你将为系统添加ssdt的地方，这些对于引导macos非常重要，并且有许多用途，例如 usb 映射, 禁用不支持的gpu 在我们的系统中，它甚至需要它才能引导**。制作指南可以在这里找到:开始使用acpi\n\n我们需要几个ssdt来恢复clover提供的功能:\n\n需要ssdts        描述\nssdt-plug      允许haswell上的本地cpu电源管理，更新的版本，请参阅acpi入门指南了解更多详细信息。\nssdt-ec-usbx   修复嵌入式控制器和usb电源，参见acpi指南入门 了解更多详细信息。\nssdt-awac      这是300系列rtc补丁, 大多数b360, b365, h310, h370,\n               z390和一些z370板需要，防止系统启动macos。替代方案是 ssdt-rtc0 当awac\n               ssdt由于缺少遗留rtc时钟而不兼容时，要检查您是否需要它以及使用哪个，请参阅acpi入门 页面.\nssdt-pmc       所以300系列主板(非z370)不会在acpi中声明fw芯片为mmio，所以xnu忽略由uefi内存映射声明的mmio区域。这个ssdt恢复了对nvram的支持。详见\n               acpi入门指南\n\n请注意，您不应该在这里添加您生成的dsdt.aml，它已经在您的固件中了。因此，如果存在，请删除config.plist和efi/oc/acpi下的条目。\n\n对于那些想要更深入地了解转储dsdt、如何制作这些ssdt并编译它们的人，请参阅 acpi入门 页面 编译后的ssdt具有 .aml 扩展名(已编译)，将被保存在efi/oc/acpi文件夹中，并且必须在你的配置文件acpi -> add下指定。\n\n\n# delete\n\n这将阻止某些acpi表加载，对于我们来说，我们可以忽略它。\n\n\n# patch\n\n本节允许我们通过opencore动态修改acpi的部分内容(dsdt、ssdt等)。对我们来说，我们的补丁由我们的ssdt处理。这是一个更简洁的解决方案，因为这将允许我们使用opencore引导windows和其他操作系统\n\n\n# quirks\n\n与acpi相关的设置，将所有内容保留为默认设置，因为我们不需要这些选项。\n\n\n# booter\n\n\n\n本节专门讨论与使用openruntime (aptiomemoryfix.efi的替代品)进行boot.efi补丁相关的问题\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be passthrough to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\n信息\n\n与boot.efi补丁和固件修复相关的设置，对我们来说，我们需要更改以下内容:\n\n选项                       启用    注释\ndevirtualisemmio         yes   \nenablewriteunprotector   no    \nprotectuefiservices      yes   z390系统需要\nrebuildapplememorymap    yes   \nresizeapplegpubars       -1    如果您的固件支持增加gpu条大小(即可缩放条支持)，请将其设置为 0\nsyncruntimepermissions   yes   \n\n更深入信息\n * avoidruntimedefrag: yes\n   * 修复了uefi运行时服务，如日期，时间，nvram，电源控制等\n * devirtualisemmio: yes\n   * 减少被盗内存占用，扩展slide=n值的选项，并对修复z390上的内存分配问题非常有帮助。需要 protectuefiservices 在 icelake 和 z390 coffee lake上.\n * enablesafemodeslide: yes\n   * 允许slide变量在安全模式下使用。\n * enablewriteunprotector: no\n   * 这一选项和rebuildapplememorymap通常会发生冲突，建议在较新的平台上启用后者并禁用此条目。\n   * 然而，由于原始设备制造商没有使用最新的edkii版本，您可能会发现上述组合将导致早期启动失败。这是由于缺少memory_attribute_table，因此我们建议禁用rebuildapplememorymap并启用enablewriteunprotector。有关此问题的更多信息见故障排除部分.\n * protectuefiservices: no\n   * 保护uefi服务不被固件覆盖，主要与vm、icelake和z390系统有关。\n   * 如果在z390上，启用此选项。\n * providecustomslide: yes\n   * 用于slide变量计算。然而，这种选项的必要性取决于ocabc: only n/256 slide values are usable! 调试日志中的消息。如果显示 ocabc: all slides are usable! you can disable providecustomslide! 您可以禁用providecustomslide.\n * rebuildapplememorymap: yes\n   * 生成与macos兼容的内存映射，可能会在一些笔记本电脑oem固件上崩溃，所以如果您收到早期引导失败，禁用此功能。\n * resizeapplegpubars: -1\n   * 启动macos时，如果设置为0，将减少gpu pci条的大小，设置为-1则禁用\n   * 使用此选项可以设置其他pci bar值，但可能导致不稳定\n   * 只有在固件中启用了对resizable bar的支持时，才需要将此属性设置为0。\n * setupvirtualmap: yes\n   * 修复了setvirtualaddresses对虚拟地址的调用，在skylake和更新的版本上不需要。一些固件如gigabyte可能仍然需要它，如果没有它，内核将会崩溃。\n * syncruntimepermissions: yes\n   * 修正了与mat表的对齐，并要求使用mat表启动windows和linux，也推荐用于macos。主要适用于重建苹果内存地图用户。\n\n\n# deviceproperties\n\n\n\n\n# add\n\n从映射设置设备属性。\n\npciroot(0x0)/pci(0x2,0x0)\n\n本节通过whatevergreen的framebuffer补丁指南 设置，用于设置重要的igpu属性。 如果你有-f系列cpu，你可以忽略这一部分，因为你没有igpu\n\nconfig.plist还没有这个部分，所以你必须手动创建它。\n\naapl,ig-platform-id 是macos用来确定igpu驱动程序如何与我们的系统交互的，可以选择的两个值如下:\n\naapl,ig-platform-id   注释\n07009b3e              使用桌面igpu驱动显示器时使用\n00009b3e              如果不起作用，可以替换07009b3e\n0300913e              桌面igpu仅用于计算任务而不驱动显示器时使用的\n\n * 注意:在macos 10.15.5及更新版本中，使用07009b3e时黑屏似乎有很多问题，如果你遇到类似的问题，请尝试切换到00009b3e\n\n我们还添加了另外两个属性，framebuffer-patch-enable和framebuffer-stolenmem。第一个选项允许通过whatevergreen.kext打补丁，第二个选项将最小被盗内存设置为19mb。这通常是不必要的，因为可以在bios中配置(建议64mb)，但在没有配置时必须配置。\n\n * 注意:无头帧缓冲区(其中dgpu是显示出来的)不需要framebuffer-patch-enable和framebuffer-stolenmem\n\n对于在b360、b365、h310、h370、z390上啰嗦模式后出现黑屏问题的用户，请参见 busid igpu 补丁 页面\n\nkey                        type   value\naapl,ig-platform-id        data   07009b3e\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\n\n(这是一个没有dgpu和bios选项没有igpu内存的桌面uhd 630的例子)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * 应用applealc音频注入，你需要自己研究你的主板有哪个编解码器，并将其与applealc的布局匹配。applealc支持编解码器.\n * 你可以直接删除这个属性，因为目前它还没有被使用\n\n对于我们来说，我们将使用引导参数alcid=xxx来完成此操作。alcid将覆盖所有其他布局id。更多信息请参见安装后页面\n\n\n# delete\n\n从映射中删除设备属性，我们可以忽略它\n\n\n# kernel\n\n\n\n\n# add\n\n在这里，我们指定要加载哪些kext，以什么特定的顺序加载，以及每个kext适用于什么体系结构。默认情况下，我们建议保留propertree所做的操作，但对于32位cpu，请参见以下内容:\n\n更深入信息\n\n最主要的你需要记住的是:\n\n * 装载顺序\n   * 记住，任何插件都应该在它的依赖项之后加载\n   * 这意味着像lilu这样的kext 必须出现在virtualsmc、applealc、whatevergreen等之前\n\n提醒一下propertree用户可以运行cmd/ctrl + shift + r以正确的顺序添加他们所有的kext，而无需手动输入每个kext。\n\n * arch\n   * 该kext支持的体系结构\n   * 目前支持的值是 any, i386 (32位), 和 x86_64 (64位)\n * bundlepath\n   * kext的名称\n   * 示例: lilu.kext\n * enabled\n   * 不言自明，启用或禁用kext\n * executablepath\n   * 实际可执行文件的路径隐藏在kext中，你可以通过右键单击并选择显示包内容来查看你的kext的路径。一般来说，它们将是contents/macos/kext，但有些将kext隐藏在plugin文件夹下。请注意，plist中仅kext不需要填充该属性。\n   * 示例: contents/macos/lilu\n * minkernel\n   * kext将被注入到的最低内核版本，有关可能的值，请参见下表\n   * 示例. 12.00.00 用于 os x 10.8\n * maxkernel\n   * kext将被注入到的最高内核版本，可能的值见下表\n   * 示例. 11.99.99 用于 os x 10.7\n * plistpath\n   * 隐藏在kext中的info.plist的路径\n   * 示例: contents/info.plist\n\nkernel support table\n\nos x 版本   minkernel   maxkernel\n10.4      8.0.0       8.99.99\n10.5      9.0.0       9.99.99\n10.6      10.0.0      10.99.99\n10.7      11.0.0      11.99.99\n10.8      12.0.0      12.99.99\n10.9      13.0.0      13.99.99\n10.10     14.0.0      14.99.99\n10.11     15.0.0      15.99.99\n10.12     16.0.0      16.99.99\n10.13     17.0.0      17.99.99\n10.14     18.0.0      18.99.99\n10.15     19.0.0      19.99.99\n11        20.0.0      20.99.99\n12        21.0.0      21.99.99\n13        22.0.0      22.99.99\n\n\n# emulate\n\n用于欺骗不支持的cpu，如pentiums和celerons\n\n * cpuid1mask: 不填写\n * cpuid1data: 不填写\n\n\n# force\n\n用于从系统卷中加载kext，只适用于某些特定的kext不在缓存中的旧操作系统。(例如 ionetworkingfamily 在 10.6).\n\n对我们来说,我们可以忽略。\n\n\n# block\n\n阻止某些kext加载。与我们无关。\n\n\n# patch\n\n对内核和kext进行补丁。\n\n\n# quirks\n\n信息\n\n与内核相关的设置，我们将启用以下功能:\n\n选项                        是否启用   注释\napplexcpmcfglock          yes    如果在bios中禁用了cfg-lock，则不需要\ndisableiomapper           yes    如果在bios中禁用了vt-d，则不需要\nlapickernelpanic          no     惠普的机器需要这个选项\npanicnokextdump           yes    \npowertimeoutkernelpanic   yes    \nxhciportlimit             yes    如果运行macos 11.3+则禁用\n\n更深入信息\n * applecpupmcfglock: no\n   * 仅当bios中不能禁用cfg-lock时需要\n   * 只适用于ivy bridge 及以上\n     * 注意:broadwell及更老版本在运行10.10或更老版本时需要此功能\n * applexcpmcfglock: yes\n   * 仅当bios中不能禁用cfg-lock时需要\n   * 仅适用于haswell和更新版本\n     * 注意:ivy bridge-e也包括在内，因为它支持xcpm\n * customsmbiosguid: no\n   * 为updatesmbiosmode设置为custom时执行guid补丁。通常与戴尔笔记本电脑有关\n   * 通过updatesmbiosmode自定义模式启用此选项也可以禁用smbios注入到“非苹果”操作系统中，但我们不支持这种方法，因为它破坏了bootcamp兼容性。使用风险自负\n * disableiomapper: yes\n   * 如果在bios中无法禁用或其他操作系统需要禁用vt-d，则需要绕过vt-d，这是dart=0的更好替代方案，因为sip可以在catalina中继续运行\n * disablelinkeditjettison: yes\n   * 允许lilu和其他人在不需要keepsyms=1的情况下拥有更可靠的性能\n * disablertcchecksum: no\n   * 防止applertc写入主校验和(0x58-0x59)，这对于接收bios重置或在重启/关机后进入安全模式的用户是必需的\n * extendbtfeatureflags no\n   * 对于那些非apple /非fenvi卡有连续性问题的人很有帮助\n * lapickernelpanic: no\n   * 在ap core lapic中断上禁用内核恐慌，这通常是hp系统需要的。相当于clover的 kernel lapic\n * legacycommpage: no\n   * 解决macos中64位cpu的ssse3需求，主要与64位pentium 4 cpu(即prescott)相关\n * panicnokextdump: yes\n   * 允许在发生内核严重故障时读取内核严重故障日志\n * powertimeoutkernelpanic: yes\n   * 帮助修复macos catalina中与apple驱动程序有关的电源变化的内核恐慌，最显著的是数字音频。\n * setapfstrimtimeout: -1\n   * 为ssd上的apfs文件系统设置微调超时，以微秒为单位，仅适用于macos 10.14和更新版本有问题的ssd。\n * xhciportlimit: yes\n   * 这实际上是15端口限制补丁，不要依赖它，因为它不是修复usb的保证解决方案。如果可能，请创建一个usb映射。\n   * macos 11.3+， xhciportlimit可能无法按预期功能。 我们建议用户在升级前禁用此怪癖和映射或从windows映射. 您也可以安装macos 11.2.3或更老版本。\n\n\n# scheme\n\n与传统引导(即 10.4-10.6)相关的设置，大多数情况下你可以跳过，但是对于那些计划引导传统操作系统的人，你可以看到以下内容:\n\n更深入信息\n\n * fuzzymatch: true\n   \n   * 用于忽略kernelcache的校验和，而不是选择可用的最新缓存。可以帮助提高10.6中许多机器的引导性能\n\n * kernelarch: x86_64\n   \n   * 设置内核的arch类型，你可以在auto、i386(32位)和x86_64(64位)之间选择。\n   * 如果你正在启动需要32位内核的旧操作系统(即ie 10.4和10.5)，我们建议将其设置为auto，并让macos根据你的smbios来决定。支持的值见下表:\n     * 10.4-10.5 — x86_64, i386 或 i386-user32\n       * i386-user32 指向32位用户空间，因此32位cpu必须使用它(或缺少ssse3的cpu)\n       * x86_64 仍然使用32位内核空间，但是可以确保10.4/5的64位用户空间\n     * 10.6 — i386, i386-user32, 或 x86_64\n     * 10.7 — i386 或r x86_64\n     * 10.8 或更新r — x86_64\n\n * kernelcache: auto\n   \n   * 设置内核缓存类型，主要用于调试，因此我们建议使用auto以获得最佳支持\n\n\n# misc\n\n\n\n\n# boot\n\n信息\n\n选项              是否启用   注释\nhideauxiliary   yes    按空格键显示macos恢复等辅助项\n\n更深入信息\n * hideauxiliary: yes\n   * 此选项将在选择器中隐藏补充条目，例如macos recovery和tools。隐藏辅助条目可以提高多磁盘系统的启动性能。您可以在选择器处按空格键来显示这些条目\n\n\n# debug\n\n信息\n\n有助于调试opencore引导问题(除了displaydelay，我们将更改所有内容):\n\n选项                是否启用\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\n更多深入信息\n * appledebug: yes\n   * 启用boot.efi日志记录，用于调试。注意只有10.15.4及更高版本支持这个功能\n * applepanic: yes\n   * 试图将内核异常记录到磁盘\n * disablewatchdog: yes\n   * 禁用uefi watchdog，可以帮助解决早期引导问题\n * displaylevel: 2147483650\n   * 显示更多的调试信息，需要调试版本的opencore\n * sysreport: no\n   * 有助于调试，例如转储acpi表\n   * 注意，这仅限于调试版本的opencore\n * target: 67\n   * 显示更多调试信息，需要opencore的调试版本\n\n这些值是基于opencore调试中计算的值。\n\n\n# security\n\n信息\n\n安全性是非常不言自明的，不要跳过。我们将修改以下内容:\n\n选项                     是否启用       注释\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    将此设置为 default ，以便opencore自动设置与您的smbios对应的正确值。下一页将详细介绍这个设置。\nvault                  optional   这是一个单词，省略此设置是不行的。如果您没有将其设置为optional，您将会后悔，注意它是区分大小写的\n\n更深入信息\n\n * allowsetdefault: yes\n   \n   * 允许ctrl+enter和ctrl+index在选择器中设置默认启动设备\n\n * apecid: 0\n   \n   * 用于网络个性化的安全启动标识符，由于macos安装程序中的一个bug，目前这种方式是不可靠的，因此我们强烈建议您保留默认设置。\n\n * authrestart: no\n   \n   * 启用filevault 2的认证重启，重启时不需要密码。可以被认为是可选的安全风险吗\n\n * blacklistappleupdate: yes\n   \n   * 用于阻止固件更新，作为额外的保护级别，因为macos big sur不再使用run-efi-updater变量\n\n * dmgloading: signed\n   \n   * 确保只加载经过签名的dmg\n\n * exposesensitivedata: 6\n   \n   * 显示更多调试信息，需要opencore的调试版本\n\n * vault: optional\n   \n   * 我们不会处理vault，所以我们可以忽略它，您将无法使用这个set来引导。 *这是一个单词，省略此设置是不可选的。如果你不把它设置为optional，你会后悔的，注意它是区分大小写的\n\n * scanpolicy: 0\n   \n   * 0允许您查看所有可用的驱动器，请参阅安全 部分了解更多详细信息。如果设置为默认，将不会启动usb设备\n\n * securebootmodel: default\n   \n   * 在macos中控制apple的安全启动功能，请参阅security 部分了解更多细节。\n   * 注意:用户可能会发现在已经安装的系统上升级opencore可能会导致早期引导失败。要解决这个问题，请参见这里: 卡在 ocb: loadimage failed - security violation\n\n\n# serial\n\n用于串行调试(一切都保留默认值)。\n\n\n# tools\n\n用于运行oc调试工具，如shell, propertree的snapshot函数将为您添加这些。\n\n\n# entries\n\n用于指定无法通过opencore自然找到的不规则引导路径。\n\n这里不会介绍更多信息，请参阅 configuration.pdf 的8.6\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\n用于opencore的ui缩放，default对我们有用。更多信息请参见深入部分\n\n更深入信息\n\n启动器路径，主要用于ui修改\n\n * defaultbackgroundcolor: boot.efi使用的背景色\n   * 00000000: 西拉黑\n   * bfbfbf00: 浅灰色\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore的nvram guid，主要与rtcmemoryfixup用户相关\n\n更深入信息\n * rtc-blacklist: <>\n   * 与rtcmemoryfixup一起使用，参见这里了解更多信息:修复rtc写入问题\n   * 大多数用户可以忽略此部分\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\n系统完整性保护位掩码\n\n * 通用引导参数:\n\nboot-args     描述\n-v            启用详细模式，在你启动时显示所有滚动的幕后文本，而不是苹果logo和进度条。它对任何使用黑苹果的人都是无价的，因为它让你了解引导过程的内部情况，并可以帮助你识别问题、问题kext等\ndebug=0x100   该命令禁用macos的watchdog，该watchdog有助于防止在内核出现严重错误时重新启动。这样你就有希望收集到一些有用的信息并解决问题。\nkeepsyms=1    这是debug=0x100的伴随设置，它告诉操作系统在内核出现紧急情况时也打印符号。这可以提供一些更有用的见解，以了解造成崩溃本身的原因。\nalcid=1       用于为applealc设置layout-id，请参阅支持的编解码器\n              以确定适用于特定系统的布局。关于这方面的更多信息，请参阅安装后页面\n\n * 特定于gpu的引导参数:\n\nboot-args        描述\nagdpmod=pikera   用于在一些navi gpu (rx 5000 &\n                 6000系列)上禁用板id检查，没有这个你会得到一个黑屏。如果你没有navi请不要使用(即polaris和vega卡不应该使用这个)\n-radcodec        用于允许官方不支持的amd gpu(欺骗)使用硬件视频编码器\nradpg=15         用于禁用一些电源门控模式，有助于正确初始化基于amd cape verde的gpu\nunfairgva=1      用于在支持的amd gpu上修复硬件drm支持\nnvda_drv_vrl=1   用于在macos sierra和high sierra的maxwell和pascal卡上启用nvidia的web驱动程序\n-wegnoegpu       用于禁用除集成的intel\n                 igpu之外的所有其他gpu，对于那些想运行新版本的macos，而他们的dgpu不支持的人很有用\n\n * csr-active-config: 00000000\n   \n   * 设置“系统完整性保护”(sip)。通常建议通过恢复分区使用csrutil进行更改。\n   * 默认情况下，csr-active-config设置为00000000，以启用系统完整性保护。您可以选择许多不同的值，但总的来说，为了最佳安全实践，我们建议启用此选项。更多信息可以在我们的故障排除页面中找到:禁用sip\n\n * run-efi-updater: no\n   \n   * 这用于防止苹果的固件更新包安装和破坏引导顺序;这很重要，因为这些固件更新(意味着mac)将无法工作。\n\n * prev-lang:kbd: <>\n   \n   * 需要lang-country:keyboard格式的非拉丁键盘，建议保持空白，尽管你可以指定它(示例配置中默认是俄语):\n   * 中文: zh-hans:252(十六进制为7a682d48 616e733a 323532)\n   * 完整列表可在 applekeyboardlayouts.txt中找到\n   * 提示:prevr-lang:kbd可以被转换成字符串，所以你可以直接输入zh-hans:252，而不是转换成十六进制\n   * 提示2:prevr-lang:kbd可以设置为一个空白变量(例如<>)，这将强制在首次启动时显示语言选择器。\n\nkey             type     value\nprev-lang:kbd   string   zh-hans:252\n\n\n# delete\n\n信息\n\n强制重写nvram变量，请注意，add 不会覆盖 nvram中已经存在的值，所以像boot-args这样的值应该保持不变。对我们来说，我们将更改以下内容:\n\n选项           启用\nwriteflash   yes\n\n更深入信息\n\n * legacyschema\n   \n   * 用于赋值nvram变量，与openvariableruntimedxe.efi一起使用。仅适用于没有原生nvram的系统\n\n * writeflash: yes\n   \n   * 允许所有添加的变量写入闪存。\n\n\n# platforminfo\n\n\n\n信息\n\n为了设置smbios信息，我们将使用corpnewt的gensmbios 应用程序。\n\n在这个coffee lake的例子中，我们将选择imac19,1 smbios——这是为了兼容性而故意这么做的。coffee lake主要使用两种smbios:\n\nsmbios     硬件\nimac19,1   mojave和更新的\nimac18,3   用于high sierra和更老的\n\n * 当你有pascal或maxwell dgpu并且仅限于带有web驱动的macos版本时，你将使用18,3\n\n运行gensmbios，选择选项1下载macserial，选择选项3选择smbios。这会给我们一个类似下面的输出:\n\n  #######################################################\n #               imac19,1 smbios info                  #\n#######################################################\n\ntype:         imac19,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\ntype部分复制到generic -> systemproductname。\n\nserial部分复制到generic -> systemserialnumber。\n\nboard serial 部分复制到 generic -> mlb.\n\nsmuuid 部分复制到 generic -> systemuuid.\n\n我们将generic -> rom设置为苹果rom(从真正的mac中转储)，你的网卡mac地址，或任何随机的mac地址(可以是6个随机字节，在本指南中我们将使用11223300 0000。安装后，请跟随修复isservices 页面了解如何找到您的真实mac地址)\n\n提醒你需要一个无效的串行!当你在苹果的检查覆盖页面中输入你的序列号时，你会得到一条信息，比如“无法检查此序列号的覆盖范围”。"\n\nautomatic: yes\n\n * 基于generic节而不是datahub、nvram和smbios节生成platformminfo\n\n\n# generic\n\n更多深入信息\n\n * advisefeatures: no\n   \n   * 当efi分区不是windows驱动器上的第一个分区时使用\n\n * maxbiosversion: no\n   \n   * 将bios版本设置为max，以避免big sur+的固件更新，主要适用于正版mac。\n\n * processortype: 0\n   \n   * 设置为0用于自动类型检测，但是如果需要，这个值可以被覆盖。参见 applesmbios.h 获取可能的值\n\n * spoofvendor: yes\n   \n   * 将供应商字段替换为acidanthera，在大多数情况下使用苹果作为供应商通常不安全\n\n * systemmemorystatus: auto\n   \n   * 在smbios信息中设置内存是否焊接，纯粹用于修饰，因此我们建议使用auto\n\n * updatedatahub: yes\n   \n   * 更新数据中心字段\n\n * updatenvram: yes\n   \n   * 更新nvram字段\n\n * updatesmbios: yes\n   \n   * 更新smbios字段\n\n * updatesmbiosmode: create\n   \n   * 用新分配的efireservedmemorytype替换表，在需要customsmbiosguid的dell笔记本电脑上使用custom\n   * 设置为custom并启用customsmbiosguid也可以禁用smbios注入到“非apple”操作系统中，但是我们不支持这种方法，因为它破坏了bootcamp的兼容性。使用风险自负\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * 强制 .efi 驱动程序，更改为no将自动连接添加的uefi驱动程序。这可以使启动稍微快一些，但不是所有的驱动程序都自己连接。例如某些文件系统驱动程序不能加载。\n\n\n# drivers\n\n在这里添加你的.efi驱动程序。\n\n在这里的驱动必须有:\n\n * hfsplus.efi\n * openruntime.efi\n\n更深入信息\n\nkey         type      描述\npath        string    oc/drivers 目录下文件的路径\nloadearly   boolean   在nvram设置之前加载驱动程序，如果使用传统nvram，应该只启用openruntime.efi和openvariableruntimedxe.efi\narguments   string    有些驱动程序接受这里指定的其他参数。\n\n\n# apfs\n\n默认情况下，opencore只从macos big sur及更新版本加载apfs驱动程序。如果你启动的是macos catalina或更早的版本，你可能需要设置一个新的最低版本/日期。 不设置这个会导致opencore找不到你的macos分区!\n\nmacos sierra和更早的版本使用hfs而不是apfs。如果要启动旧版本的macos，可以跳过本节。\n\napfs 版本\n\n如果改变了最小版本，则需要设置minversion和mindate。\n\nmacos 版本                min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\n与audiodxe设置相关，我们将忽略它(保持默认设置)。这与macos中的音频支持无关。\n\n * 进一步使用audiodxe和音频部分，请参见安装后页面: 添加gui和启动铃声\n\n\n# input\n\n与用于filevault和热键支持的boot.efi键盘传递相关，将所有内容保留为默认值，因为我们不需要这些选项。更多详细信息:security and filevault\n\n\n# output\n\n关于opencore的视觉输出，将所有内容保留为默认值，因为我们不需要这些选项。\n\n更深入信息\n\noutput    value   注释\nuiscale   0       0将根据分辨率自动设置\n                  -1将保持它不变\n                  1表示1倍缩放，用于正常显示\n                  2表示2倍缩放，对于hidpi显示\n\n\n# protocoloverrides\n\n主要针对虚拟机、传统mac和filevault用户。更多详细信息:security and filevault\n\n\n# quirks\n\n信息\n\n关于uefi环境的选项，对于我们来说，我们将改变以下内容:\n\nquirk              enabled   注释\nunblockfsconnect   no        主要用于惠普主板\n\n更深入信息\n\n * disablesecuritypolicy: no\n   \n   * 禁用固件中的平台安全策略，建议用于有bug的固件，其中禁用安全引导不允许第三方固件驱动加载。\n   * 如果运行微软surface设备，建议启用此选项\n\n * requestbootvarrouting: yes\n   \n   * 将aptiomemoryfix从efi_global_variable_guid重定向到oc_vendor_variable_guid。当固件试图删除启动项时需要启用，建议在所有系统上启用，以确保正确的更新安装，启动磁盘控制面板的功能等。\n\n * unblockfsconnect: no\n   \n   * 一些固件块分区处理通过驱动模式打开它们，这导致文件系统协议无法安装。主要适用于没有列出驱动器的hp系统\n\n\n# reservedmemory\n\n用于将某些内存区域从操作系统中免除使用，主要与sandy bridge igpu或具有错误内存的系统相关。在本指南中没有涉及这种选项的使用\n\n\n# 清理\n\n现在你可以保存它，并将其放入efi/oc下的efi中。\n\n对于那些有启动问题的人，请确保首先阅读故障诊断部分 如果您的问题仍然没有答案，我们有大量的资源供您使用:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios 设置\n\n * 注意:大多数选项可能不会出现在您的固件中，我们建议尽可能匹配，但如果这些选项在您的bios中不可用，也不要太担心\n\n\n# 禁用\n\n * 快速启动（fast boot）\n * 安全引导（secure boot）\n * 串口/com端口（serial/com port）\n * 并口（parallel port）\n * vt-d (如果将disableiomapper设置为yes，则可以启用)\n * 兼容性支持模块 (csm) (在大多数情况下必须关闭，当该选项启用时，像gio这样的gpu错误/停顿很常见)\n * thunderbolt (用于初始安装，因为如果安装不正确，thunderbolt可能会导致问题)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2写保护)(此选项必须关闭，如果你找不到该选项，则在kernel -> quirks下启用applexcpmcfglock。你的黑苹果将无法在启用cfg-lock的情况下启动)\n\n\n# 启用\n\n * vt-x\n * 4g以上解码（above 4g decoding）\n * 超线程（hyper-threading）\n * 执行禁用位（execute disable bit）\n * ehci/xhci切换（ehci/xhci hand-off）\n * 操作系统类型:windows 8.1/10 uefi模式(一些主板可能需要”其他操作系统”代替)\n * dvmt预分配（dvmt pre-allocated）(igpu内存): 64mb或更高\n * sata模式:ahci\n\n\n# 完成后，我们需要编辑一些额外的值。转到 苹果安全引导页',charsets:{cjk:!0}},{title:"台式 Comet Lake",frontmatter:{},regularPath:"/config.plist/comet-lake.html",relativePath:"config.plist/comet-lake.md",key:"v-08d3b226",path:"/config.plist/comet-lake.html",headers:[{level:2,title:"起点",slug:"起点",normalizedTitle:"起点",charIndex:70},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:583},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:594},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:1281},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:1323},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:1446},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:1495},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:1568},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:1446},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4220},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:594},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:1281},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5681},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:594},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7653},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7798},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:7890},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:1323},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:1446},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:11285},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12346},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:1495},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:12702},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:13526},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:15460},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:15490},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:15544},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:2055},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:594},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:1281},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:19131},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:19790},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:2016},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:21414},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10813},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:22504},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:22601},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:22702},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:23009},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:1446},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:21104},{level:2,title:"清理",slug:"清理",normalizedTitle:"清理",charIndex:23651},{level:2,title:"Intel BIOS 设置",slug:"intel-bios-设置",normalizedTitle:"intel bios 设置",charIndex:23794},{level:3,title:"关闭",slug:"关闭",normalizedTitle:"关闭",charIndex:23873},{level:3,title:"启用",slug:"启用",normalizedTitle:"启用",charIndex:1703}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"起点 ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory 清理 Intel BIOS 设置 关闭 启用",content:"# 台式 Comet Lake\n\n支持          版本\n初始macOS支持   macOS 10.15, Catalina\n\n\n# 起点\n\n制作一个config.plist看起来很难，其实并不难。这只是需要一些时间，但本指南将告诉你如何配置所有的东西，你不会被冷落。这也意味着如果你有问题，检查你的配置设置以确保它们是正确的。OpenCore的主要注意事项:\n\n * 所有属性必须被定义，没有默认的OpenCore将出错，所以不要删除节，除非有明确告知你。如果指南没有提到该选项，请将其保留为默认值。\n * Sample plist不能按原样使用，必须配置到您的系统中。\n * 不要使用配置器，这些配置器很少遵守OpenCore的规则，甚至一些像Mackie的配置器会添加Clover属性和破坏plists!\n\n现在，我们来快速地提醒一下我们需要哪些工具\n\n * ProperTree\n   * 通用plist编辑器\n * GenSMBIOS\n   * 用于生成SMBIOS数据\n * Sample/config.plist\n   * 参见上一节中如何获取:config.plist Setup\n\n注意\n\n在设置OpenCore之前，请多次阅读本指南，并确保设置正确。请注意，图像并不总是最新的，所以请阅读下面的文本，如果没有提到，则保留为默认值。\n\n\n# ACPI\n\n\n\n\n# Add\n\n信息\n\n这是你将为系统添加ssdt的地方，这些对于引导macOS非常重要，并且有许多用途，例如USB映射, 禁用不支持的gpu 等，这对于我们的系统来说是启动所必须的。制作指南可以在这里找到:ACPI入门\n\n我们需要几个ssdt来恢复Clover提供的功能:\n\n所需SSDT         描述\nSSDT-PLUG      在Haswell和更新的版本上允许本地CPU电源管理，请参阅ACPI入门指南了解更多细节。\nSSDT-EC-USBX   修复了嵌入式控制器和USB电源，请参阅开始与ACPI指南了解更多细节。\nSSDT-AWAC      这是300系列RTC补丁，用于所有B460和Z490板，以防止系统引导macOS。另一种选择是SSDT-rtc0，当AWAC\n               SSDT由于缺少遗留的RTC时钟而不兼容时，请检查您是否需要它以及使用哪个，请参阅开始使用ACPI页面。\nSSDT-RHUB      需要修复Asus和MSI板上的根设备错误。Gigabyte和AsRock主板不需要这个SSDT\n\n注意，你不应该在这里添加你生成的DSDT aml，它已经在你的固件中了。因此，如果存在，请在你的config.plist和EFI/OC/ACPI下删除它的条目。\n\n对于那些想要更深入地了解转储您的DSDT、如何制作这些ssdt以及编译它们的人，请参阅开始使用ACPI 页面。编译的ssdt有一个 .aml 扩展名(组装)，将被放入EFI/OC/ACPI文件夹，并且必须在你的配置文件ACPI -> Add下指定。\n\n\n# Delete\n\n这将阻止某些ACPI表加载，对于我们来说，我们可以忽略它。\n\n\n# Patch\n\n本节允许我们通过OpenCore动态修改ACPI的部分内容(DSDT、SSDT等)。对我们来说，我们的补丁由我们的ssdt处理。这是一个更简洁的解决方案，因为这将允许我们使用OpenCore引导Windows和其他操作系统\n\n\n# Quirks\n\n与ACPI相关的设置，将所有内容保留为默认设置，因为我们不需要这些怪癖。\n\n\n# Booter\n\n\n\n本节专门讨论使用OpenRuntime (AptioMemoryFix.efi的替代品)进行引导efi补丁的相关问题\n\n\n# MmioWhitelist\n\n本节允许将通常被忽略的设备直通到macOS，对我们来说，我们可以忽略本节。\n\n\n# Quirks\n\n信息\n\n与boot.efi补丁和固件修复相关的设置，对我们来说，我们需要更改以下内容:\n\n怪癖                       启用   注释\nDevirtualiseMmio         是    \nEnableWriteUnprotector   否    \nProtectUefiServices      是    \nRebuildAppleMemoryMap    是    \nResizeAppleGpuBars       -1   如果您的固件支持增加GPU Bar大小(如：可调整大小的BAR支持)，请将其设置为0\nSetupVirtualMap          否    \nSyncRuntimePermissions   是    \n\n更多深入信息\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues , requires ProtectUefiServices as well for Z490.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section.\n * ProtectUefiServices: YES\n   * Protects UEFI services from being overridden by the firmware, required for Z490.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this.\n * ResizeAppleGpuBars: -1\n   * Will reduce the size of GPU PCI Bars if set to 0 when booting macOS, set to -1 to disable\n   * Setting other PCI Bar values is possible with this quirk, though can cause instabilities\n   * This quirk being set to zero is only necessary if Resizable BAR Support is enabled in your firmware.\n * SetupVirtualMap: NO\n   * Fixes SetVirtualAddresses calls to virtual addresses, however broken due to Comet Lake's memory protections. ASUS, Gigabyte and AsRock boards will not boot with this on.\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\n从映射设置设备属性。\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n本节是通过WhateverGreen的Framebuffer补丁指南建立的，用于设置重要的iGPU属性。如果你有-F系列CPU，你可以忽略这一部分，因为你没有iGPU。\n\nconfig.plist还没有这个部分，所以你必须手动创建它。\n\nAAPL,ig-platform-id 是macOS用来确定iGPU驱动程序如何与我们的系统交互的值，两个值之间的选择如下:\n\nAAPL,IG-PLATFORM-ID   注释\n07009B3E              当桌面iGPU用于驱动显示器时使用\n00009B3E              如果它不起作用，可以替代07009B3E\n0300C89B              当桌面iGPU仅用于计算任务而不驱动显示时使用\n\n * 注意:在macOS 10.15.5及更新版本中，使用07009B3E时黑屏似乎有很多问题，如果你遇到类似的问题，请尝试切换到00009B3E\n\n我们还添加了另外两个属性，framebuffer-patch-enable和framebuffer-stolenmem。第一个启用WhateverGreen.kext打补丁，第二个设置最小共享内存为19MB。这通常是不必要的，因为可以在BIOS中配置(推荐64MB)，但在不可用时是必需的。\n\n * 注意:无头帧缓冲区(其中dGPU是显示出来的)不需要framebuffer-patch-enable和framebuffer-stolenmem\n\n键                          类型     值\nAAPL,ig-platform-id        Data   07009B3E\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\n\n(这是一个桌面UHD 630没有dGPU和iGPU内存没有BIOS选项的例子)\n\nPciRoot(0x0)/Pci(0x1C,0x1)/Pci(0x0,0x0)\n\n这篇文章与Intel的I225-V 2.5GBe控制器有关，我们在这里要做的是让Apple的I225LM驱动程序支持我们的I225-V网络控制器:\n\n键           类型     值\ndevice-id   Data   F2150000\n\n * 注:如果你的主板没有附带Intel I225网卡，没有理由添加这个条目。\n * 注2:如果你在AppleIntelI210Ethernet kext上得到内核崩溃，你的以太网路径可能是 PciRoot(0x0)/Pci(0x1C,0x4)/Pci(0x0,0x0)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * 应用AppleALC音频注入，你需要自己研究你的主板有哪个编解码器，并将其与AppleALC的布局匹配。AppleALC支持的编解码器.\n * 你可以直接删除这个属性，因为我们现在还没有使用它\n\n对于我们来说，我们将使用引导参数alcid=xxx来完成此操作。alcid将覆盖所有其他layout- id。更多信息可以在安装后页面中找到。\n\n\n# Delete\n\n从映射中删除设备属性，我们可以忽略它\n\n\n# Kernel\n\n\n\n\n# Add\n\n在这里，我们指定要加载哪些kext，以什么特定的顺序加载，以及每个kext适用于什么体系结构。默认情况下，我们建议保留ProperTree所做的操作，但对于32位cpu，请参见以下内容:\n\n更深入的信息\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\n内核支持表\n\nOS X 版本   MINKERNEL   MAXKERNEL\n10.4      8.0.0       8.99.99\n10.5      9.0.0       9.99.99\n10.6      10.0.0      10.99.99\n10.7      11.0.0      11.99.99\n10.8      12.0.0      12.99.99\n10.9      13.0.0      13.99.99\n10.10     14.0.0      14.99.99\n10.11     15.0.0      15.99.99\n10.12     16.0.0      16.99.99\n10.13     17.0.0      17.99.99\n10.14     18.0.0      18.99.99\n10.15     19.0.0      19.99.99\n11        20.0.0      20.99.99\n12        21.0.0      21.99.99\n13        22.0.0      22.99.99\n\n\n# Emulate\n\n需要欺骗不支持的cpu，幸运的是在10.15.5+ Comet Lake中添加了支持，所以不需要在这里欺骗。对于那些运行High Sierra或Mojave的人，您将需要下面的代码来欺骗到一个受支持的CPU模型(由于稳定性问题，本指南将不讨论此类CPUID欺骗)\n\n\n# Force\n\n用于从系统卷中加载kext，仅适用于某些kext不存在于缓存中的旧操作系统(例如IONetworkingFamily在10.6)。\n\n对我们来说，我们可以忽略。\n\n\n# Block\n\n阻止某些kext的加载。与我们无关。\n\n\n# Patch\n\n对内核和kext进行补丁。\n\n修复I225-V控制器\n\n此条目与在更高端的 Comet Lake 板上找到的英特尔 I225-V 2.5GBe 控制器相关，我们将在这里做的是欺骗 Apple 的 I225LM 驱动程序以支持我们的 I225-V 网络控制器。 但是，这仅在 Catalina 和 Big Sur 上需要，最高为 11.3。\n\n键            类型        值\nBase         String    __Z18e1000_set_mac_typeP8e1000_hw\nComment      String    I225-V patch\nCount        Number    1\nEnabled      Boolean   True\nFind         Data      F2150000\nIdentifier   String    com.apple.driver.AppleIntelI210Ethernet\nMinKernel    String    19.0.0\nMaxKernel    String    20.4.0\nReplace      Data      F3150000\n\n * 注 1：如果您的主板未附带 Intel I225 NIC，则没有理由添加此条目。\n * 注 2：保留所有其他键的默认值\n\n\n# Quirks\n\n信息\n\n与内核相关的设置，我们将启用以下功能：\n\n怪癖                        启用   注释\nAppleXcpmCfgLock          是    如果在 BIOS 中禁用了 CFG-Lock，则不需要\nDisableIoMapper           是    如果在 BIOS 中禁用了 VT-D 如果在 BIOS 中禁用了\nLapicKernelPanic          否    惠普机器将需要这个怪癖\nPanicNoKextDump           是    \nPowerTimeoutKernelPanic   是    \nXhciPortLimit             是    如果运行 macOS 11.3+ 则禁用\n\n更深入的信息\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\n与传统引导(例如10.4-10.6)相关的设置，大多数情况下你可以跳过，但是对于那些计划引导传统操作系统的人，你可以查看以下内容:\n\n更深入的信息\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\n信息\n\n怪癖              启用   注释\nHideAuxiliary   是    按空格键显示 macOS 恢复和其他辅助条目\n\n更深入的信息\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\n信息\n\n有助于调试 OpenCore 启动问题（我们将更改所有内容 但 显示会延迟）：\n\n怪癖                启用\nAppleDebug        是\nApplePanic        是\nDisableWatchDog   是\nTarget            67\n\n更深入的信息\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\n信息\n\n安全性是不言而喻的，不要跳过。我们将修改以下内容:\n\n怪癖                     启用         注释\nAllowSetDefault        是          \nBlacklistAppleUpdate   是          \nScanPolicy             0          \nSecureBootModel        Default    将此设置为默认，以便OpenCore自动设置与您的SMBIOS对应的正确值。下一页将详细介绍此设置。\nVault                  Optional   这是一个词,不是可选的省略此设置。如果您没有将其设置为Optional，您将后悔，请注意它是区分大小写的\n\n更深入的信息\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\n用于串行调试(一切都保留默认值)。\n\n\n# Tools\n\n用于运行OC调试工具，如shell, ProperTree的快照功能将为您添加这些。\n\n\n# Entries\n\n用于指定OpenCore无法自然找到的不规则引导路径。\n\n这里不会介绍更多信息，请参阅Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\n用于OpenCore的UI缩放，default对我们有用。更多信息请参见深入部分\n\n更深入的信息\n\n启动器路径，主要用于UI修改\n\n * DefaultBackgroundColor: boot.efi使用的背景色\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore的NVRAM GUID，主要与RTCMemoryFixup用户相关\n\n更深入的信息\n * rtc-blacklist: <>\n   * 要与RTCMemoryFixup一起使用，请参阅这里了解更多信息:修复RTC写入问题\n   * 大多数用户可以忽略此部分\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\n系统完整性保护位掩码\n\n * 通用引导参数:\n\n引导参数          描述\n-v            这将启用详细模式，在你启动时显示所有滚动的幕后文本，而不是苹果logo和进度条。它对任何黑苹果来说都是非常宝贵的，因为它让您了解了引导过程的内部情况，并可以帮助您识别问题、问题kext等。\ndebug=0x100   禁用了macOS的watchdog，它有助于防止在内核出现严重错误时重新启动。\n              这样你就有希望收集到一些有用的信息并按照分层导航的方式来解决问题。\nkeepsyms=1    这是debug=0x100的配套设置，它告诉操作系统在内核出现崩溃时也打印这些符号。这可以提供一些更有用的信息，以了解造成崩溃本身的原因。\nalcid=1       用于为AppleALC设置layout-id，请参阅支持的编解码器以确定您的特定系统使用哪种布局。更多信息可以在安装后页面\n              中找到\n\n * 网络特定的引导参数:\n\n引导参数      描述\ne1000=0   禁用com apple\n          DriverKit-AppleEthernetE1000(苹果的DEXT驱动程序)与高端Comet\n          Lake板上找到的英特尔I225- v以太网控制器匹配，以加载苹果的I225 kext驱动程序。\n          这个引导参数在大多数板上是可选的，因为它们与DEXT驱动程序兼容。但在Gigabyte和其他几个主板上是必需的，这些主板只能使用kext驱动程序，因为DEXT驱动程序会导致挂起。\n          如果你的主板没有附带I225-V网卡，你不需要这个。\n          \n          在macOS 12.2.1及以下版本，使用dk.e1000=0 代替\n\n * gpu特定的引导参数:\n\n引导参数             描述\nagdpmod=pikera   用于禁用一些Navi gpu (RX 5000 & 6000系列)的board\n                 ID检查，如果没有这个，你将得到一个黑屏。如果你没有Navi请不要使用 (比如： Polaris 和 Vega\n                 卡不应该使用它)\n-radcodec        用于允许官方不支持的AMD gpu(欺骗)使用硬件视频编码器\nradpg=15         U用于禁用一些电源开关模式，有助于正确初始化基于Verde based的 AMD 显卡\nunfairgva=1      用于在支持的AMD gpu上修复硬件DRM支持\nnvda_drv_vrl=1   用于在macOS Sierra和High Sierra的Maxwell和Pascal卡上启用NVIDIA的Web驱动程序\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\n信息\n\n强制重写NVRAM变量，请注意，Add 不会覆盖 NVRAM中已经存在的值，所以像boot-args这样的值应该保持不变。对我们来说，我们将更改以下内容:\n\n怪癖           启用\nWriteFlash   是\n\n更深入的信息\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\n信息\n\n为了设置SMBIOS信息，我们将使用CorpNewt的GenSMBIOS应用程序。\n\n对于这个Comet Lake示例，我们将选择iMac20,1 SMBIOS—这是为了兼容性而特意这样做的。有两个主要的SMBIOS用于Comet Lake:\n\nSMBIOS     硬件\niMac20,1   i7 - 10700k及以下(即：8核心及以下)\niMac20,2   i9-10850K 和更高(即：10核心)\n\n运行GenSMBIOS，选择选项1下载MacSerial，选择选项3选择SMBIOS。这会给我们一个类似下面的输出:\n\n  #######################################################\n #               iMac20,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac20,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\n * 注意:MacSerial目前不支持Linux，所以你必须使用Windows或macOS机器来生成值\n\nType 部分复制到 Generic -> SystemProductName.\n\nSerial 部分复制到 Generic -> SystemSerialNumber.\n\nBoard Serial 部分复制到 Generic -> MLB.\n\nSmUUID 部分复制到 Generic -> SystemUUID.\n\n我们将Generic -> ROM设置为苹果ROM(从真正的Mac中转储)，你的网卡Mac地址，或任何随机的Mac地址(可以是6个随机字节，在本指南中我们将使用11223300 0000。安装后，请参考修复iServices页面，了解如何找到你的真实MAC地址)\n\n提醒你需要一个无效的串行!当你在苹果的检查覆盖页面中输入你的序列号时，你会得到一条信息，比如“无法检查此序列号的覆盖范围”。\n\nAutomatic: 是\n\n * 基于Generic节而不是DataHub、NVRAM和SMBIOS节生成platformminfo\n\n\n# Generic\n\n更深入的信息\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: 是\n\n * 强制.efi驱动程序，更改为NO将自动连接添加的UEFI驱动程序。这可以使引导稍微快一点，但不是所有的驱动程序都连接自己。例如某些文件系统驱动程序不能加载。\n\n\n# Drivers\n\n在这里添加你的.efi驱动程序。\n\n在这里的驱动程序应该只有:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\n更深入的信息\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\n默认情况下，OpenCore只从macOS Big Sur及更新版本加载APFS驱动程序。如果你启动的是macOS Catalina或更早的版本，你可能需要设置一个新的最低版本/日期。 不设置这个会导致OpenCore找不到你的macOS分区!\n\nmacOS Sierra和更早的版本使用HFS而不是APFS。如果启动旧版本的macOS，您可以跳过本节。\n\nAPFS 版本\n\n如果修改最小版本，则需要同时设置MinVersion和MinDate。\n\nMACOS 版本                MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\n对于AudioDxe设置，我们将忽略(保留默认值)。这与macOS中的音频支持无关。\n\n * 要进一步使用AudioDxe和音频部分，请参见安装后页面:添加主题和启动铃声\n\n\n# Input\n\n与boot.efi键盘直通用于FileVault和热键支持相关，这里保留所有默认设置，因为我们不需要这些怪癖。请参阅这里了解更多细节:Security and FileVault\n\n\n# Output\n\n关于OpenCore的视觉输出，将所有内容保留为默认值，因为我们不需要这些怪癖。\n\n更深入的信息\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\n主要针对虚拟机、传统mac和FileVault用户。更多细节请参阅此处:Security and FileVault\n\n\n# Quirks\n\n信息\n\n关于UEFI环境的怪癖，对于我们来说，我们将改变以下内容:\n\n怪癖                 启用   注释\nUnblockFsConnect   否    主要由惠普主板使用\n\n更深入的信息\n\n * DisableSecurityPolicy: 否\n   \n   * 禁用固件中的平台安全策略，建议用于有bug的固件，其中禁用安全引导不允许第三方固件驱动加载。\n   * 如果运行微软Surface设备，建议启用此选项\n\n * RequestBootVarRouting: 是\n   \n   * 将AptioMemoryFix从EFI_GLOBAL_VARIABLE_GUID重定向到OC_VENDOR_VARIABLE_GUID。当固件试图删除启动项时需要启用，建议在所有系统上启用，以确保正确的更新安装，启动磁盘控制面板的功能等。\n\n * UnblockFsConnect: 否\n   \n   * 一些固件块分区处理通过驱动模式打开它们，这导致文件系统协议无法安装。主要适用于没有列出驱动器的HP系统\n\n\n# ReservedMemory\n\n用于免除操作系统对某些内存区域的使用，主要适用于Sandy Bridge igpu或内存故障的系统。在本指南中没有涉及这种怪癖的使用\n\n\n# 清理\n\n现在，您可以保存它，并将其放入EFI/OC下的EFI中。\n\n对于那些有启动问题的人，请务必先阅读故障排除部分，如果您的问题仍然没有得到解答，我们有大量的资源供您使用:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS 设置\n\n * 注意: 大多数选项可能不会出现在你的固件中，我们建议尽可能匹配，但如果这些选项在你的BIOS中不可用，不要太担心\n\n\n# 关闭\n\n * Fast Boot（快速启动）\n * Secure Boot（安全引导）\n * Serial/COM Port（串口/COM端口）\n * Parallel Port（并口）\n * VT-d (如果将DisableIoMapper设置为YES，则可以启用)\n * Compatibility Support Module (CSM) （兼容性支持模块）(在大多数情况下必须关闭，当该选项启用时，像gIO这样的GPU错误/停顿很常见)\n * Thunderbolt （雷电）(用于初始安装，因为如果没有正确安装，Thunderbolt可能会导致问题)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2写保护)(此选项必须关闭，如果你找不到该选项，则在Kernel -> Quirks下启用AppleXcpmCfgLock。你的黑苹果将无法在启用CFG-Lock的情况下启动)\n\n\n# 启用\n\n * VT-x\n * Above 4G Decoding（4G以上解码）\n   * 2020+ BIOS注意事项:当启用4g以上时，Resizable BAR支持可能会在一些Z490和更新的主板上可用。如果启用，请确保Booter -> Quirks -> ResizeAppleGpuBars设置为0。\n * Hyper-Threading（超线程）\n * Execute Disable Bit（执行禁用位）\n * EHCI/XHCI Hand-off（EHCI/XHCI切换）\n * 操作系统类型:Windows 8.1/10 UEFI模式(一些主板可能需要”其他操作系统”代替)\n * DVMT Pre-Allocated（DVMT预分配）(iGPU内存): 64MB或更高\n * SATA模式:AHCI\n\n\n# 完成后，我们需要编辑一些额外的值。访问苹果安全启动页面",normalizedContent:"# 台式 comet lake\n\n支持          版本\n初始macos支持   macos 10.15, catalina\n\n\n# 起点\n\n制作一个config.plist看起来很难，其实并不难。这只是需要一些时间，但本指南将告诉你如何配置所有的东西，你不会被冷落。这也意味着如果你有问题，检查你的配置设置以确保它们是正确的。opencore的主要注意事项:\n\n * 所有属性必须被定义，没有默认的opencore将出错，所以不要删除节，除非有明确告知你。如果指南没有提到该选项，请将其保留为默认值。\n * sample plist不能按原样使用，必须配置到您的系统中。\n * 不要使用配置器，这些配置器很少遵守opencore的规则，甚至一些像mackie的配置器会添加clover属性和破坏plists!\n\n现在，我们来快速地提醒一下我们需要哪些工具\n\n * propertree\n   * 通用plist编辑器\n * gensmbios\n   * 用于生成smbios数据\n * sample/config.plist\n   * 参见上一节中如何获取:config.plist setup\n\n注意\n\n在设置opencore之前，请多次阅读本指南，并确保设置正确。请注意，图像并不总是最新的，所以请阅读下面的文本，如果没有提到，则保留为默认值。\n\n\n# acpi\n\n\n\n\n# add\n\n信息\n\n这是你将为系统添加ssdt的地方，这些对于引导macos非常重要，并且有许多用途，例如usb映射, 禁用不支持的gpu 等，这对于我们的系统来说是启动所必须的。制作指南可以在这里找到:acpi入门\n\n我们需要几个ssdt来恢复clover提供的功能:\n\n所需ssdt         描述\nssdt-plug      在haswell和更新的版本上允许本地cpu电源管理，请参阅acpi入门指南了解更多细节。\nssdt-ec-usbx   修复了嵌入式控制器和usb电源，请参阅开始与acpi指南了解更多细节。\nssdt-awac      这是300系列rtc补丁，用于所有b460和z490板，以防止系统引导macos。另一种选择是ssdt-rtc0，当awac\n               ssdt由于缺少遗留的rtc时钟而不兼容时，请检查您是否需要它以及使用哪个，请参阅开始使用acpi页面。\nssdt-rhub      需要修复asus和msi板上的根设备错误。gigabyte和asrock主板不需要这个ssdt\n\n注意，你不应该在这里添加你生成的dsdt aml，它已经在你的固件中了。因此，如果存在，请在你的config.plist和efi/oc/acpi下删除它的条目。\n\n对于那些想要更深入地了解转储您的dsdt、如何制作这些ssdt以及编译它们的人，请参阅开始使用acpi 页面。编译的ssdt有一个 .aml 扩展名(组装)，将被放入efi/oc/acpi文件夹，并且必须在你的配置文件acpi -> add下指定。\n\n\n# delete\n\n这将阻止某些acpi表加载，对于我们来说，我们可以忽略它。\n\n\n# patch\n\n本节允许我们通过opencore动态修改acpi的部分内容(dsdt、ssdt等)。对我们来说，我们的补丁由我们的ssdt处理。这是一个更简洁的解决方案，因为这将允许我们使用opencore引导windows和其他操作系统\n\n\n# quirks\n\n与acpi相关的设置，将所有内容保留为默认设置，因为我们不需要这些怪癖。\n\n\n# booter\n\n\n\n本节专门讨论使用openruntime (aptiomemoryfix.efi的替代品)进行引导efi补丁的相关问题\n\n\n# mmiowhitelist\n\n本节允许将通常被忽略的设备直通到macos，对我们来说，我们可以忽略本节。\n\n\n# quirks\n\n信息\n\n与boot.efi补丁和固件修复相关的设置，对我们来说，我们需要更改以下内容:\n\n怪癖                       启用   注释\ndevirtualisemmio         是    \nenablewriteunprotector   否    \nprotectuefiservices      是    \nrebuildapplememorymap    是    \nresizeapplegpubars       -1   如果您的固件支持增加gpu bar大小(如：可调整大小的bar支持)，请将其设置为0\nsetupvirtualmap          否    \nsyncruntimepermissions   是    \n\n更多深入信息\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues , requires protectuefiservices as well for z490.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section.\n * protectuefiservices: yes\n   * protects uefi services from being overridden by the firmware, required for z490.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this.\n * resizeapplegpubars: -1\n   * will reduce the size of gpu pci bars if set to 0 when booting macos, set to -1 to disable\n   * setting other pci bar values is possible with this quirk, though can cause instabilities\n   * this quirk being set to zero is only necessary if resizable bar support is enabled in your firmware.\n * setupvirtualmap: no\n   * fixes setvirtualaddresses calls to virtual addresses, however broken due to comet lake's memory protections. asus, gigabyte and asrock boards will not boot with this on.\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users.\n\n\n# deviceproperties\n\n\n\n\n# add\n\n从映射设置设备属性。\n\npciroot(0x0)/pci(0x2,0x0)\n\n本节是通过whatevergreen的framebuffer补丁指南建立的，用于设置重要的igpu属性。如果你有-f系列cpu，你可以忽略这一部分，因为你没有igpu。\n\nconfig.plist还没有这个部分，所以你必须手动创建它。\n\naapl,ig-platform-id 是macos用来确定igpu驱动程序如何与我们的系统交互的值，两个值之间的选择如下:\n\naapl,ig-platform-id   注释\n07009b3e              当桌面igpu用于驱动显示器时使用\n00009b3e              如果它不起作用，可以替代07009b3e\n0300c89b              当桌面igpu仅用于计算任务而不驱动显示时使用\n\n * 注意:在macos 10.15.5及更新版本中，使用07009b3e时黑屏似乎有很多问题，如果你遇到类似的问题，请尝试切换到00009b3e\n\n我们还添加了另外两个属性，framebuffer-patch-enable和framebuffer-stolenmem。第一个启用whatevergreen.kext打补丁，第二个设置最小共享内存为19mb。这通常是不必要的，因为可以在bios中配置(推荐64mb)，但在不可用时是必需的。\n\n * 注意:无头帧缓冲区(其中dgpu是显示出来的)不需要framebuffer-patch-enable和framebuffer-stolenmem\n\n键                          类型     值\naapl,ig-platform-id        data   07009b3e\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\n\n(这是一个桌面uhd 630没有dgpu和igpu内存没有bios选项的例子)\n\npciroot(0x0)/pci(0x1c,0x1)/pci(0x0,0x0)\n\n这篇文章与intel的i225-v 2.5gbe控制器有关，我们在这里要做的是让apple的i225lm驱动程序支持我们的i225-v网络控制器:\n\n键           类型     值\ndevice-id   data   f2150000\n\n * 注:如果你的主板没有附带intel i225网卡，没有理由添加这个条目。\n * 注2:如果你在appleinteli210ethernet kext上得到内核崩溃，你的以太网路径可能是 pciroot(0x0)/pci(0x1c,0x4)/pci(0x0,0x0)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * 应用applealc音频注入，你需要自己研究你的主板有哪个编解码器，并将其与applealc的布局匹配。applealc支持的编解码器.\n * 你可以直接删除这个属性，因为我们现在还没有使用它\n\n对于我们来说，我们将使用引导参数alcid=xxx来完成此操作。alcid将覆盖所有其他layout- id。更多信息可以在安装后页面中找到。\n\n\n# delete\n\n从映射中删除设备属性，我们可以忽略它\n\n\n# kernel\n\n\n\n\n# add\n\n在这里，我们指定要加载哪些kext，以什么特定的顺序加载，以及每个kext适用于什么体系结构。默认情况下，我们建议保留propertree所做的操作，但对于32位cpu，请参见以下内容:\n\n更深入的信息\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\n内核支持表\n\nos x 版本   minkernel   maxkernel\n10.4      8.0.0       8.99.99\n10.5      9.0.0       9.99.99\n10.6      10.0.0      10.99.99\n10.7      11.0.0      11.99.99\n10.8      12.0.0      12.99.99\n10.9      13.0.0      13.99.99\n10.10     14.0.0      14.99.99\n10.11     15.0.0      15.99.99\n10.12     16.0.0      16.99.99\n10.13     17.0.0      17.99.99\n10.14     18.0.0      18.99.99\n10.15     19.0.0      19.99.99\n11        20.0.0      20.99.99\n12        21.0.0      21.99.99\n13        22.0.0      22.99.99\n\n\n# emulate\n\n需要欺骗不支持的cpu，幸运的是在10.15.5+ comet lake中添加了支持，所以不需要在这里欺骗。对于那些运行high sierra或mojave的人，您将需要下面的代码来欺骗到一个受支持的cpu模型(由于稳定性问题，本指南将不讨论此类cpuid欺骗)\n\n\n# force\n\n用于从系统卷中加载kext，仅适用于某些kext不存在于缓存中的旧操作系统(例如ionetworkingfamily在10.6)。\n\n对我们来说，我们可以忽略。\n\n\n# block\n\n阻止某些kext的加载。与我们无关。\n\n\n# patch\n\n对内核和kext进行补丁。\n\n修复i225-v控制器\n\n此条目与在更高端的 comet lake 板上找到的英特尔 i225-v 2.5gbe 控制器相关，我们将在这里做的是欺骗 apple 的 i225lm 驱动程序以支持我们的 i225-v 网络控制器。 但是，这仅在 catalina 和 big sur 上需要，最高为 11.3。\n\n键            类型        值\nbase         string    __z18e1000_set_mac_typep8e1000_hw\ncomment      string    i225-v patch\ncount        number    1\nenabled      boolean   true\nfind         data      f2150000\nidentifier   string    com.apple.driver.appleinteli210ethernet\nminkernel    string    19.0.0\nmaxkernel    string    20.4.0\nreplace      data      f3150000\n\n * 注 1：如果您的主板未附带 intel i225 nic，则没有理由添加此条目。\n * 注 2：保留所有其他键的默认值\n\n\n# quirks\n\n信息\n\n与内核相关的设置，我们将启用以下功能：\n\n怪癖                        启用   注释\napplexcpmcfglock          是    如果在 bios 中禁用了 cfg-lock，则不需要\ndisableiomapper           是    如果在 bios 中禁用了 vt-d 如果在 bios 中禁用了\nlapickernelpanic          否    惠普机器将需要这个怪癖\npanicnokextdump           是    \npowertimeoutkernelpanic   是    \nxhciportlimit             是    如果运行 macos 11.3+ 则禁用\n\n更深入的信息\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\n与传统引导(例如10.4-10.6)相关的设置，大多数情况下你可以跳过，但是对于那些计划引导传统操作系统的人，你可以查看以下内容:\n\n更深入的信息\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\n信息\n\n怪癖              启用   注释\nhideauxiliary   是    按空格键显示 macos 恢复和其他辅助条目\n\n更深入的信息\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\n信息\n\n有助于调试 opencore 启动问题（我们将更改所有内容 但 显示会延迟）：\n\n怪癖                启用\nappledebug        是\napplepanic        是\ndisablewatchdog   是\ntarget            67\n\n更深入的信息\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\n信息\n\n安全性是不言而喻的，不要跳过。我们将修改以下内容:\n\n怪癖                     启用         注释\nallowsetdefault        是          \nblacklistappleupdate   是          \nscanpolicy             0          \nsecurebootmodel        default    将此设置为默认，以便opencore自动设置与您的smbios对应的正确值。下一页将详细介绍此设置。\nvault                  optional   这是一个词,不是可选的省略此设置。如果您没有将其设置为optional，您将后悔，请注意它是区分大小写的\n\n更深入的信息\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\n用于串行调试(一切都保留默认值)。\n\n\n# tools\n\n用于运行oc调试工具，如shell, propertree的快照功能将为您添加这些。\n\n\n# entries\n\n用于指定opencore无法自然找到的不规则引导路径。\n\n这里不会介绍更多信息，请参阅configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\n用于opencore的ui缩放，default对我们有用。更多信息请参见深入部分\n\n更深入的信息\n\n启动器路径，主要用于ui修改\n\n * defaultbackgroundcolor: boot.efi使用的背景色\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore的nvram guid，主要与rtcmemoryfixup用户相关\n\n更深入的信息\n * rtc-blacklist: <>\n   * 要与rtcmemoryfixup一起使用，请参阅这里了解更多信息:修复rtc写入问题\n   * 大多数用户可以忽略此部分\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\n系统完整性保护位掩码\n\n * 通用引导参数:\n\n引导参数          描述\n-v            这将启用详细模式，在你启动时显示所有滚动的幕后文本，而不是苹果logo和进度条。它对任何黑苹果来说都是非常宝贵的，因为它让您了解了引导过程的内部情况，并可以帮助您识别问题、问题kext等。\ndebug=0x100   禁用了macos的watchdog，它有助于防止在内核出现严重错误时重新启动。\n              这样你就有希望收集到一些有用的信息并按照分层导航的方式来解决问题。\nkeepsyms=1    这是debug=0x100的配套设置，它告诉操作系统在内核出现崩溃时也打印这些符号。这可以提供一些更有用的信息，以了解造成崩溃本身的原因。\nalcid=1       用于为applealc设置layout-id，请参阅支持的编解码器以确定您的特定系统使用哪种布局。更多信息可以在安装后页面\n              中找到\n\n * 网络特定的引导参数:\n\n引导参数      描述\ne1000=0   禁用com apple\n          driverkit-appleethernete1000(苹果的dext驱动程序)与高端comet\n          lake板上找到的英特尔i225- v以太网控制器匹配，以加载苹果的i225 kext驱动程序。\n          这个引导参数在大多数板上是可选的，因为它们与dext驱动程序兼容。但在gigabyte和其他几个主板上是必需的，这些主板只能使用kext驱动程序，因为dext驱动程序会导致挂起。\n          如果你的主板没有附带i225-v网卡，你不需要这个。\n          \n          在macos 12.2.1及以下版本，使用dk.e1000=0 代替\n\n * gpu特定的引导参数:\n\n引导参数             描述\nagdpmod=pikera   用于禁用一些navi gpu (rx 5000 & 6000系列)的board\n                 id检查，如果没有这个，你将得到一个黑屏。如果你没有navi请不要使用 (比如： polaris 和 vega\n                 卡不应该使用它)\n-radcodec        用于允许官方不支持的amd gpu(欺骗)使用硬件视频编码器\nradpg=15         u用于禁用一些电源开关模式，有助于正确初始化基于verde based的 amd 显卡\nunfairgva=1      用于在支持的amd gpu上修复硬件drm支持\nnvda_drv_vrl=1   用于在macos sierra和high sierra的maxwell和pascal卡上启用nvidia的web驱动程序\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\n信息\n\n强制重写nvram变量，请注意，add 不会覆盖 nvram中已经存在的值，所以像boot-args这样的值应该保持不变。对我们来说，我们将更改以下内容:\n\n怪癖           启用\nwriteflash   是\n\n更深入的信息\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\n信息\n\n为了设置smbios信息，我们将使用corpnewt的gensmbios应用程序。\n\n对于这个comet lake示例，我们将选择imac20,1 smbios—这是为了兼容性而特意这样做的。有两个主要的smbios用于comet lake:\n\nsmbios     硬件\nimac20,1   i7 - 10700k及以下(即：8核心及以下)\nimac20,2   i9-10850k 和更高(即：10核心)\n\n运行gensmbios，选择选项1下载macserial，选择选项3选择smbios。这会给我们一个类似下面的输出:\n\n  #######################################################\n #               imac20,1 smbios info                  #\n#######################################################\n\ntype:         imac20,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\n * 注意:macserial目前不支持linux，所以你必须使用windows或macos机器来生成值\n\ntype 部分复制到 generic -> systemproductname.\n\nserial 部分复制到 generic -> systemserialnumber.\n\nboard serial 部分复制到 generic -> mlb.\n\nsmuuid 部分复制到 generic -> systemuuid.\n\n我们将generic -> rom设置为苹果rom(从真正的mac中转储)，你的网卡mac地址，或任何随机的mac地址(可以是6个随机字节，在本指南中我们将使用11223300 0000。安装后，请参考修复iservices页面，了解如何找到你的真实mac地址)\n\n提醒你需要一个无效的串行!当你在苹果的检查覆盖页面中输入你的序列号时，你会得到一条信息，比如“无法检查此序列号的覆盖范围”。\n\nautomatic: 是\n\n * 基于generic节而不是datahub、nvram和smbios节生成platformminfo\n\n\n# generic\n\n更深入的信息\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: 是\n\n * 强制.efi驱动程序，更改为no将自动连接添加的uefi驱动程序。这可以使引导稍微快一点，但不是所有的驱动程序都连接自己。例如某些文件系统驱动程序不能加载。\n\n\n# drivers\n\n在这里添加你的.efi驱动程序。\n\n在这里的驱动程序应该只有:\n\n * hfsplus.efi\n * openruntime.efi\n\n更深入的信息\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\n默认情况下，opencore只从macos big sur及更新版本加载apfs驱动程序。如果你启动的是macos catalina或更早的版本，你可能需要设置一个新的最低版本/日期。 不设置这个会导致opencore找不到你的macos分区!\n\nmacos sierra和更早的版本使用hfs而不是apfs。如果启动旧版本的macos，您可以跳过本节。\n\napfs 版本\n\n如果修改最小版本，则需要同时设置minversion和mindate。\n\nmacos 版本                min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\n对于audiodxe设置，我们将忽略(保留默认值)。这与macos中的音频支持无关。\n\n * 要进一步使用audiodxe和音频部分，请参见安装后页面:添加主题和启动铃声\n\n\n# input\n\n与boot.efi键盘直通用于filevault和热键支持相关，这里保留所有默认设置，因为我们不需要这些怪癖。请参阅这里了解更多细节:security and filevault\n\n\n# output\n\n关于opencore的视觉输出，将所有内容保留为默认值，因为我们不需要这些怪癖。\n\n更深入的信息\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\n主要针对虚拟机、传统mac和filevault用户。更多细节请参阅此处:security and filevault\n\n\n# quirks\n\n信息\n\n关于uefi环境的怪癖，对于我们来说，我们将改变以下内容:\n\n怪癖                 启用   注释\nunblockfsconnect   否    主要由惠普主板使用\n\n更深入的信息\n\n * disablesecuritypolicy: 否\n   \n   * 禁用固件中的平台安全策略，建议用于有bug的固件，其中禁用安全引导不允许第三方固件驱动加载。\n   * 如果运行微软surface设备，建议启用此选项\n\n * requestbootvarrouting: 是\n   \n   * 将aptiomemoryfix从efi_global_variable_guid重定向到oc_vendor_variable_guid。当固件试图删除启动项时需要启用，建议在所有系统上启用，以确保正确的更新安装，启动磁盘控制面板的功能等。\n\n * unblockfsconnect: 否\n   \n   * 一些固件块分区处理通过驱动模式打开它们，这导致文件系统协议无法安装。主要适用于没有列出驱动器的hp系统\n\n\n# reservedmemory\n\n用于免除操作系统对某些内存区域的使用，主要适用于sandy bridge igpu或内存故障的系统。在本指南中没有涉及这种怪癖的使用\n\n\n# 清理\n\n现在，您可以保存它，并将其放入efi/oc下的efi中。\n\n对于那些有启动问题的人，请务必先阅读故障排除部分，如果您的问题仍然没有得到解答，我们有大量的资源供您使用:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios 设置\n\n * 注意: 大多数选项可能不会出现在你的固件中，我们建议尽可能匹配，但如果这些选项在你的bios中不可用，不要太担心\n\n\n# 关闭\n\n * fast boot（快速启动）\n * secure boot（安全引导）\n * serial/com port（串口/com端口）\n * parallel port（并口）\n * vt-d (如果将disableiomapper设置为yes，则可以启用)\n * compatibility support module (csm) （兼容性支持模块）(在大多数情况下必须关闭，当该选项启用时，像gio这样的gpu错误/停顿很常见)\n * thunderbolt （雷电）(用于初始安装，因为如果没有正确安装，thunderbolt可能会导致问题)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2写保护)(此选项必须关闭，如果你找不到该选项，则在kernel -> quirks下启用applexcpmcfglock。你的黑苹果将无法在启用cfg-lock的情况下启动)\n\n\n# 启用\n\n * vt-x\n * above 4g decoding（4g以上解码）\n   * 2020+ bios注意事项:当启用4g以上时，resizable bar支持可能会在一些z490和更新的主板上可用。如果启用，请确保booter -> quirks -> resizeapplegpubars设置为0。\n * hyper-threading（超线程）\n * execute disable bit（执行禁用位）\n * ehci/xhci hand-off（ehci/xhci切换）\n * 操作系统类型:windows 8.1/10 uefi模式(一些主板可能需要”其他操作系统”代替)\n * dvmt pre-allocated（dvmt预分配）(igpu内存): 64mb或更高\n * sata模式:ahci\n\n\n# 完成后，我们需要编辑一些额外的值。访问苹果安全启动页面",charsets:{cjk:!0}},{title:"Desktop Haswell and Broadwell",frontmatter:{},regularPath:"/config.plist/haswell.html",relativePath:"config.plist/haswell.md",key:"v-4d330d7a",path:"/config.plist/haswell.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:190},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1419},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1430},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2575},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2660},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3020},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3157},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4240},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1430},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2575},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7035},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1430},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9244},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9386},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9587},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2660},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12774},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13924},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3020},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14375},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15275},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17617},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17686},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17804},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3505},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1430},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2575},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22589},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23890},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3466},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20516},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12302},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27394},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27636},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27846},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28231},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25594},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29801},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30121},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10058},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3535}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Haswell and Broadwell\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.8, Mountain Lion\nNote 1                  Haswell iGPUs are only supported up-to macOS 12\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode, however this quirk is only applicable to UEFI platforms.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n0300220D              Used when the Desktop Haswell iGPU is used to drive a\n                      display\n04001204              Used when the Desktop Haswell iGPU is only used for\n                      computing tasks and doesn't drive a display\n07002216              Used when the Desktop Broadwell iGPU is used to drive a\n                      display\n\nI added another portion as well that shows a device-id fake in case you have an HD 4400 which is unsupported in macOS.\n\nThe device-id fake is set up like so:\n\n * 12040000 - this is the device id for HD 4600 which does have support in macOS\n\nWe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. The first enables patching via WhateverGreen.kext, the second sets the min stolen memory to 19MB and third sets the framebuffer memory to 9MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   0300220D\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\ndevice-id                  Data   12040000\n\n(This is an example for a desktop HD 4400 without a dGPU and no BIOS options for iGPU memory)\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   07002216\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\n(This is an example for a desktop Iris Pro 6200 and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Haswell example, we chose the iMac15,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS     HARDWARE\niMac14,4   Haswell with only iGPU\niMac15,1   Haswell with dGPU\niMac16,2   Broadwell\n\nNote: The following SMBIOS are only supported up-to macOS 11, Big Sur. For cases where you must boot Monterey, see below:\n\nMonterey SMBIOS table\n\nNote choosing a SMBIOS from the list below for Big Sur or older is not recommended, as Power Management and such can break when using unoptimized SMBIOS.\n\nMonterey table:\n\nSMBIOS     HARDWARE\niMac16,2   Broadwell with only iGPU\niMac17,1   Broadwell with dGPU\n\nNote 2: All of these SMBIOSes were dropped in macOS Ventura. If running macOS Ventura, use a Kaby Lake SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac15,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac15,1\nSerial:       C02M9SYJFY10\nBoard Serial: C02408101J9G2Y7A8\nSmUUID:       7B227BEC-660D-405F-8E60-411B3E4EF055\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop haswell and broadwell\n\nsupport                 version\ninitial macos support   os x 10.8, mountain lion\nnote 1                  haswell igpus are only supported up-to macos 12\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode, however this quirk is only applicable to uefi platforms.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,ig-platform-id   comment\n0300220d              used when the desktop haswell igpu is used to drive a\n                      display\n04001204              used when the desktop haswell igpu is only used for\n                      computing tasks and doesn't drive a display\n07002216              used when the desktop broadwell igpu is used to drive a\n                      display\n\ni added another portion as well that shows a device-id fake in case you have an hd 4400 which is unsupported in macos.\n\nthe device-id fake is set up like so:\n\n * 12040000 - this is the device id for hd 4600 which does have support in macos\n\nwe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. the first enables patching via whatevergreen.kext, the second sets the min stolen memory to 19mb and third sets the framebuffer memory to 9mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nkey                        type   value\naapl,ig-platform-id        data   0300220d\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\ndevice-id                  data   12040000\n\n(this is an example for a desktop hd 4400 without a dgpu and no bios options for igpu memory)\n\nkey                        type   value\naapl,ig-platform-id        data   07002216\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\n(this is an example for a desktop iris pro 6200 and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this haswell example, we chose the imac15,1 smbios. the typical breakdown is as follows:\n\nsmbios     hardware\nimac14,4   haswell with only igpu\nimac15,1   haswell with dgpu\nimac16,2   broadwell\n\nnote: the following smbios are only supported up-to macos 11, big sur. for cases where you must boot monterey, see below:\n\nmonterey smbios table\n\nnote choosing a smbios from the list below for big sur or older is not recommended, as power management and such can break when using unoptimized smbios.\n\nmonterey table:\n\nsmbios     hardware\nimac16,2   broadwell with only igpu\nimac17,1   broadwell with dgpu\n\nnote 2: all of these smbioses were dropped in macos ventura. if running macos ventura, use a kaby lake smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac15,1 smbios info                  #\n#######################################################\n\ntype:         imac15,1\nserial:       c02m9syjfy10\nboard serial: c02408101j9g2y7a8\nsmuuid:       7b227bec-660d-405f-8e60-411b3e4ef055\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Ivy Bridge",frontmatter:{},regularPath:"/config.plist/ivy-bridge.html",relativePath:"config.plist/ivy-bridge.md",key:"v-43b3a5ad",path:"/config.plist/ivy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:285},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1514},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1525},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2832},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3768},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4020},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4128},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4265},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4020},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5348},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1525},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2832},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7056},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1525},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9265},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9407},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9608},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3768},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4020},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12652},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13802},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4128},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14253},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15153},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17495},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17564},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17682},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4613},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1525},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2832},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22467},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24110},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4574},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20394},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12180},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27614},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27856},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28066},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28451},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4020},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25814},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30021},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30341},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9936},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3358}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Ivy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.7, Lion\nLast Supported OS       macOS 12 Monterey\nNote 1                  For Ventura information, see macOS 13 Ventura\nNote 2                  Ivy Bridge iGPUs are only supported up-to macOS 11\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-IMEI        Needed to add a missing IMEI device on Ivy Bridge CPU with 6\n                 series motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support IvyBridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode, however this quirk is only applicable to UEFI platforms.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nThe AAPL,ig-platform-id we use is as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n0A006601              Used when the iGPU is used to drive a display\n07006201              Used when the iGPU is only used for computing tasks and\n                      doesn't drive a display\n\nExample setup:\n\nKEY                   TYPE   VALUE\nAAPL,ig-platform-id   Data   0A006601\n\n(This is an example for a desktop HD 4000 without a dGPU)\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nThis is needed if you're pairing an Ivy Bridge CPU with a 6 series motherboard(ie. H61, B65, Q65, P67, H67, Q67, Z68), specifically needed to spoof your IMEI device into being supported. Note this property is still required with or without SSDT-IMEI.\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1E0000\n\nNote: This is not needed if you have a 7 series motherboard(ie. B75, Q75, Z75, H77, Q77, Z77)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Ivy Bridge example, we'll chose the iMac13,2 SMBIOS - this is done intentionally for compatibility's sake. There are 3 main SMBIOS used for Ivy Bridge:\n\nSMBIOS     HARDWARE\niMac13,1   Used for computers utilizing the iGPU for displaying\niMac13,2   Used for computers using a dGPU for displaying, and an iGPU\n           for computing tasks only\n\nNote: The following SMBIOS are only supported up-to and including macOS 10.15, Catalina. For cases where you must boot Big Sur or Monterey, see below:\n\nBig Sur/Monterey SMBIOS table\n\nNote choosing a SMBIOS from the list below for Catalina or older is not recommended, as Power Management and such can break when using unoptimized SMBIOS.\n\nBig Sur table:\n\nSMBIOS     HARDWARE\niMac14,4   Used for computers utilizing the iGPU for displaying\niMac15,1   Used for computers using a dGPU for displaying, and an iGPU\n           for computing tasks only\n\nMonterey table:\n\nSMBIOS      HARDWARE\nMacPro6,1   As Monterey does not include iGPU drivers, you will want to\n            use MacPro6,1 and a supported dGPU\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac13,2 SMBIOS Info                  #\n#######################################################\n\nType:         iMac13,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop ivy bridge\n\nsupport                 version\ninitial macos support   os x 10.7, lion\nlast supported os       macos 12 monterey\nnote 1                  for ventura information, see macos 13 ventura\nnote 2                  ivy bridge igpus are only supported up-to macos 11\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-imei        needed to add a missing imei device on ivy bridge cpu with 6\n                 series motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support ivybridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode, however this quirk is only applicable to uefi platforms.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nthe aapl,ig-platform-id we use is as follows:\n\naapl,ig-platform-id   comment\n0a006601              used when the igpu is used to drive a display\n07006201              used when the igpu is only used for computing tasks and\n                      doesn't drive a display\n\nexample setup:\n\nkey                   type   value\naapl,ig-platform-id   data   0a006601\n\n(this is an example for a desktop hd 4000 without a dgpu)\n\npciroot(0x0)/pci(0x16,0x0)\n\nthis is needed if you're pairing an ivy bridge cpu with a 6 series motherboard(ie. h61, b65, q65, p67, h67, q67, z68), specifically needed to spoof your imei device into being supported. note this property is still required with or without ssdt-imei.\n\nkey         type   value\ndevice-id   data   3a1e0000\n\nnote: this is not needed if you have a 7 series motherboard(ie. b75, q75, z75, h77, q77, z77)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this ivy bridge example, we'll chose the imac13,2 smbios - this is done intentionally for compatibility's sake. there are 3 main smbios used for ivy bridge:\n\nsmbios     hardware\nimac13,1   used for computers utilizing the igpu for displaying\nimac13,2   used for computers using a dgpu for displaying, and an igpu\n           for computing tasks only\n\nnote: the following smbios are only supported up-to and including macos 10.15, catalina. for cases where you must boot big sur or monterey, see below:\n\nbig sur/monterey smbios table\n\nnote choosing a smbios from the list below for catalina or older is not recommended, as power management and such can break when using unoptimized smbios.\n\nbig sur table:\n\nsmbios     hardware\nimac14,4   used for computers utilizing the igpu for displaying\nimac15,1   used for computers using a dgpu for displaying, and an igpu\n           for computing tasks only\n\nmonterey table:\n\nsmbios      hardware\nmacpro6,1   as monterey does not include igpu drivers, you will want to\n            use macpro6,1 and a supported dgpu\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac13,2 smbios info                  #\n#######################################################\n\ntype:         imac13,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Kaby Lake",frontmatter:{},regularPath:"/config.plist/kaby-lake.html",relativePath:"config.plist/kaby-lake.md",key:"v-b01c8616",path:"/config.plist/kaby-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:101},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1330},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1341},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2505},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2590},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2842},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:2950},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3087},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2842},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4113},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1341},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2505},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6156},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1341},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8365},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8507},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8708},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2590},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2842},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:11752},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12902},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:2950},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13353},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14253},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16595},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:16664},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:16782},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3435},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1341},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2505},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21567},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22505},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3396},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19494},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11280},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:26004},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26246},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26456},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26841},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2842},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24204},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28212},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28532},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9036},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3465}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Kaby Lake\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.12, Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n00001259              Used when the Desktop iGPU is used to drive a display\n03001259              Used when the Desktop iGPU is only used for computing tasks\n                      and doesn't drive a display\n\nWe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   00001259\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\n\n(This is an example for a desktop HD 630 without a dGPU and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\nFun Fact: The reason the byte order is swapped is because most modern processors are Little Endian\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Kaby Lake example, we'll chose the iMac18,1 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Kaby Lake:\n\nSMBIOS     HARDWARE\niMac18,1   Used for computers utilizing the iGPU for displaying\niMac18,3   Used for computers using a dGPU for displaying, and an iGPU\n           for computing tasks only\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac18,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac18,1\nSerial:       C02Z2CZ5H7JY\nBoard Serial: C02928701GUH69FFB\nSmUUID:       AA043F8D-33B6-4A1A-94F7-46972AAD0607\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop kaby lake\n\nsupport                 version\ninitial macos support   macos 10.12, sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,ig-platform-id   comment\n00001259              used when the desktop igpu is used to drive a display\n03001259              used when the desktop igpu is only used for computing tasks\n                      and doesn't drive a display\n\nwe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. the first enables patching via whatevergreen.kext, and the second sets the min stolen memory to 19mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nkey                        type   value\naapl,ig-platform-id        data   00001259\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\n\n(this is an example for a desktop hd 630 without a dgpu and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\nfun fact: the reason the byte order is swapped is because most modern processors are little endian\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this kaby lake example, we'll chose the imac18,1 smbios - this is done intentionally for compatibility's sake. there are two main smbios used for kaby lake:\n\nsmbios     hardware\nimac18,1   used for computers utilizing the igpu for displaying\nimac18,3   used for computers using a dgpu for displaying, and an igpu\n           for computing tasks only\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac18,1 smbios info                  #\n#######################################################\n\ntype:         imac18,1\nserial:       c02z2cz5h7jy\nboard serial: c02928701guh69ffb\nsmuuid:       aa043f8d-33b6-4a1a-94f7-46972aad0607\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Yonah, Conroe and Penryn",frontmatter:{},regularPath:"/config.plist/penryn.html",relativePath:"config.plist/penryn.md",key:"v-3675c4ad",path:"/config.plist/penryn.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:481},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1710},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1721},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2717},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:312},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3054},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3162},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3322},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3054},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5120},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1721},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2717},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5597},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1721},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7806},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7948},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8149},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:312},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3054},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:10962},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12112},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3162},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:12563},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:13463},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:15805},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:15874},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:15992},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4242},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1721},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2717},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:20571},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:21780},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3179},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:18704},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10490},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25345},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25587},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25811},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26196},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3054},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23479},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27832},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28152},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8394},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3777}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Yonah, Conroe and Penryn\n\nSUPPORT                         VERSION\nInitial macOS Support: Penryn   OS X 10.4.10, Tiger\nLast Supported OS: Penryn       macOS 10.13.6 High Sierra\nNote                            iGPU support will not be covered in this guide, see here:\n                                GMA Patching\nNote 2                          SSE4 is required to boot macOS 10.12, Sierra and newer, so\n                                Conroe and older are unsupported\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control;\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * Needed to remove write protection from CR0 register on UEFI platforms.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses on UEFI boards.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section. On other platforms this section is also used for iGPU setup, on Penryn however it is covered in another guide.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       Not required for 10.12 and older\nPowerTimeoutKernelPanic   YES       Not required for 10.14 and older\nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * CFG-Lock is not present on Penryn so no need for this quirk\n * AppleXcpmCfgLock: NO\n   * CFG-Lock is not present on Penryn so no need for this quirk\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Penryn example, we'll chose the iMac10,1 SMBIOS - this is done intentionally for compatibility's sake. There are 4 main SMBIOS used for legacy hardware:\n\nSMBIOS      HARDWARE                      OS SUPPORT\niMac4,1     Yonah SMBIOS(32-bit)          10.4 to 10.6.8\niMac7,1     Conroe SMBIOS(64-Bit, SSE3)   10.4 to 10.11.6\niMac10,1    Penryn SMBIOS(64-Bit, SSE4)   10.6 to 10.13.6\nMacPro6,1   Mojave and newer SMBIOS       10.9 to current\n\n * If you plan to later run macOS 10.14, Mojave or newer, MacPro6,1 will be the recommended SMBIOS. However please note you will need telemetrap.kext to resolve install issues\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac10,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac10,1\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   NO        Enable this if you have a UEFI BIOS\nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: NO\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n   * Only relevant on UEFI BIOS\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Intel SGX\n * Intel Platform Trust\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop yonah, conroe and penryn\n\nsupport                         version\ninitial macos support: penryn   os x 10.4.10, tiger\nlast supported os: penryn       macos 10.13.6 high sierra\nnote                            igpu support will not be covered in this guide, see here:\n                                gma patching\nnote 2                          sse4 is required to boot macos 10.12, sierra and newer, so\n                                conroe and older are unsupported\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control;\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * needed to remove write protection from cr0 register on uefi platforms.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses on uefi boards.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section. on other platforms this section is also used for igpu setup, on penryn however it is covered in another guide.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       not required for 10.12 and older\npowertimeoutkernelpanic   yes       not required for 10.14 and older\nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * cfg-lock is not present on penryn so no need for this quirk\n * applexcpmcfglock: no\n   * cfg-lock is not present on penryn so no need for this quirk\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this penryn example, we'll chose the imac10,1 smbios - this is done intentionally for compatibility's sake. there are 4 main smbios used for legacy hardware:\n\nsmbios      hardware                      os support\nimac4,1     yonah smbios(32-bit)          10.4 to 10.6.8\nimac7,1     conroe smbios(64-bit, sse3)   10.4 to 10.11.6\nimac10,1    penryn smbios(64-bit, sse4)   10.6 to 10.13.6\nmacpro6,1   mojave and newer smbios       10.9 to current\n\n * if you plan to later run macos 10.14, mojave or newer, macpro6,1 will be the recommended smbios. however please note you will need telemetrap.kext to resolve install issues\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac10,1 smbios info                  #\n#######################################################\n\ntype:         imac10,1\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   no        enable this if you have a uefi bios\nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: no\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n   * only relevant on uefi bios\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * intel sgx\n * intel platform trust\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Sandy Bridge",frontmatter:{},regularPath:"/config.plist/sandy-bridge.html",relativePath:"config.plist/sandy-bridge.md",key:"v-022a3d0d",path:"/config.plist/sandy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:406},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1635},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1646},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2955},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3893},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4145},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4253},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4390},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4145},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5472},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1646},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2955},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7748},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1646},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9957},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10099},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:10300},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3893},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4145},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13433},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:14583},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4253},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:15034},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15934},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18276},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18345},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:18463},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4738},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1646},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2955},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23248},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24273},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:397},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:21175},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12961},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27838},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:28080},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28304},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28689},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4145},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25972},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30259},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30579},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10628},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3483}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Sandy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.7, Snow Leopard\nLast Supported OS       macOS 12 Monterey\nNote 1                  For Ventura information, see macOS 13 Ventura\nNote 2                  Sandy Bridge's iGPU is only officially supported up-to macOS\n                        10.13\nNote 3                  Most Sandy bridge boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-IMEI        Needed to add a missing IMEI device on Sandy Bridge CPU with\n                 7 series motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support SandyBridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode, however this quirk is only applicable to UEFI platforms.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nThe AAPL,snb-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,SNB-PLATFORM-ID   COMMENT\n10000300               Used when the Desktop iGPU is used to drive a display\n00000500               Used when the Desktop iGPU is only used for computing tasks\n                       and doesn't drive a display\n\nWe also have the issue of requiring a supported device-id, just like with the above table you'll want to match up to your hardware configuration:\n\nDEVICE-ID   COMMENT\n26010000    Used when the Desktop iGPU is used to drive a display\n02010000    Used when the Desktop iGPU is only used for computing tasks\n            and doesn't drive a display\n\nAnd finally, you should have something like this:\n\nKEY                    TYPE   VALUE\nAAPL,snb-platform-id   Data   00000500\ndevice-id              Data   26010000\n\n(This is an example for a desktop HD 3000 with a dGPU used as the output)\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nThis is needed if you're pairing an Sandy Bridge CPU with a 7 series motherboard(ie. B75, Q75, Z75, H77, Q77, Z77), specifically needed to spoof your IMEI device into being supported. Note this property is still required with or without SSDT-IMEI.\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1C0000\n\nNote: This is not needed if you have a 6 series motherboard(ie. H61, B65, Q65, P67, H67, Q67, Z68)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Sandy Bridge example, we'll chose the iMac12,2 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Sandy Bridge:\n\nSMBIOS      HARDWARE\niMac12,2    Default Sandy Bridge SMBIOS\nMacPro6,1   Mojave and newer SMBIOS\n\n * If you plan to later run macOS 10.14, Mojave or newer, MacPro6,1 will be the recommended SMBIOS and the iGPU must be disabled in the BIOS due to no longer being supported\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac12,2 SMBIOS Info                  #\n#######################################################\n\nType:         iMac12,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop sandy bridge\n\nsupport                 version\ninitial macos support   os x 10.6.7, snow leopard\nlast supported os       macos 12 monterey\nnote 1                  for ventura information, see macos 13 ventura\nnote 2                  sandy bridge's igpu is only officially supported up-to macos\n                        10.13\nnote 3                  most sandy bridge boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-imei        needed to add a missing imei device on sandy bridge cpu with\n                 7 series motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support sandybridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode, however this quirk is only applicable to uefi platforms.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nthe aapl,snb-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,snb-platform-id   comment\n10000300               used when the desktop igpu is used to drive a display\n00000500               used when the desktop igpu is only used for computing tasks\n                       and doesn't drive a display\n\nwe also have the issue of requiring a supported device-id, just like with the above table you'll want to match up to your hardware configuration:\n\ndevice-id   comment\n26010000    used when the desktop igpu is used to drive a display\n02010000    used when the desktop igpu is only used for computing tasks\n            and doesn't drive a display\n\nand finally, you should have something like this:\n\nkey                    type   value\naapl,snb-platform-id   data   00000500\ndevice-id              data   26010000\n\n(this is an example for a desktop hd 3000 with a dgpu used as the output)\n\npciroot(0x0)/pci(0x16,0x0)\n\nthis is needed if you're pairing an sandy bridge cpu with a 7 series motherboard(ie. b75, q75, z75, h77, q77, z77), specifically needed to spoof your imei device into being supported. note this property is still required with or without ssdt-imei.\n\nkey         type   value\ndevice-id   data   3a1c0000\n\nnote: this is not needed if you have a 6 series motherboard(ie. h61, b65, q65, p67, h67, q67, z68)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this sandy bridge example, we'll chose the imac12,2 smbios - this is done intentionally for compatibility's sake. there are two main smbios used for sandy bridge:\n\nsmbios      hardware\nimac12,2    default sandy bridge smbios\nmacpro6,1   mojave and newer smbios\n\n * if you plan to later run macos 10.14, mojave or newer, macpro6,1 will be the recommended smbios and the igpu must be disabled in the bios due to no longer being supported\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac12,2 smbios info                  #\n#######################################################\n\ntype:         imac12,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"苹果安全引导",frontmatter:{},regularPath:"/config.plist/security.html",relativePath:"config.plist/security.md",key:"v-59a4f3a6",path:"/config.plist/security.html",headers:[{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:76},{level:3,title:"Security -> SecureBootModel",slug:"security-securebootmodel",normalizedTitle:"security -&gt; securebootmodel",charIndex:null}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Misc Security -> SecureBootModel",content:"# 苹果安全引导\n\nconfig.plist中的这些设置可以限制OpenCore引导哪些macOS版本。在启动USB之前，你需要快速检查这些。\n\n\n# Misc\n\n\n# Security -> SecureBootModel\n\nOpenCore默认启用 Apple Secure Boot 。 这将支持安全功能，如验证macOS的“boot.efi”，其副作用是限制OpenCore将引导哪些macOS版本。\n\n * Big Sur 及以上 (11.0+): 建议设置为 Default.\n * High Sierra-Catalina (10.13-10.15):\n   * 如果你的型号没有在下面列出，设置为Disabled\n   * 如果运行 NVIDIA Web Drivers, 请将其设置为 Disabled.\n   * 如果列出了你的型号，将最小版本与你正在安装的版本进行比较。如果您的安装程序低于为您的SMBIOS列出的最低版本，则 Disable 。\n * Sierra 及以下 (10.4-10.12): 此设置没有影响。\n * 如果引导多个版本，你可能需要将值设置为Disabled。\n   * 例如，引导High Sierra和Big Sur的非t2 SMBIOS需要禁用此功能。\n   * T2 SMBIOS会受到下面列出的最低版本的限制。\n\nT2 Mac 型号\n\nSMBIOS                           MACOS 最低版本\niMacPro1,1 (December 2017)       10.13.2 (17C2111)\nMacBookPro15,1 (July 2018)       10.13.6 (17G2112)\nMacBookPro15,2 (July 2018)       10.13.6 (17G2112)\nMacmini8,1 (October 2018)        10.14 (18A2063)\nMacBookAir8,1 (October 2018)     10.14.1 (18B2084)\nMacBookPro15,3 (May 2019)        10.14.5 (18F132)\nMacBookPro15,4 (July 2019)       10.14.5 (18F2058)\nMacBookAir8,2 (July 2019)        10.14.5 (18F2058)\nMacBookPro16,1 (November 2019)   10.15.1 (19B2093)\nMacPro7,1 (December 2019)        10.15.1 (19B88)\nMacBookAir9,1 (March 2020)       10.15.3 (19D2064)\nMacBookPro16,2 (May 2020)        10.15.4 (19E2269)\nMacBookPro16,3 (May 2020)        10.15.4 (19E2265)\nMacBookPro16,4 (June 2020)       10.15.5 (19F96)\niMac20,1 (August 2020)           10.15.6 (19G2005)\niMac20,2 (August 2020)           10.15.6 (19G2005)\n\n\n# 现在所有这些都完成了，转到安装页面",normalizedContent:"# 苹果安全引导\n\nconfig.plist中的这些设置可以限制opencore引导哪些macos版本。在启动usb之前，你需要快速检查这些。\n\n\n# misc\n\n\n# security -> securebootmodel\n\nopencore默认启用 apple secure boot 。 这将支持安全功能，如验证macos的“boot.efi”，其副作用是限制opencore将引导哪些macos版本。\n\n * big sur 及以上 (11.0+): 建议设置为 default.\n * high sierra-catalina (10.13-10.15):\n   * 如果你的型号没有在下面列出，设置为disabled\n   * 如果运行 nvidia web drivers, 请将其设置为 disabled.\n   * 如果列出了你的型号，将最小版本与你正在安装的版本进行比较。如果您的安装程序低于为您的smbios列出的最低版本，则 disable 。\n * sierra 及以下 (10.4-10.12): 此设置没有影响。\n * 如果引导多个版本，你可能需要将值设置为disabled。\n   * 例如，引导high sierra和big sur的非t2 smbios需要禁用此功能。\n   * t2 smbios会受到下面列出的最低版本的限制。\n\nt2 mac 型号\n\nsmbios                           macos 最低版本\nimacpro1,1 (december 2017)       10.13.2 (17c2111)\nmacbookpro15,1 (july 2018)       10.13.6 (17g2112)\nmacbookpro15,2 (july 2018)       10.13.6 (17g2112)\nmacmini8,1 (october 2018)        10.14 (18a2063)\nmacbookair8,1 (october 2018)     10.14.1 (18b2084)\nmacbookpro15,3 (may 2019)        10.14.5 (18f132)\nmacbookpro15,4 (july 2019)       10.14.5 (18f2058)\nmacbookair8,2 (july 2019)        10.14.5 (18f2058)\nmacbookpro16,1 (november 2019)   10.15.1 (19b2093)\nmacpro7,1 (december 2019)        10.15.1 (19b88)\nmacbookair9,1 (march 2020)       10.15.3 (19d2064)\nmacbookpro16,2 (may 2020)        10.15.4 (19e2269)\nmacbookpro16,3 (may 2020)        10.15.4 (19e2265)\nmacbookpro16,4 (june 2020)       10.15.5 (19f96)\nimac20,1 (august 2020)           10.15.6 (19g2005)\nimac20,2 (august 2020)           10.15.6 (19g2005)\n\n\n# 现在所有这些都完成了，转到安装页面",charsets:{cjk:!0}},{title:"Desktop Skylake",frontmatter:{},regularPath:"/config.plist/skylake.html",relativePath:"config.plist/skylake.md",key:"v-48a88bb3",path:"/config.plist/skylake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:102},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1331},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1342},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2506},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2591},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2843},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:2951},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3088},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2843},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4114},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1342},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2506},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6541},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1342},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8750},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8892},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9093},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2591},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2843},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12137},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13287},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:2951},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13738},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14638},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16980},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17049},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17167},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3436},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1342},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2506},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21952},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22695},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3397},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19879},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11665},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:26194},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26436},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26646},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:27031},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2843},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24394},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28402},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28722},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9421},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3466}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Skylake\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n00001219              Used when the Desktop iGPU is used to drive a display\n01001219              Used when the Desktop iGPU is only used for computing tasks\n                      and doesn't drive a display\n\nNote: If booting macOS Ventura, you need to spoof your iGPU as the closest Kaby Lake model.\n\nWe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. The first enables patching via WhateverGreen.kext, the second sets the min stolen memory to 19MB and third sets the framebuffer memory to 9MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nAnd extra note for P530 users, your iGPU is not natively supported so you will need to add the following property:\n\nKEY         TYPE   VALUE\ndevice-id   Data   1B190000\n\nOnce you're done, you should have something similar:\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   00001219\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\ndevice-id                  Data   1B190000\n\n(This is an example for a desktop HD P530 without a dGPU and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this.\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Skylake example, we'll choose the iMac17,1 SMBIOS.\n\nNote 2: iMac17,1 was dropped in macOS Ventura. If running macOS Ventura, use a Kaby Lake SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac17,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac17,1\nSerial:       C02S3HYWGG7L\nBoard Serial: C02629102GUGPF7AD\nSmUUID:       3508AD44-B67D-4AD7-A109-7955130A1033\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop skylake\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,ig-platform-id   comment\n00001219              used when the desktop igpu is used to drive a display\n01001219              used when the desktop igpu is only used for computing tasks\n                      and doesn't drive a display\n\nnote: if booting macos ventura, you need to spoof your igpu as the closest kaby lake model.\n\nwe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. the first enables patching via whatevergreen.kext, the second sets the min stolen memory to 19mb and third sets the framebuffer memory to 9mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nand extra note for p530 users, your igpu is not natively supported so you will need to add the following property:\n\nkey         type   value\ndevice-id   data   1b190000\n\nonce you're done, you should have something similar:\n\nkey                        type   value\naapl,ig-platform-id        data   00001219\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\ndevice-id                  data   1b190000\n\n(this is an example for a desktop hd p530 without a dgpu and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this.\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this skylake example, we'll choose the imac17,1 smbios.\n\nnote 2: imac17,1 was dropped in macos ventura. if running macos ventura, use a kaby lake smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac17,1 smbios info                  #\n#######################################################\n\ntype:         imac17,1\nserial:       c02s3hywgg7l\nboard serial: c02629102gugpf7ad\nsmuuid:       3508ad44-b67d-4ad7-a109-7955130a1033\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"OpenCore and macOS 11: Big Sur",frontmatter:{search:!1},regularPath:"/extras/big-sur/",relativePath:"extras/big-sur/README.md",key:"v-b45995c4",path:"/extras/big-sur/",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:369},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:414},{level:3,title:"A supported SMBIOS",slug:"a-supported-smbios",normalizedTitle:"a supported smbios",charIndex:433},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:457},{level:3,title:"Up-to-date kexts, bootloader and config.plist",slug:"up-to-date-kexts-bootloader-and-config-plist",normalizedTitle:"up-to-date kexts, bootloader and config.plist",charIndex:481},{level:3,title:"Known issues",slug:"known-issues",normalizedTitle:"known issues",charIndex:532},{level:2,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:548},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:564},{level:3,title:"Stuck at Forcing CS_RUNTIME for entitlement",slug:"stuck-at-forcing-cs-runtime-for-entitlement",normalizedTitle:"stuck at forcing cs_runtime for entitlement",charIndex:585},{level:3,title:"Stuck at PCI Configuration Begins for Intel's X99 and X299 boards",slug:"stuck-at-pci-configuration-begins-for-intel-s-x99-and-x299-boards",normalizedTitle:"stuck at pci configuration begins for intel's x99 and x299 boards",charIndex:634},{level:3,title:"Stuck on ramrod(^^^^^^^^^^^^^)",slug:"stuck-on-ramrod",normalizedTitle:"stuck on ramrod(^^^^^^^^^^^^^)",charIndex:705},{level:3,title:"X79 and X99 Kernel Panic on IOPCIFamily",slug:"x79-and-x99-kernel-panic-on-iopcifamily",normalizedTitle:"x79 and x99 kernel panic on iopcifamily",charIndex:741},{level:3,title:"DeviceProperties injection failing",slug:"deviceproperties-injection-failing",normalizedTitle:"deviceproperties injection failing",charIndex:786},{level:3,title:"Keyboard and Mouse broken",slug:"keyboard-and-mouse-broken",normalizedTitle:"keyboard and mouse broken",charIndex:826},{level:3,title:"Early Kernel Panic on max_cpus_from_firmware not yet initialized",slug:"early-kernel-panic-on-max-cpus-from-firmware-not-yet-initialized",normalizedTitle:"early kernel panic on max_cpus_from_firmware not yet initialized",charIndex:857},{level:3,title:"Cannot update to newer versions of Big Sur",slug:"cannot-update-to-newer-versions-of-big-sur",normalizedTitle:"cannot update to newer versions of big sur",charIndex:927},{level:3,title:"Kernel Panic on Rooting from the live fs",slug:"kernel-panic-on-rooting-from-the-live-fs",normalizedTitle:"kernel panic on rooting from the live fs",charIndex:975},{level:3,title:"Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation",slug:"asus-z97-and-hedt-ie-x99-and-x299-failing-stage-2-installation",normalizedTitle:"asus z97 and hedt(ie. x99 and x299) failing stage 2 installation",charIndex:1021},{level:3,title:"Laptops kernel panicking on cannot perform kext scan",slug:"laptops-kernel-panicking-on-cannot-perform-kext-scan",normalizedTitle:"laptops kernel panicking on cannot perform kext scan",charIndex:1091},{level:3,title:'Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',slug:"reboot-on-appleusbhostport-createdevice-failed-to-create-device-on-macos-11-3",normalizedTitle:"reboot on &quot;appleusbhostport::createdevice: failed to create device&quot; on macos 11.3+",charIndex:null}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:'Table of Contents Prerequisites A supported SMBIOS Supported hardware Up-to-date kexts, bootloader and config.plist Known issues Installation Troubleshooting Stuck at Forcing CS_RUNTIME for entitlement Stuck at PCI Configuration Begins for Intel\'s X99 and X299 boards Stuck on ramrod(^^^^^^^^^^^^^) X79 and X99 Kernel Panic on IOPCIFamily DeviceProperties injection failing Keyboard and Mouse broken Early Kernel Panic on max_cpus_from_firmware not yet initialized Cannot update to newer versions of Big Sur Kernel Panic on Rooting from the live fs Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation Laptops kernel panicking on cannot perform kext scan Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',content:"# OpenCore and macOS 11: Big Sur\n\nIt's that time of year again and with it, and a new macOS beta has been dropped. Here's all the info you need to get started.\n\nReminder\n\nThis page will be a small discussion on exactly what you need to prepare for Big Sur, a more in depth look into what's changed on Big Sur can be found here:\n\n * What's new in macOS 11, Big Sur!\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * A supported SMBIOS\n   * Supported hardware\n   * Up-to-date kexts, bootloader and config.plist\n   * Known issues\n * Installation\n * Troubleshooting\n   * Stuck at Forcing CS_RUNTIME for entitlement\n   * Stuck at PCI Configuration Begins for Intel's X99 and X299 boards\n   * Stuck on ramrod(^^^^^^^^^^^^^)\n   * X79 and X99 Kernel Panic on IOPCIFamily\n   * DeviceProperties injection failing\n   * Keyboard and Mouse broken\n   * Early Kernel Panic on max_cpus_from_firmware not yet initialized\n   * Cannot update to newer versions of Big Sur\n   * Kernel Panic on Rooting from the live fs\n   * Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation\n   * Laptops kernel panicking on cannot perform kext scan\n   * Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\n\n\n\n# Prerequisites\n\nBefore we can jump head first into installing Big Sur, we need to go over a few things:\n\n\n# A supported SMBIOS\n\nBig Sur dropped a few Ivy Bridge and Haswell based SMBIOS from macOS, so see below that yours wasn't dropped:\n\n * iMac14,3 and older\n   * Note iMac14,4 is still supported\n * MacPro5,1 and older\n * Macmini6,x and older\n * MacBook7,1 and older\n * MacBookAir5,x and older\n * MacBookPro10,x and older\n\nIf your SMBIOS was supported in Catalina and isn't included above, you're good to go!\n\nSupported SMBIOS\n\nSMBIOS still supported in macOS Big Sur:\n\n * iMac14,4 and newer\n * MacPro6,1 and newer\n * iMacPro1,1 and newer\n * Macmini7,1 and newer\n * MacBook8,1 and newer\n * MacBookAir6,x and newer\n * MacBookPro11,x and newer\n\nFor full list of supported SMBIOS including OS support, see here: Choosing the right SMBIOS\n\nFor those wanting a simple translation for their Machines:\n\n * iMac13,1 should transition over to using iMac14,4\n * iMac13,2 should transition over to using iMac15,1\n * iMac14,2 and iMac14,3 should transition over to using iMac15,1\n   * Note: AMD CPU users with NVIDIA GPUs may find MacPro7,1 more suitable\n * iMac14,1 should transition over to iMac14,4\n\n\n# Supported hardware\n\nNot much hardware has been dropped, though the few that have:\n\n * Official Ivy Bridge U, H and S CPUs.\n   * These CPUs will still boot without much issue, but note that no Macs are supported with consumer Ivy Bridge in Big Sur.\n   * Ivy Bridge-E CPUs are still supported thanks to being in MacPro6,1\n * Ivy Bridge iGPUs slated for removal\n   * HD 4000 and HD 2500, however currently these drivers are still present in 11.0.1\n * BCM4331 and BCM43224 based WiFi cards.\n   * See Wireless Buyers guide for potential cards to upgrade to.\n   * Potential work-around is to inject a patched IO80211Family, see here for more details: IO80211 Patches\n * Certain SATA controllers dropped\n   * For some reason, Apple removed the AppleIntelPchSeriesAHCI class from AppleAHCIPort.kext. Due to the outright removal of the class, trying to spoof to another ID (generally done by SATA-unsupported.kext) can fail for many and create instability for others.\n   * A partial fix is to inject Catalina's version with any conflicting symbols being patched. You can find a sample kext here: Catalina's patched AppleAHCIPort.kext\n   * We recommend setting the MinKernel value to 20.0.0 for the kext CtlnaAHCIPort.kext to avoid any potential conflicts. This way, it will work in both Catalina and Big Sur so you can remove SATA-unsupported if you want.\n\nOther notable changes:\n\n * MSI Navi users no longer require the ATY,rom/-wegnoegpu patch to boot the installer\n * Stage 2 installation requiring working NVRAM\n   * Asus 9 series: For more info, see here: Haswell ASUS Z97 Big Sur Update Thread\n   * X99 and X299 users with broken NVRAM will need to install on another machine and move the SSD when done\n\n\n# Up-to-date kexts, bootloader and config.plist\n\nEnsure that you have the latest version of OpenCore, kexts and config.plist so it won't have any odd compatibility issues. You can simply download and update OpenCore and kexts as mentioned here:\n\n * Updating OpenCore and macOS\n\nIf you're unsure what version of OpenCore you're using, you can run the following in terminal:\n\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:opencore-version\n\n\n * Note: The about command will require you to include bit 0x2 in Misc -> Security -> ExposeSensitiveData, recommended values for ExposeSensitiveData is 0x6 which includes bits 0x2 and 0x4.\n\n# AMD Note\n\nReminder for AMD Users: Don't forget to update your kernel patches with those provided by AMD OS X, otherwise you'll be unable to boot Big Sur:\n\n * AMD OSX Patches\n\n# Intel HEDT Note\n\nFor X79, X99 and X299 users, pay close attention to the below. Big Sur has added new requirements for ACPI, so you'll need to grab some new SSDTs:\n\n * X79\n   * SSDT-UNC\n * X99\n   * SSDT-UNC\n   * SSDT-RTC0-RANGE\n * X299\n   * SSDT-RTC0-RANGE\n\nFor those who'd like precompiled files, see here:\n\n * Getting started with ACPI: Prebuilt SSDTs\n\n\n# Known issues\n\nWith Big Sur, quite a bit broke. Mainly the following:\n\n * Lilu\n   * Mainly user-space patching has severely broke, meaning certain functionality may have broken\n   * These include:\n     * DiskArbitrationFixup\n     * MacProMemoryNotificationDisabler\n     * SidecarEnabler\n     * SystemProfilerMemoryFixup\n     * NoTouchID\n     * WhateverGreen's DRM and -cdfon patches\n * AirportBrcmFixup\n   * Forcing a specific driver to load with brcmfx-driver= may help\n     * BCM94352Z users for example may need brcmfx-driver=2 in boot-args to resolve this, other chipsets will need other variables.\n   * Setting MaxKernel to 19.9.9 for AirPortBrcm4360_Injector.kext may help. More information from the repo\n * SATA Support broken\n   * Due to Apple dropping the AppleIntelPchSeriesAHCI class in AppleAHCIPort.kext\n   * To resolve, add Catalina's patched AppleAHCIPort.kext with the MinKernel set to 20.0.0\n * XhciPortLimit broken in macOS 11.3 Beta 2 and newer\n   * With macOS 11.3 and newer, XhciPortLimit is broken resulting in boot loops. We advise users either install an older OS(ie. macOS 10.15, Catalina) or find a 11.2.3 or older Big Sur installer\n     * For education purposes, we have a copy provided here: macOS 11.2.3 InstallAssistant(macOS)\n     * If you've already mapped your USB ports and disabled XhciPortLimit, you can boot macOS 11.3+ without issue\n\nAnd while not an issue, SIP has now gained a new bit so to properly disable SIP you need to set csr-active-config to FF0F0000. See here for more info: Disabling SIP\n\n\n# Installation\n\nGuides have been updated to accommodate Big Sur, see the applicable OS environment for you:\n\n * macOS users\n * Windows users\n * Linux users\n\n\n# Troubleshooting\n\n\n# Stuck at Forcing CS_RUNTIME for entitlement\n\n\n\nThis is actually the part at where macOS will seal the system volume, and where it may seem that macOS has gotten stuck. DO NOT RESTART thinking you're stuck, this will take quite some time to complete, otherwise you'll break your installation.\n\n\n# Stuck at PCI Configuration Begins for Intel's X99 and X299 boards\n\n\n\nAs previously mentioned, Intel HEDT motherboards may have some issues revolving around their RTC device in ACPI. To resolve, you'll need to look at your RTC device and see which regions are missing. For more information, see here: SSDT-RTC0-RANGE.dsl\n\n\n# Stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nIf you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your SMC emulator is broken. To fix this, you have 2 options:\n\n * Ensure you're using the latest builds of VirtualSMC and Lilu, with the vsmcgen=1 boot-arg\n * Switch over to Rehabman's FakeSMC (you can use the MinKernel/MaxKernel trick mentioned above to restrict FakeSMC to Big Sur and up)\n\nAnd when switching kexts, ensure you don't have both FakeSMC and VirtualSMC enabled in your config.plist, as this will cause a conflict.\n\n\n# X79 and X99 Kernel Panic on IOPCIFamily\n\nThis is due to an unused uncore PCI Bridges being enabled in ACPI, and so IOPCIFamily will kernel panic when probing unknown devices. To resolve, you'll need to add SSDT-UNC to your system\n\n\n# DeviceProperties injection failing\n\nWith Big Sur, macOS has become much pickier with devices being present in ACPI. Especially if you're injecting important properties for WhateverGreen or AppleALC, you may find they're no longer applying. To verify whether your ACPI defines your hardware, check for the acpi-path property in IORegistryExplorer:\n\n\n\nIf no property is found, you'll need to create an SSDT that provides the full pathing as you likely have a PCI Bridge that is not documented in your ACPI tables. An example of this can be found here: SSDT-BRG0\n\n * Note: This issue may also pop up in older versions of macOS, however Big Sur is most likely to have issues.\n\n\n# Keyboard and Mouse broken\n\nFor certain legacy systems, you may notice that while the USB ports work your HID-based devices such as the keyboard and mouse may be broken. To resolve this, add the following patch:\n\nIOHIDFamily Patch\n\nconfig.plist -> Kernel -> Patch:\n\nKEY           TYPE      VALUE\nBase          String    _isSingleUser\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    com.apple.iokit.IOHIDFamily\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B801000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\nSource\n\n\n# Early Kernel Panic on max_cpus_from_firmware not yet initialized\n\nIf you receive an early kernel panic on max_cpus_from_firmware not yet initialized, this is due to the new acpi_count_enabled_logical_processors method added in macOS Big Sur's kernel. To resolve, please ensure you're on OpenCore 0.6.0 or newer with the AvoidRuntimeDefrag Quirk enabled.\n\n * Note: Due to how early this kernel panic happens, you may only be able to log it either via serial or rebooting in a known working install of macOS and checking your panic logged in NVRAM.\n   * Most users will see this panic simply as [EB|#LOG:EXITBS:START]\n\nExample Kernel Panic\n\nOn-screen:\n\n\n\nVia serial logging or NVRAM:\n\n\n\nLegacy Edge Case\n\nOn certain hardware, mainly the HP DC7900, the kernel still can't determine exactly how many threads your hardware supports. This will result in the aforementioned kernel panic and so we need to hard code the CPU core's value.\n\nTo do this, Add the following patch(replacing the 04 from B8 04 00 00 00 C3 with the amount of CPU threads your hardware supports):\n\nKEY           TYPE      VALUE\nBase          String    _acpi_count_enabled_logical_processors\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    Kernel\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B804000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\n\n# Cannot update to newer versions of Big Sur\n\nGenerally there's 2 main culprits:\n\n * Broken Update Utility\n   * Most common error if running a beta, try this first\n * Broken Seal\n\n# Broken Update Utility\n\nGenerally seen with every beta cycle, simply unenroll and enroll again:\n\n# Unenroll from beta catalog\nsudo /System/Library/PrivateFrameworks/Seeding.framework/Resources/seedutil unenroll\n# Enroll back in\nsudo /System/Library/PrivateFrameworks/Seeding.framework/Resources/seedutil enroll DeveloperSeed\n\n\nThen check back with settings, and it should pop up. If not, run the following:\n\n# List software updates via terminal\nsoftwareupdate -l\n\n\nThis should help kick the update utility back into gear. If you still have issues, check the Broken Seal section.\n\n# Broken Seal\n\nWith Apple's new snapshotting for the system drive, they now depend heavily on this for OS updates to apply correctly. So when a drove's seal is broken, macOS will refuse to update the drive.\n\nTo verify yourself, check that Snapshot Sealed returns as YES:\n\n# List all APFS volumes\ndiskutil apfs list\n\n# Look for your system volume\nVolume disk1s8 A604D636-3C54-4CAA-9A31-5E1A460DC5C0\n        ---------------------------------------------------\n        APFS Volume Disk (Role):   disk1s8 (System)\n        Name:                      Big Sur HD (Case-insensitive)\n        Mount Point:               Not Mounted\n        Capacity Consumed:         15113809920 B (15.1 GB)\n        Sealed:                    Broken\n        FileVault:                 No\n        |\n        Snapshot:                  4202EBE5-288B-4701-BA1E-B6EC8AD6397D\n        Snapshot Disk:             disk1s8s1\n        Snapshot Mount Point:      /\n        Snapshot Sealed:           Yes\n\n\nIf it returns Snapshot Sealed: Broken, then you'll want to go through the following:\n\n * Update to OpenCore 0.6.4 or newer\n   * Specifically commit ba10b5d or newer is required\n * Revert to older snapshots\n   * Mainly for those who have tampered with the system volume\n   * See here how to revert: Rolling back APFS Snapshots\n\n\n# Kernel Panic on Rooting from the live fs\n\nFull error:\n\nRooting from the live fs of a sealed volume is not allowed on a RELEASE build\n\n\nThis is due to issues around Secure Boot boot being enabled in Beta 10 with older versions of OpenCore. Simply update to 0.6.4 to resolve\n\n * Specifically commit ba10b5d or newer is required\n\n\n# Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation\n\nWith Big Sur, there's a higher reliance on native NVRAM for installation otherwise the installer will get stuck in a reboot loop. To resolve this you'll need to either:\n\n * Install Big Sur on another machine, then transfer the drive\n * Fix the motherboard's NVRAM\n   * mainly applicable with Asus's Z97 series\n\nFor the latter, see here: Haswell ASUS Z97 Big Sur Update Thread\n\n\n# Laptops kernel panicking on cannot perform kext scan\n\nThis is due to multiple copies of the same kext being in your kernel cache, and to be more specific having multiple copies of VoodooInput. Look over your Kernel -> Add and verify you only have 1 copy of VoodooInput enabled.\n\n * Note: Both VoodooI2C and VoodooPS2 have a bundled copy of VoodooInput, which you disable is up to personal preference\n\n\n# Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\nThis is due to XhciPortLimit breaking with macOS 11.3 and newer, to resolve you must disable XhciPortLimit under Kernel -> Quirks. Please ensure you've mapped your USB ports correctly before doing so.",normalizedContent:"# opencore and macos 11: big sur\n\nit's that time of year again and with it, and a new macos beta has been dropped. here's all the info you need to get started.\n\nreminder\n\nthis page will be a small discussion on exactly what you need to prepare for big sur, a more in depth look into what's changed on big sur can be found here:\n\n * what's new in macos 11, big sur!\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * a supported smbios\n   * supported hardware\n   * up-to-date kexts, bootloader and config.plist\n   * known issues\n * installation\n * troubleshooting\n   * stuck at forcing cs_runtime for entitlement\n   * stuck at pci configuration begins for intel's x99 and x299 boards\n   * stuck on ramrod(^^^^^^^^^^^^^)\n   * x79 and x99 kernel panic on iopcifamily\n   * deviceproperties injection failing\n   * keyboard and mouse broken\n   * early kernel panic on max_cpus_from_firmware not yet initialized\n   * cannot update to newer versions of big sur\n   * kernel panic on rooting from the live fs\n   * asus z97 and hedt(ie. x99 and x299) failing stage 2 installation\n   * laptops kernel panicking on cannot perform kext scan\n   * reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\n\n\n\n# prerequisites\n\nbefore we can jump head first into installing big sur, we need to go over a few things:\n\n\n# a supported smbios\n\nbig sur dropped a few ivy bridge and haswell based smbios from macos, so see below that yours wasn't dropped:\n\n * imac14,3 and older\n   * note imac14,4 is still supported\n * macpro5,1 and older\n * macmini6,x and older\n * macbook7,1 and older\n * macbookair5,x and older\n * macbookpro10,x and older\n\nif your smbios was supported in catalina and isn't included above, you're good to go!\n\nsupported smbios\n\nsmbios still supported in macos big sur:\n\n * imac14,4 and newer\n * macpro6,1 and newer\n * imacpro1,1 and newer\n * macmini7,1 and newer\n * macbook8,1 and newer\n * macbookair6,x and newer\n * macbookpro11,x and newer\n\nfor full list of supported smbios including os support, see here: choosing the right smbios\n\nfor those wanting a simple translation for their machines:\n\n * imac13,1 should transition over to using imac14,4\n * imac13,2 should transition over to using imac15,1\n * imac14,2 and imac14,3 should transition over to using imac15,1\n   * note: amd cpu users with nvidia gpus may find macpro7,1 more suitable\n * imac14,1 should transition over to imac14,4\n\n\n# supported hardware\n\nnot much hardware has been dropped, though the few that have:\n\n * official ivy bridge u, h and s cpus.\n   * these cpus will still boot without much issue, but note that no macs are supported with consumer ivy bridge in big sur.\n   * ivy bridge-e cpus are still supported thanks to being in macpro6,1\n * ivy bridge igpus slated for removal\n   * hd 4000 and hd 2500, however currently these drivers are still present in 11.0.1\n * bcm4331 and bcm43224 based wifi cards.\n   * see wireless buyers guide for potential cards to upgrade to.\n   * potential work-around is to inject a patched io80211family, see here for more details: io80211 patches\n * certain sata controllers dropped\n   * for some reason, apple removed the appleintelpchseriesahci class from appleahciport.kext. due to the outright removal of the class, trying to spoof to another id (generally done by sata-unsupported.kext) can fail for many and create instability for others.\n   * a partial fix is to inject catalina's version with any conflicting symbols being patched. you can find a sample kext here: catalina's patched appleahciport.kext\n   * we recommend setting the minkernel value to 20.0.0 for the kext ctlnaahciport.kext to avoid any potential conflicts. this way, it will work in both catalina and big sur so you can remove sata-unsupported if you want.\n\nother notable changes:\n\n * msi navi users no longer require the aty,rom/-wegnoegpu patch to boot the installer\n * stage 2 installation requiring working nvram\n   * asus 9 series: for more info, see here: haswell asus z97 big sur update thread\n   * x99 and x299 users with broken nvram will need to install on another machine and move the ssd when done\n\n\n# up-to-date kexts, bootloader and config.plist\n\nensure that you have the latest version of opencore, kexts and config.plist so it won't have any odd compatibility issues. you can simply download and update opencore and kexts as mentioned here:\n\n * updating opencore and macos\n\nif you're unsure what version of opencore you're using, you can run the following in terminal:\n\nnvram 4d1fda02-38c7-4a6a-9cc6-4bcca8b30102:opencore-version\n\n\n * note: the about command will require you to include bit 0x2 in misc -> security -> exposesensitivedata, recommended values for exposesensitivedata is 0x6 which includes bits 0x2 and 0x4.\n\n# amd note\n\nreminder for amd users: don't forget to update your kernel patches with those provided by amd os x, otherwise you'll be unable to boot big sur:\n\n * amd osx patches\n\n# intel hedt note\n\nfor x79, x99 and x299 users, pay close attention to the below. big sur has added new requirements for acpi, so you'll need to grab some new ssdts:\n\n * x79\n   * ssdt-unc\n * x99\n   * ssdt-unc\n   * ssdt-rtc0-range\n * x299\n   * ssdt-rtc0-range\n\nfor those who'd like precompiled files, see here:\n\n * getting started with acpi: prebuilt ssdts\n\n\n# known issues\n\nwith big sur, quite a bit broke. mainly the following:\n\n * lilu\n   * mainly user-space patching has severely broke, meaning certain functionality may have broken\n   * these include:\n     * diskarbitrationfixup\n     * macpromemorynotificationdisabler\n     * sidecarenabler\n     * systemprofilermemoryfixup\n     * notouchid\n     * whatevergreen's drm and -cdfon patches\n * airportbrcmfixup\n   * forcing a specific driver to load with brcmfx-driver= may help\n     * bcm94352z users for example may need brcmfx-driver=2 in boot-args to resolve this, other chipsets will need other variables.\n   * setting maxkernel to 19.9.9 for airportbrcm4360_injector.kext may help. more information from the repo\n * sata support broken\n   * due to apple dropping the appleintelpchseriesahci class in appleahciport.kext\n   * to resolve, add catalina's patched appleahciport.kext with the minkernel set to 20.0.0\n * xhciportlimit broken in macos 11.3 beta 2 and newer\n   * with macos 11.3 and newer, xhciportlimit is broken resulting in boot loops. we advise users either install an older os(ie. macos 10.15, catalina) or find a 11.2.3 or older big sur installer\n     * for education purposes, we have a copy provided here: macos 11.2.3 installassistant(macos)\n     * if you've already mapped your usb ports and disabled xhciportlimit, you can boot macos 11.3+ without issue\n\nand while not an issue, sip has now gained a new bit so to properly disable sip you need to set csr-active-config to ff0f0000. see here for more info: disabling sip\n\n\n# installation\n\nguides have been updated to accommodate big sur, see the applicable os environment for you:\n\n * macos users\n * windows users\n * linux users\n\n\n# troubleshooting\n\n\n# stuck at forcing cs_runtime for entitlement\n\n\n\nthis is actually the part at where macos will seal the system volume, and where it may seem that macos has gotten stuck. do not restart thinking you're stuck, this will take quite some time to complete, otherwise you'll break your installation.\n\n\n# stuck at pci configuration begins for intel's x99 and x299 boards\n\n\n\nas previously mentioned, intel hedt motherboards may have some issues revolving around their rtc device in acpi. to resolve, you'll need to look at your rtc device and see which regions are missing. for more information, see here: ssdt-rtc0-range.dsl\n\n\n# stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nif you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your smc emulator is broken. to fix this, you have 2 options:\n\n * ensure you're using the latest builds of virtualsmc and lilu, with the vsmcgen=1 boot-arg\n * switch over to rehabman's fakesmc (you can use the minkernel/maxkernel trick mentioned above to restrict fakesmc to big sur and up)\n\nand when switching kexts, ensure you don't have both fakesmc and virtualsmc enabled in your config.plist, as this will cause a conflict.\n\n\n# x79 and x99 kernel panic on iopcifamily\n\nthis is due to an unused uncore pci bridges being enabled in acpi, and so iopcifamily will kernel panic when probing unknown devices. to resolve, you'll need to add ssdt-unc to your system\n\n\n# deviceproperties injection failing\n\nwith big sur, macos has become much pickier with devices being present in acpi. especially if you're injecting important properties for whatevergreen or applealc, you may find they're no longer applying. to verify whether your acpi defines your hardware, check for the acpi-path property in ioregistryexplorer:\n\n\n\nif no property is found, you'll need to create an ssdt that provides the full pathing as you likely have a pci bridge that is not documented in your acpi tables. an example of this can be found here: ssdt-brg0\n\n * note: this issue may also pop up in older versions of macos, however big sur is most likely to have issues.\n\n\n# keyboard and mouse broken\n\nfor certain legacy systems, you may notice that while the usb ports work your hid-based devices such as the keyboard and mouse may be broken. to resolve this, add the following patch:\n\niohidfamily patch\n\nconfig.plist -> kernel -> patch:\n\nkey           type      value\nbase          string    _issingleuser\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    com.apple.iokit.iohidfamily\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b801000000c3\nreplacemask   data      \nskip          integer   0\n\nsource\n\n\n# early kernel panic on max_cpus_from_firmware not yet initialized\n\nif you receive an early kernel panic on max_cpus_from_firmware not yet initialized, this is due to the new acpi_count_enabled_logical_processors method added in macos big sur's kernel. to resolve, please ensure you're on opencore 0.6.0 or newer with the avoidruntimedefrag quirk enabled.\n\n * note: due to how early this kernel panic happens, you may only be able to log it either via serial or rebooting in a known working install of macos and checking your panic logged in nvram.\n   * most users will see this panic simply as [eb|#log:exitbs:start]\n\nexample kernel panic\n\non-screen:\n\n\n\nvia serial logging or nvram:\n\n\n\nlegacy edge case\n\non certain hardware, mainly the hp dc7900, the kernel still can't determine exactly how many threads your hardware supports. this will result in the aforementioned kernel panic and so we need to hard code the cpu core's value.\n\nto do this, add the following patch(replacing the 04 from b8 04 00 00 00 c3 with the amount of cpu threads your hardware supports):\n\nkey           type      value\nbase          string    _acpi_count_enabled_logical_processors\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    kernel\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b804000000c3\nreplacemask   data      \nskip          integer   0\n\n\n# cannot update to newer versions of big sur\n\ngenerally there's 2 main culprits:\n\n * broken update utility\n   * most common error if running a beta, try this first\n * broken seal\n\n# broken update utility\n\ngenerally seen with every beta cycle, simply unenroll and enroll again:\n\n# unenroll from beta catalog\nsudo /system/library/privateframeworks/seeding.framework/resources/seedutil unenroll\n# enroll back in\nsudo /system/library/privateframeworks/seeding.framework/resources/seedutil enroll developerseed\n\n\nthen check back with settings, and it should pop up. if not, run the following:\n\n# list software updates via terminal\nsoftwareupdate -l\n\n\nthis should help kick the update utility back into gear. if you still have issues, check the broken seal section.\n\n# broken seal\n\nwith apple's new snapshotting for the system drive, they now depend heavily on this for os updates to apply correctly. so when a drove's seal is broken, macos will refuse to update the drive.\n\nto verify yourself, check that snapshot sealed returns as yes:\n\n# list all apfs volumes\ndiskutil apfs list\n\n# look for your system volume\nvolume disk1s8 a604d636-3c54-4caa-9a31-5e1a460dc5c0\n        ---------------------------------------------------\n        apfs volume disk (role):   disk1s8 (system)\n        name:                      big sur hd (case-insensitive)\n        mount point:               not mounted\n        capacity consumed:         15113809920 b (15.1 gb)\n        sealed:                    broken\n        filevault:                 no\n        |\n        snapshot:                  4202ebe5-288b-4701-ba1e-b6ec8ad6397d\n        snapshot disk:             disk1s8s1\n        snapshot mount point:      /\n        snapshot sealed:           yes\n\n\nif it returns snapshot sealed: broken, then you'll want to go through the following:\n\n * update to opencore 0.6.4 or newer\n   * specifically commit ba10b5d or newer is required\n * revert to older snapshots\n   * mainly for those who have tampered with the system volume\n   * see here how to revert: rolling back apfs snapshots\n\n\n# kernel panic on rooting from the live fs\n\nfull error:\n\nrooting from the live fs of a sealed volume is not allowed on a release build\n\n\nthis is due to issues around secure boot boot being enabled in beta 10 with older versions of opencore. simply update to 0.6.4 to resolve\n\n * specifically commit ba10b5d or newer is required\n\n\n# asus z97 and hedt(ie. x99 and x299) failing stage 2 installation\n\nwith big sur, there's a higher reliance on native nvram for installation otherwise the installer will get stuck in a reboot loop. to resolve this you'll need to either:\n\n * install big sur on another machine, then transfer the drive\n * fix the motherboard's nvram\n   * mainly applicable with asus's z97 series\n\nfor the latter, see here: haswell asus z97 big sur update thread\n\n\n# laptops kernel panicking on cannot perform kext scan\n\nthis is due to multiple copies of the same kext being in your kernel cache, and to be more specific having multiple copies of voodooinput. look over your kernel -> add and verify you only have 1 copy of voodooinput enabled.\n\n * note: both voodooi2c and voodoops2 have a bundled copy of voodooinput, which you disable is up to personal preference\n\n\n# reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\nthis is due to xhciportlimit breaking with macos 11.3 and newer, to resolve you must disable xhciportlimit under kernel -> quirks. please ensure you've mapped your usb ports correctly before doing so.",charsets:{cjk:!0}},{title:"VMware Fusion",frontmatter:{search:!1},regularPath:"/extras/big-sur/fusion.html",relativePath:"extras/big-sur/fusion.md",key:"v-010da74d",path:"/extras/big-sur/fusion.html",headers:[{level:2,title:"Requirements",slug:"requirements",normalizedTitle:"requirements",charIndex:20},{level:2,title:"Converting Installation Media",slug:"converting-installation-media",normalizedTitle:"converting installation media",charIndex:281},{level:2,title:"Installing macOS Big Sur in VMware Fusion",slug:"installing-macos-big-sur-in-vmware-fusion",normalizedTitle:"installing macos big sur in vmware fusion",charIndex:955}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Requirements Converting Installation Media Installing macOS Big Sur in VMware Fusion",content:'# VMware Fusion\n\n\n# Requirements\n\n * VMware Fusion\n * Java (both the JRE and JDK work)\n * A computer running macOS\n * The desired macOS installation software installed to /Applications\n * A USB attached hard disk or SSD, or an internal disk that can be passed through entirely\n\n\n# Converting Installation Media\n\nVMware cannot directly use a raw disk image, so we\'ll create a linked VMDK, which will allow you to use it as a virtual hard drive in VMware Fusion.\n\nDownload raw2vmdk from here, and put it in the same directory as the .img file. Then, run the following command:\n\n### Change "Install macOS Big Sur Beta" if the name of the .img file differs\njava -jar raw2vmdk.jar "Install macOS Big Sur Beta.img" "Install macOS Big Sur Beta.vmdk"\n\n\nThis will create a VMDK that references the .img file (the raw disk image) for VMware to use. If you\'re going to move this vmdk or transfer it to another computer, you must move the img file along with it.\n\n\n# Installing macOS Big Sur in VMware Fusion\n\nYou have two options here: pass through a raw disk, or pass through an entire USB device. The steps are not that different for both, so they\'ll be combined here.\n\n 1.  (Skip this if you are doing USB passthrough) For raw disk passthrough, attach the disk that is your target for macOS installation, and create a virtual hard disk that references it to use with Fusion.\n     \n     Note: You may need to remove the partitions of the disk before using it.\n     \n     diskutil list\n     # locate the external disk that matches, and replace /dev/disk3 below with the device path.\n     sudo /Applications/VMware\\ Fusion.app/Contents/Library/vmware-rawdiskCreator create /dev/disk3 fullDevice RawHDD ide\n     \n\n 2.  Next, start VMware Fusion. You should see the homepage. If not, close any window that opened and select File > New from the menu bar.\n\n 3.  Select the "Create a custom virtual machine" option, and select macOS 10.15 (as 10.16/11 isn\'t available).\n\n 4.  Select "Use an existing virtual disk" at the screen below.\n\n 5.  Then, click "Choose virtual disk" and select the Install macOS Beta.vmdk vmdk we made earlier. If you want to make sure VMware does not copy the disk to where you will be storing the VM (for example, if you are low on space), select "Share this virtual disk with the virtual machine that created it". Once done, it should look like this.\n\n 6.  Hit Continue, then click "Customize Settings". Make sure to save the VM to somewhere that\'s not the disk you are passing through.\n     \n     Once done, you should arrive at a screen that looks like this.\n\n 7.  First, select "Processors & Memory", and set the memory to at least 4096 MB.\n\n 8.  (If you are doing raw disk passthrough, skip this step) Select "Show All" and click "USB & Bluetooth". Plug in your USB device and under "Plug In Action", change it from "Ask what to do" to "Connect to the VM". It should look similar to this when done. (In this case, "VIA AmazonBasics Hard Drive Enclos" is my device.) Then, close the window.\n\n 9.  (If you are doing USB passthrough, skip steps 9 through 13) Close the window and close VMware Fusion. Locate the "macOS 10.15.vmwarevm" (or whatever you named it when saving) folder in Finder, and right click > "Show Package Contents".\n     \n     The result should look like the image below.\n\n 10. Open the vmx (not vmxf or vmx.lck folder) file in TextEdit. It should look something like this:\n\n 11. Find the lines starting with sata0:1:\n\n 12. Replace all the lines starting with sata0:1 with the following. Replace <path/to/vmdk> with the full path to RawHDD.vmdk, created earlier above.\n     \n     Tip: Find it in Finder, then right click, hold down option, and select \'Copy "RawHDD.vmdk" as Pathname\' to get the full path easily.\n     \n     sata0:1.fileName = "<path/to/vmdk>"\n     sata0:1.present = "TRUE"\n     sata0:1.deviceType = "rawDisk"\n     \n     \n     It should look something like the below when done.\n\n 13. Save and quit TextEdit, and reopen VMware Fusion. Your VM should automatically open, but if not, open it from the Virtual Machine Library.\n\n 14. Select "Virtual Machine" > "Power On To Firmware" from the menu bar, so that we can boot to the VM BIOS.\n     \n     * (For raw disk passthrough) If you get prompted for your password when you do this, enter it. Even though the prompt mentions Boot Camp disks, it is still working normally.\n     \n     * If you get an error that the resource is busy like below, run the following in Terminal and try again:\n     \n     diskutil list\n     # replace /dev/disk3 below with the proper device path. for raw disk passthrough, it was found before\n     sudo diskutil unmountDisk /dev/disk3\n     \n     \n     \n\n 15. You should get to the VM Boot Manager, as shown below. Select the first hard drive ("EFI VMware Virtual SATA Hard Drive (0.0)). The VM should start booting the Big Sur installer.\n\n 16. Complete the installation as you would on any other device. the installation is complete, and you are at the Welcome screen, select "Virtual Machine" > "Shut Down" from the menu bar.\n     \n     If needed, add your prepared EFI to the EFI partition on the device, then eject it.\n     \n     Place the drive back in your hack and boot normally. You now have Big Sur!',normalizedContent:'# vmware fusion\n\n\n# requirements\n\n * vmware fusion\n * java (both the jre and jdk work)\n * a computer running macos\n * the desired macos installation software installed to /applications\n * a usb attached hard disk or ssd, or an internal disk that can be passed through entirely\n\n\n# converting installation media\n\nvmware cannot directly use a raw disk image, so we\'ll create a linked vmdk, which will allow you to use it as a virtual hard drive in vmware fusion.\n\ndownload raw2vmdk from here, and put it in the same directory as the .img file. then, run the following command:\n\n### change "install macos big sur beta" if the name of the .img file differs\njava -jar raw2vmdk.jar "install macos big sur beta.img" "install macos big sur beta.vmdk"\n\n\nthis will create a vmdk that references the .img file (the raw disk image) for vmware to use. if you\'re going to move this vmdk or transfer it to another computer, you must move the img file along with it.\n\n\n# installing macos big sur in vmware fusion\n\nyou have two options here: pass through a raw disk, or pass through an entire usb device. the steps are not that different for both, so they\'ll be combined here.\n\n 1.  (skip this if you are doing usb passthrough) for raw disk passthrough, attach the disk that is your target for macos installation, and create a virtual hard disk that references it to use with fusion.\n     \n     note: you may need to remove the partitions of the disk before using it.\n     \n     diskutil list\n     # locate the external disk that matches, and replace /dev/disk3 below with the device path.\n     sudo /applications/vmware\\ fusion.app/contents/library/vmware-rawdiskcreator create /dev/disk3 fulldevice rawhdd ide\n     \n\n 2.  next, start vmware fusion. you should see the homepage. if not, close any window that opened and select file > new from the menu bar.\n\n 3.  select the "create a custom virtual machine" option, and select macos 10.15 (as 10.16/11 isn\'t available).\n\n 4.  select "use an existing virtual disk" at the screen below.\n\n 5.  then, click "choose virtual disk" and select the install macos beta.vmdk vmdk we made earlier. if you want to make sure vmware does not copy the disk to where you will be storing the vm (for example, if you are low on space), select "share this virtual disk with the virtual machine that created it". once done, it should look like this.\n\n 6.  hit continue, then click "customize settings". make sure to save the vm to somewhere that\'s not the disk you are passing through.\n     \n     once done, you should arrive at a screen that looks like this.\n\n 7.  first, select "processors & memory", and set the memory to at least 4096 mb.\n\n 8.  (if you are doing raw disk passthrough, skip this step) select "show all" and click "usb & bluetooth". plug in your usb device and under "plug in action", change it from "ask what to do" to "connect to the vm". it should look similar to this when done. (in this case, "via amazonbasics hard drive enclos" is my device.) then, close the window.\n\n 9.  (if you are doing usb passthrough, skip steps 9 through 13) close the window and close vmware fusion. locate the "macos 10.15.vmwarevm" (or whatever you named it when saving) folder in finder, and right click > "show package contents".\n     \n     the result should look like the image below.\n\n 10. open the vmx (not vmxf or vmx.lck folder) file in textedit. it should look something like this:\n\n 11. find the lines starting with sata0:1:\n\n 12. replace all the lines starting with sata0:1 with the following. replace <path/to/vmdk> with the full path to rawhdd.vmdk, created earlier above.\n     \n     tip: find it in finder, then right click, hold down option, and select \'copy "rawhdd.vmdk" as pathname\' to get the full path easily.\n     \n     sata0:1.filename = "<path/to/vmdk>"\n     sata0:1.present = "true"\n     sata0:1.devicetype = "rawdisk"\n     \n     \n     it should look something like the below when done.\n\n 13. save and quit textedit, and reopen vmware fusion. your vm should automatically open, but if not, open it from the virtual machine library.\n\n 14. select "virtual machine" > "power on to firmware" from the menu bar, so that we can boot to the vm bios.\n     \n     * (for raw disk passthrough) if you get prompted for your password when you do this, enter it. even though the prompt mentions boot camp disks, it is still working normally.\n     \n     * if you get an error that the resource is busy like below, run the following in terminal and try again:\n     \n     diskutil list\n     # replace /dev/disk3 below with the proper device path. for raw disk passthrough, it was found before\n     sudo diskutil unmountdisk /dev/disk3\n     \n     \n     \n\n 15. you should get to the vm boot manager, as shown below. select the first hard drive ("efi vmware virtual sata hard drive (0.0)). the vm should start booting the big sur installer.\n\n 16. complete the installation as you would on any other device. the installation is complete, and you are at the welcome screen, select "virtual machine" > "shut down" from the menu bar.\n     \n     if needed, add your prepared efi to the efi partition on the device, then eject it.\n     \n     place the drive back in your hack and boot normally. you now have big sur!',charsets:{}},{title:"VirtualBox",frontmatter:{search:!1},regularPath:"/extras/big-sur/virtualbox.html",relativePath:"extras/big-sur/virtualbox.md",key:"v-1ab60666",path:"/extras/big-sur/virtualbox.html",headers:[{level:2,title:"Requirements",slug:"requirements",normalizedTitle:"requirements",charIndex:17},{level:2,title:"Converting Installation Media",slug:"converting-installation-media",normalizedTitle:"converting installation media",charIndex:182},{level:2,title:"Installing macOS in VirtualBox",slug:"installing-macos-in-virtualbox",normalizedTitle:"installing macos in virtualbox",charIndex:550}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Requirements Converting Installation Media Installing macOS in VirtualBox",content:'# VirtualBox\n\n\n# Requirements\n\n * VirtualBox\n * A computer running macOS\n * The desired macOS installation software installed to /Applications\n * A USB attached hard disk or SSD\n\n\n# Converting Installation Media\n\nVirtualBox cannot directly use a raw disk image, so we\'re going to convert it to a VDI.\n\ncd to the location of the disk image and run the following:\n\n### Change "Install macOS Big Sur Beta" if the name of the .img file differs\nVBoxManage convertfromraw "Install macOS Big Sur Beta.img" "Install macOS Big Sur Beta.vdi" --format VDI\n\n\n\n# Installing macOS in VirtualBox\n\nFirst, attach the USB disk that is your target for macOS installation, and create a virtual hard disk that references it to use with VirtualBox. Note: You may need to remove the partitions of the disk before using it. You will also need to edit the destination device.\n\ndiskutil list\n# locate the external disk that matches, and replace /dev/disk3 below with the device path.\nsudo VBoxManage internalcommands createrawvmdk -filename RawHDD.vmdk -rawdisk /dev/disk3\n\n\nNext, start VirtualBox as root and create a new macOS virtual machine.\n\nsudo VirtualBox\n\n\n * Name: Big Sur\n\n * Type: macOS 64bit\n\n * 2-4 CPU cores\n\n * 4-8 GB RAM\n\n * Do not create a virtual disk.\n\nAttach the disks that you\'ve created in previous steps as shown:\n\n\n\nNow, close VirtualBox and add the following properties to the VM to allow it to boot.\n\nsudo VBoxManage modifyvm "Big Sur" --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiSystemProduct" "iMacPro1,1"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiSystemVersion" "1.0"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiBoardProduct" "Mac-7BA5B2D9E42DDD94"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/smc/0/Config/DeviceKey" "ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC" 1\n\n\nStart VirtualBox as root, and start the VM. The installer should begin to boot. Complete the installation as you would on any other device.\n\nsudo VirtualBox\n\n\nWhen the installation is complete, and you are at the Welcome screen, send an ACPI shutdown signal to macOS and select shutdown.\n\nAdd your prepared EFI to the EFI partition on the USB device, and eject it.\n\nPlace the drive back in your hack and boot normally.',normalizedContent:'# virtualbox\n\n\n# requirements\n\n * virtualbox\n * a computer running macos\n * the desired macos installation software installed to /applications\n * a usb attached hard disk or ssd\n\n\n# converting installation media\n\nvirtualbox cannot directly use a raw disk image, so we\'re going to convert it to a vdi.\n\ncd to the location of the disk image and run the following:\n\n### change "install macos big sur beta" if the name of the .img file differs\nvboxmanage convertfromraw "install macos big sur beta.img" "install macos big sur beta.vdi" --format vdi\n\n\n\n# installing macos in virtualbox\n\nfirst, attach the usb disk that is your target for macos installation, and create a virtual hard disk that references it to use with virtualbox. note: you may need to remove the partitions of the disk before using it. you will also need to edit the destination device.\n\ndiskutil list\n# locate the external disk that matches, and replace /dev/disk3 below with the device path.\nsudo vboxmanage internalcommands createrawvmdk -filename rawhdd.vmdk -rawdisk /dev/disk3\n\n\nnext, start virtualbox as root and create a new macos virtual machine.\n\nsudo virtualbox\n\n\n * name: big sur\n\n * type: macos 64bit\n\n * 2-4 cpu cores\n\n * 4-8 gb ram\n\n * do not create a virtual disk.\n\nattach the disks that you\'ve created in previous steps as shown:\n\n\n\nnow, close virtualbox and add the following properties to the vm to allow it to boot.\n\nsudo vboxmanage modifyvm "big sur" --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmisystemproduct" "imacpro1,1"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmisystemversion" "1.0"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmiboardproduct" "mac-7ba5b2d9e42ddd94"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/smc/0/config/devicekey" "ourhardworkbythesewordsguardedpleasedontsteal(c)applecomputerinc"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/smc/0/config/getkeyfromrealsmc" 1\n\n\nstart virtualbox as root, and start the vm. the installer should begin to boot. complete the installation as you would on any other device.\n\nsudo virtualbox\n\n\nwhen the installation is complete, and you are at the welcome screen, send an acpi shutdown signal to macos and select shutdown.\n\nadd your prepared efi to the efi partition on the usb device, and eject it.\n\nplace the drive back in your hack and boot normally.',charsets:{}},{title:"Soon™",frontmatter:{search:!1},regularPath:"/extras/big-sur/workstation.html",relativePath:"extras/big-sur/workstation.md",key:"v-2e394ce3",path:"/extras/big-sur/workstation.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# Soon™",normalizedContent:"# soon™",charsets:{}},{title:"修复KASLR滑动值",frontmatter:{},regularPath:"/extras/kaslr-fix.html",relativePath:"extras/kaslr-fix.md",key:"v-1ae073bb",path:"/extras/kaslr-fix.html",headers:[{level:2,title:"那么什么是KASLR呢",slug:"那么什么是kaslr呢",normalizedTitle:"那么什么是kaslr呢",charIndex:126},{level:2,title:"这些信息是给谁的",slug:"这些信息是给谁的",normalizedTitle:"这些信息是给谁的",charIndex:356},{level:2,title:"那么我怎么解决这个问题呢",slug:"那么我怎么解决这个问题呢",normalizedTitle:"那么我怎么解决这个问题呢",charIndex:856},{level:2,title:"准备BIOS",slug:"准备bios",normalizedTitle:"准备bios",charIndex:1485},{level:2,title:"测试启动",slug:"测试启动",normalizedTitle:"测试启动",charIndex:2330},{level:2,title:"查找 Slide 值",slug:"查找-slide-值",normalizedTitle:"查找 slide 值",charIndex:2417},{level:2,title:"使用 DevirtualiseMmio",slug:"使用-devirtualisemmio",normalizedTitle:"使用 devirtualisemmio",charIndex:5128}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"那么什么是KASLR呢 这些信息是给谁的 那么我怎么解决这个问题呢 准备BIOS 测试启动 查找 Slide 值 使用 DevirtualiseMmio",content:"# 修复KASLR滑动值\n\n本节面向希望理解和修复 \"Couldn't allocate runtime area\" 错误的用户。这在Z390、X99和X299中最常见。\n\n * 注意:OpenCore是必需的，在本指南中不再支持Clover\n\n\n# 那么什么是KASLR呢\n\nKASLR代表内核地址空间布局随机化，它的用途是为了安全。具体来说，这使得攻击者很难弄清楚重要对象在内存中的位置，因为在机器和引导之间总是随机的。更多关于KASLR的深入讲解\n\n当您引入内存映射较小或存在太多设备的设备时，这就成为一个问题。可能有内核运行的空间，但也有内核不能完全容纳的空闲空间。这就是slide=xxx的作用。我们不是让macOS在每次启动时随机选择一个区域进行操作，而是将其限制在我们知道可以工作的地方。\n\n\n# 这些信息是给谁的\n\n正如我前面提到的，这是针对那些没有足够的内核空间或者移动到一个太小的地方的用户。在引导时，你通常会遇到类似的错误:\n\nError allocating 0x1197b pages at 0x0000000017a80000 alloc type 2\nCouldn't allocate runtime area\n\n\n随着一些变化:\n\nOnly 244/256 slide values are usable!\n\n\n甚至在运行macOS时崩溃:\n\npanic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000\n\n\n关于这些错误最好的部分是，它们可以是随机的，这也是为什么循环你的电脑20次也可以解决这个问题，但只是暂时的。\n\n有趣的事实:查找一个区域需要大约31毫秒，手动设置滑动值平均可以减少0.207%的启动时间!!\n\n\n# 那么我怎么解决这个问题呢\n\n真正的解决办法其实很简单。你需要:\n\n * OpenCore 用户:\n   * OpenRuntime\n   * OpenShell(别忘了启用这个 Root -> Misc -> Tools)\n\n我们还需要配置我们的 config.plist -> Booter:\n\n * AvoidRuntimeDefrag: YES\n   * 修复UEFI运行时服务，如日期、时间、NVRAM、电源控制等\n * DevirtualiseMmio: YES\n   * 减少被盗内存占用，扩展slide=N值的选项，并对修复Z390上的内存分配问题非常有帮助。\n * EnableSafeModeSlide: YES\n   * 允许在安全模式下使用slide值\n * ProtectUefiServices: NO\n   * 保护UEFI服务不被固件覆盖，主要适用于VMs、300系列和较新的系统，如Ice Lake和Comet Lake\n * ProvideCustomSlide: YES\n   * 这可以确保内核只选择好的区域，避免那些可能导致引导失败的区域。它仍然是随机的，但在随机化中省略了那些不好的区域\n * RebuildAppleMemoryMap: YES\n   * 生成与macOS兼容的内存映射，可能在一些笔记本电脑的OEM固件上损坏，所以如果您收到早期启动失败禁用此功能，这可以确保我们的内存映射将符合内核期望\n\n\n# 准备BIOS\n\n我们需要重置内存映射的原因是我们希望它更确定，我的意思是每次启动都会有更少的变化，所以我们有更少的边缘情况(内存映射在启动上并不总是一致的)。准备好:\n\n * 更新BIOS(非常重要，因为早期的BIOS已知有内存映射问题，特别是Z390)\n * 清除CMOS\n * 启用需要的BIOS设置:\n   * Above4GDecoding: 这允许设备使用4GB以上的内存区域，这意味着macOS将有更多的空间来容纳，在一些X99, X299上可能会有问题，因此建议使用或不使用测试。\n     * 注意:在BIOS支持可调整大小的BAR支持，启用Above4G将解锁此选项。如果启用，请确保 Booter -> Quirks -> ResizeAppleGpuBars 设置为 0\n   * Boot Options -> Windows8.1/10 mode: 这将确保没有加载旧的遗留垃圾。有趣的事实是，其他操作系统只用于引导旧版本的Windows，而不是其他操作系统。\n * 在BIOS中禁用尽可能多的不需要的设备(这意味着每次引导时map的变化更小，因此引导失败的机会更少)。常见的设置:\n   * CSM: 对于遗留支持，添加了一堆我们不想要的垃圾。这也会破坏shell，让你无法启动它。\n   * Intel SGX: 软件保护扩展，占用大量空间，在macOS中不起任何作用。\n   * Parallel Port: macOS甚至看不到并口。\n   * Serial Port: 我想知道有多少人正在调试内核…\n   * iGPU: 并不理想，但有些系统的映射过于臃肿，iGPU无法容纳。\n   * Thunderbolt: 许多使用黑苹果的人没有使用Thunderbolt，没有Thunderbolt但有这个选项的主板只会浪费更多的空间。\n   * LED lighting: 对不起，伙计，该走了。\n   * Legacy USB: 更多的传统垃圾。\n\n\n# 测试启动\n\n在调整了EFI、config plist和BIOS设置后，是时候试试我们的新设置了。如果你仍然有问题，那么看起来我们需要深入研究并计算我们的slide值\n\n\n# 查找 Slide 值\n\n现在你要做的是在你选择的引导管理器中打开EFI shell并运行memmap。这将给你所有页面的列表和他们的大小。这是有趣的地方。\n\n你将会看到的例子:\n\nTYPE         START              END                # PAGES            ATTRIBUTES\nRT_Data      0000000000000000   0000000000000FFF   0000000000000001   800000000000000F\nAvailable    0000000000001000   0000000000057FFF   0000000000000057   000000000000000F\nReserved     0000000000058000   0000000000058FFF   0000000000000001   000000000000000F\nAvailable    0000000000059000   000000000008FFFF   0000000000000037   000000000000000F\nRT_Code      0000000000090000   0000000000090FFF   0000000000000001   800000000000000F\nAvailable    0000000000091000   000000000009DFFF   000000000000000D   000000000000000F\nReserved     000000000009E000   000000000009FFFF   0000000000000002   000000000000000F\nAvailable    0000000000100000   000000005B635FFF   000000000005B536   000000000000000F\nBS_Data      000000005B636000   000000005B675FFF   0000000000000040   000000000000000F\nAvailable    000000005B676000   000000006AF77FFF   000000000000F902   000000000000000F\nLoaderCode   000000006AF78000   000000006B155FFF   00000000000001DE   000000000000000F\nBS_Data      000000006B156000   000000006B523FFF   00000000000003CE   000000000000000F\nACPI_NVS     000000006B524000   000000006B524FFF   0000000000000001   000000000000000F\nBS_Data      000000006B526000   000000006B625FFF   0000000000000100   000000000000000F\nAvailable    000000006B626000   000000006B634FFF   000000000000000F   000000000000000F\n\n现在你可能想知道我们怎么把它转换成slide值，其实很简单。我们感兴趣的是Start列中最大的可用值。在这个例子中，我们看到000000006B626000是最大的，请注意，这些值是十六进制的，因此如果有多个值彼此接近，你可能需要将它们转换为十进制。转换为计算slide值(macOS内置的计算器有一个编程功能，可以按⌘+3):\n\n000000006B626000 = 0x6B626000\n\n(0x6B626000 - 0x100000)/0x200000 = 0x35A\n\n为了验证这是正确的:\n\n0x100000 + (0x35A * 0x200000) = 0x6B500000\n\n当返回值不是原始值(0x6B500000 vs 0x6B626000)时，只需在最终的slide值上加1。这是由于四舍五入。例如，0x35A转换成十进制后会变成858，然后+1会得到slide=859。\n\n> 但是稍等一下，它比256高!\n\n这是正确的，这是由于内存映射中包含无法使用的Above4GDecoding扇区导致的。因此，你需要一直往下看，直到找到一个足够小的值(对我们来说是0000000000100000)。\n\n为了让公式更清楚一点\n\n(十六进制 - 0x100000)/0x200000 = 十六进制的 Slide 值\n\n0x100000 +( 十六进制的Slide值 * 0x200000) = 原始的十六进制值(如果不是，则给 Slide 值加1)\n\n记住这个公式，要获得足够低的滑动值，可以使用的最高起始值是0x20100000。\n\n现在导航到 config.plist 并添加 slide 值和其他启动参数(对我们来说，当使用0x100000时，它是slide=0)。如果这个值仍然给你错误，那么你可以继续使用第二大的Start值，以此类推。\n\n有时你可能会发现，当你计算slide时，你会收到非常小的值，如slide=-0.379150390625，当这种情况发生时，将其舍入为slide=0。\n\n对于有问题的用户，也可以在r/Hackintosh Discord上的#Sandbox频道输入$slide [insert largest #Pages value]。\n\n> 但是这太难了\n\n别担心，有一个简单的解决办法。在shell中运行memmap后，运行:\n\nshell> fs0: //替换为您的USB\n\nfs0:\\> dir //验证这是正确的目录，如果不是，尝试fs1，以此类推\n\nDirectory of fs0:\\\n01/01/01 3:30p   EFI\n\nfs0:\\> memmap > memmap.txt\n\n\n这将添加一个memmap.txt文件到你的EFI的根目录，然后你可以继续把它放到 r/Hackintosh discord 的 #Sandbox 通道，并键入$slide[插入一个链接到memmap.txt]\n\n\n# 使用 DevirtualiseMmio\n\nDevirtualiseMmio 是一个非常有趣的功能，特别是它克服了许多PCI设备系统(如一些Z390板)和几乎所有HEDT板(如X99和X299板)的巨大障碍。它是如何做到这一点的，它使用 MMIO 区域并删除运行时属性，允许它们作为内核舒适放置的空间，再加上ProvideCustomSlide的特殊之处，这意味着我们可以在保持 slide 的安全特性的同时获得一个可引导的机器。\n\n对于像Threadripper TRX40 19h这样问题严重的系统，我们需要找到不需要正确操作的特定区域。这就是MmioWhitelist发挥作用的地方。请注意，大多数系统都不需要白名单\n\n如果您使用DevirtualiseMmio运行调试版本的OpenCore，您将在日志中看到以下内容:\n\n21:495 00:009 OCABC: MMIO devirt start\n21:499 00:003 OCABC: MMIO devirt 0x60000000 (0x10000 pages, 0x8000000000000001) skip 0\n21:503 00:003 OCABC: MMIO devirt 0xFE000000 (0x11 pages, 0x8000000000000001) skip 0\n21:506 00:003 OCABC: MMIO devirt 0xFEC00000 (0x1 pages, 0x8000000000000001) skip 0\n21:510 00:003 OCABC: MMIO devirt 0xFED00000 (0x1 pages, 0x8000000000000001) skip 0\n21:513 00:003 OCABC: MMIO devirt 0xFEE00000 (0x1 pages, 0x800000000000100D) skip 0\n21:516 00:003 OCABC: MMIO devirt 0xFF000000 (0x1000 pages, 0x800000000000100D) skip 0\n21:520 00:003 OCABC: MMIO devirt end, saved 278608 KB\n\n\n * 注意:关于如何打开日志文件，请参见OpenCore Debugging\n\n所以我们需要浏览6个区域，看看哪些是坏的，最好的主意是屏蔽所有MMIO区域除了一个，并尝试每个区域以获得一个好区域的列表。\n\n现在让我们看看上面的例子并创建我们自己的MmioWhitelist，我们首先需要将地址从十六进制转换为十进制:\n\n * MMIO devirt 0x60000000 -> 1610612736\n * MMIO devirt 0xFE000000 -> 4261412864\n * MMIO devirt 0xFEC00000 -> 4273995776\n * MMIO devirt 0xFED00000 -> 4275044352\n * MMIO devirt 0xFEE00000 -> 4276092928\n * MMIO devirt 0xFF000000 -> 4278190080\n\n完成后应该是这样的:\n\n",normalizedContent:"# 修复kaslr滑动值\n\n本节面向希望理解和修复 \"couldn't allocate runtime area\" 错误的用户。这在z390、x99和x299中最常见。\n\n * 注意:opencore是必需的，在本指南中不再支持clover\n\n\n# 那么什么是kaslr呢\n\nkaslr代表内核地址空间布局随机化，它的用途是为了安全。具体来说，这使得攻击者很难弄清楚重要对象在内存中的位置，因为在机器和引导之间总是随机的。更多关于kaslr的深入讲解\n\n当您引入内存映射较小或存在太多设备的设备时，这就成为一个问题。可能有内核运行的空间，但也有内核不能完全容纳的空闲空间。这就是slide=xxx的作用。我们不是让macos在每次启动时随机选择一个区域进行操作，而是将其限制在我们知道可以工作的地方。\n\n\n# 这些信息是给谁的\n\n正如我前面提到的，这是针对那些没有足够的内核空间或者移动到一个太小的地方的用户。在引导时，你通常会遇到类似的错误:\n\nerror allocating 0x1197b pages at 0x0000000017a80000 alloc type 2\ncouldn't allocate runtime area\n\n\n随着一些变化:\n\nonly 244/256 slide values are usable!\n\n\n甚至在运行macos时崩溃:\n\npanic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000\n\n\n关于这些错误最好的部分是，它们可以是随机的，这也是为什么循环你的电脑20次也可以解决这个问题，但只是暂时的。\n\n有趣的事实:查找一个区域需要大约31毫秒，手动设置滑动值平均可以减少0.207%的启动时间!!\n\n\n# 那么我怎么解决这个问题呢\n\n真正的解决办法其实很简单。你需要:\n\n * opencore 用户:\n   * openruntime\n   * openshell(别忘了启用这个 root -> misc -> tools)\n\n我们还需要配置我们的 config.plist -> booter:\n\n * avoidruntimedefrag: yes\n   * 修复uefi运行时服务，如日期、时间、nvram、电源控制等\n * devirtualisemmio: yes\n   * 减少被盗内存占用，扩展slide=n值的选项，并对修复z390上的内存分配问题非常有帮助。\n * enablesafemodeslide: yes\n   * 允许在安全模式下使用slide值\n * protectuefiservices: no\n   * 保护uefi服务不被固件覆盖，主要适用于vms、300系列和较新的系统，如ice lake和comet lake\n * providecustomslide: yes\n   * 这可以确保内核只选择好的区域，避免那些可能导致引导失败的区域。它仍然是随机的，但在随机化中省略了那些不好的区域\n * rebuildapplememorymap: yes\n   * 生成与macos兼容的内存映射，可能在一些笔记本电脑的oem固件上损坏，所以如果您收到早期启动失败禁用此功能，这可以确保我们的内存映射将符合内核期望\n\n\n# 准备bios\n\n我们需要重置内存映射的原因是我们希望它更确定，我的意思是每次启动都会有更少的变化，所以我们有更少的边缘情况(内存映射在启动上并不总是一致的)。准备好:\n\n * 更新bios(非常重要，因为早期的bios已知有内存映射问题，特别是z390)\n * 清除cmos\n * 启用需要的bios设置:\n   * above4gdecoding: 这允许设备使用4gb以上的内存区域，这意味着macos将有更多的空间来容纳，在一些x99, x299上可能会有问题，因此建议使用或不使用测试。\n     * 注意:在bios支持可调整大小的bar支持，启用above4g将解锁此选项。如果启用，请确保 booter -> quirks -> resizeapplegpubars 设置为 0\n   * boot options -> windows8.1/10 mode: 这将确保没有加载旧的遗留垃圾。有趣的事实是，其他操作系统只用于引导旧版本的windows，而不是其他操作系统。\n * 在bios中禁用尽可能多的不需要的设备(这意味着每次引导时map的变化更小，因此引导失败的机会更少)。常见的设置:\n   * csm: 对于遗留支持，添加了一堆我们不想要的垃圾。这也会破坏shell，让你无法启动它。\n   * intel sgx: 软件保护扩展，占用大量空间，在macos中不起任何作用。\n   * parallel port: macos甚至看不到并口。\n   * serial port: 我想知道有多少人正在调试内核…\n   * igpu: 并不理想，但有些系统的映射过于臃肿，igpu无法容纳。\n   * thunderbolt: 许多使用黑苹果的人没有使用thunderbolt，没有thunderbolt但有这个选项的主板只会浪费更多的空间。\n   * led lighting: 对不起，伙计，该走了。\n   * legacy usb: 更多的传统垃圾。\n\n\n# 测试启动\n\n在调整了efi、config plist和bios设置后，是时候试试我们的新设置了。如果你仍然有问题，那么看起来我们需要深入研究并计算我们的slide值\n\n\n# 查找 slide 值\n\n现在你要做的是在你选择的引导管理器中打开efi shell并运行memmap。这将给你所有页面的列表和他们的大小。这是有趣的地方。\n\n你将会看到的例子:\n\ntype         start              end                # pages            attributes\nrt_data      0000000000000000   0000000000000fff   0000000000000001   800000000000000f\navailable    0000000000001000   0000000000057fff   0000000000000057   000000000000000f\nreserved     0000000000058000   0000000000058fff   0000000000000001   000000000000000f\navailable    0000000000059000   000000000008ffff   0000000000000037   000000000000000f\nrt_code      0000000000090000   0000000000090fff   0000000000000001   800000000000000f\navailable    0000000000091000   000000000009dfff   000000000000000d   000000000000000f\nreserved     000000000009e000   000000000009ffff   0000000000000002   000000000000000f\navailable    0000000000100000   000000005b635fff   000000000005b536   000000000000000f\nbs_data      000000005b636000   000000005b675fff   0000000000000040   000000000000000f\navailable    000000005b676000   000000006af77fff   000000000000f902   000000000000000f\nloadercode   000000006af78000   000000006b155fff   00000000000001de   000000000000000f\nbs_data      000000006b156000   000000006b523fff   00000000000003ce   000000000000000f\nacpi_nvs     000000006b524000   000000006b524fff   0000000000000001   000000000000000f\nbs_data      000000006b526000   000000006b625fff   0000000000000100   000000000000000f\navailable    000000006b626000   000000006b634fff   000000000000000f   000000000000000f\n\n现在你可能想知道我们怎么把它转换成slide值，其实很简单。我们感兴趣的是start列中最大的可用值。在这个例子中，我们看到000000006b626000是最大的，请注意，这些值是十六进制的，因此如果有多个值彼此接近，你可能需要将它们转换为十进制。转换为计算slide值(macos内置的计算器有一个编程功能，可以按⌘+3):\n\n000000006b626000 = 0x6b626000\n\n(0x6b626000 - 0x100000)/0x200000 = 0x35a\n\n为了验证这是正确的:\n\n0x100000 + (0x35a * 0x200000) = 0x6b500000\n\n当返回值不是原始值(0x6b500000 vs 0x6b626000)时，只需在最终的slide值上加1。这是由于四舍五入。例如，0x35a转换成十进制后会变成858，然后+1会得到slide=859。\n\n> 但是稍等一下，它比256高!\n\n这是正确的，这是由于内存映射中包含无法使用的above4gdecoding扇区导致的。因此，你需要一直往下看，直到找到一个足够小的值(对我们来说是0000000000100000)。\n\n为了让公式更清楚一点\n\n(十六进制 - 0x100000)/0x200000 = 十六进制的 slide 值\n\n0x100000 +( 十六进制的slide值 * 0x200000) = 原始的十六进制值(如果不是，则给 slide 值加1)\n\n记住这个公式，要获得足够低的滑动值，可以使用的最高起始值是0x20100000。\n\n现在导航到 config.plist 并添加 slide 值和其他启动参数(对我们来说，当使用0x100000时，它是slide=0)。如果这个值仍然给你错误，那么你可以继续使用第二大的start值，以此类推。\n\n有时你可能会发现，当你计算slide时，你会收到非常小的值，如slide=-0.379150390625，当这种情况发生时，将其舍入为slide=0。\n\n对于有问题的用户，也可以在r/hackintosh discord上的#sandbox频道输入$slide [insert largest #pages value]。\n\n> 但是这太难了\n\n别担心，有一个简单的解决办法。在shell中运行memmap后，运行:\n\nshell> fs0: //替换为您的usb\n\nfs0:\\> dir //验证这是正确的目录，如果不是，尝试fs1，以此类推\n\ndirectory of fs0:\\\n01/01/01 3:30p   efi\n\nfs0:\\> memmap > memmap.txt\n\n\n这将添加一个memmap.txt文件到你的efi的根目录，然后你可以继续把它放到 r/hackintosh discord 的 #sandbox 通道，并键入$slide[插入一个链接到memmap.txt]\n\n\n# 使用 devirtualisemmio\n\ndevirtualisemmio 是一个非常有趣的功能，特别是它克服了许多pci设备系统(如一些z390板)和几乎所有hedt板(如x99和x299板)的巨大障碍。它是如何做到这一点的，它使用 mmio 区域并删除运行时属性，允许它们作为内核舒适放置的空间，再加上providecustomslide的特殊之处，这意味着我们可以在保持 slide 的安全特性的同时获得一个可引导的机器。\n\n对于像threadripper trx40 19h这样问题严重的系统，我们需要找到不需要正确操作的特定区域。这就是mmiowhitelist发挥作用的地方。请注意，大多数系统都不需要白名单\n\n如果您使用devirtualisemmio运行调试版本的opencore，您将在日志中看到以下内容:\n\n21:495 00:009 ocabc: mmio devirt start\n21:499 00:003 ocabc: mmio devirt 0x60000000 (0x10000 pages, 0x8000000000000001) skip 0\n21:503 00:003 ocabc: mmio devirt 0xfe000000 (0x11 pages, 0x8000000000000001) skip 0\n21:506 00:003 ocabc: mmio devirt 0xfec00000 (0x1 pages, 0x8000000000000001) skip 0\n21:510 00:003 ocabc: mmio devirt 0xfed00000 (0x1 pages, 0x8000000000000001) skip 0\n21:513 00:003 ocabc: mmio devirt 0xfee00000 (0x1 pages, 0x800000000000100d) skip 0\n21:516 00:003 ocabc: mmio devirt 0xff000000 (0x1000 pages, 0x800000000000100d) skip 0\n21:520 00:003 ocabc: mmio devirt end, saved 278608 kb\n\n\n * 注意:关于如何打开日志文件，请参见opencore debugging\n\n所以我们需要浏览6个区域，看看哪些是坏的，最好的主意是屏蔽所有mmio区域除了一个，并尝试每个区域以获得一个好区域的列表。\n\n现在让我们看看上面的例子并创建我们自己的mmiowhitelist，我们首先需要将地址从十六进制转换为十进制:\n\n * mmio devirt 0x60000000 -> 1610612736\n * mmio devirt 0xfe000000 -> 4261412864\n * mmio devirt 0xfec00000 -> 4273995776\n * mmio devirt 0xfed00000 -> 4275044352\n * mmio devirt 0xfee00000 -> 4276092928\n * mmio devirt 0xff000000 -> 4278190080\n\n完成后应该是这样的:\n\n",charsets:{cjk:!0}},{title:"Legacy Install",frontmatter:{search:!1},regularPath:"/extras/legacy.html",relativePath:"extras/legacy.md",key:"v-2fe7bc2d",path:"/extras/legacy.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# Legacy Install\n\nGuide has been moved into respective install guides: Installer Guides",normalizedContent:"# legacy install\n\nguide has been moved into respective install guides: installer guides",charsets:{}},{title:"macOS 12: Monterey",frontmatter:{search:!1},regularPath:"/extras/monterey.html",relativePath:"extras/monterey.md",key:"v-31cf8b6d",path:"/extras/monterey.html",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:650},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:695},{level:3,title:"Supported SMBIOS",slug:"supported-smbios",normalizedTitle:"supported smbios",charIndex:714},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:736},{level:3,title:"AMD Patches",slug:"amd-patches",normalizedTitle:"amd patches",charIndex:760},{level:3,title:"Bluetooth",slug:"bluetooth",normalizedTitle:"bluetooth",charIndex:777},{level:3,title:"Ethernet",slug:"ethernet",normalizedTitle:"ethernet",charIndex:792},{level:3,title:"OTA Updates",slug:"ota-updates",normalizedTitle:"ota updates",charIndex:806},{level:3,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:823}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Table of Contents Prerequisites Supported SMBIOS Supported hardware AMD Patches Bluetooth Ethernet OTA Updates Troubleshooting",content:"# macOS 12: Monterey\n\nReminder that Dortania and any tools mentioned in this guide are neither responsible for any corruption, data loss, or other ill effects that may arise from this guide, including ones caused by typos. You, the end user, must understand this is beta software on unsupported machines so do not pester developers for fixes. Dortania will not be accepting issues regarding this mini-guide except for typos and/or errors. This guide expects you to have a basic understanding of hackintoshing. If you are not familiar with it, we highly recommend you to wait until there is an easier and more straight-forward solution available.\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * Supported SMBIOS\n   * Supported hardware\n   * AMD Patches\n   * Bluetooth\n   * Ethernet\n   * OTA Updates\n   * Troubleshooting\n\n\n\n\n# Prerequisites\n\n\n# Supported SMBIOS\n\nSMBIOS dropped in Monterey:\n\n * iMac15,x and older\n * Macmini6,x and older\n * MacBook8,1 and older\n * MacBookAir6,x and older\n * MacBookPro11,3 and older\n   * MacBookPro11,4 and 11,5 are still supported\n\nIf your SMBIOS was supported in Big Sur and is not included above, you're good to go!\n\nSupported SMBIOS\n * iMac16,1 and newer\n * MacPro6,1 and newer\n * iMacPro1,1 and newer\n * Macmini7,1 and newer\n * MacBook9,1 and newer\n * MacBookAir7,1 and newer\n * MacBookPro11,4 and newer\n\nClick here for a full list of supported SMBIOS.\n\nFor those on Haswell or Ivy Bridge, here are some simple conversions:\n\n * Ivy Bridge desktops with dGPU should use MacPro6,1\n * Haswell desktops with dGPU should use iMac17,1\n * Haswell desktops with only an iGPU should use iMac16,2\n * Haswell laptops should use MacBookPro11,4 or MacBookPro11,5\n\n\n# Supported hardware\n\nDropped GPU Hardware:\n\n * Ivy Bridge (HD 4000 and HD 2500)\n * NVIDIA Kepler (GTX 6xx/7xx Cards)\n * You can use OpenCore-Legacy-Patcher to add back support\n   * No support is provided for Hackintoshes using OCLP!\n   * You will lose access to non-full updates (Small 1-3GB updates)\n   * Requires SIP, Apple Secure Boot, and AMFI disabled.\n\nHaswell iGPUs are still supported in Monterey\n\n * Macmini7,1 uses these drivers\n\n\n# AMD Patches\n\nFor those on AMD CPUs, make sure to update your kernel patches for Monterey. Don't forget to update your patches as well with the core count of your CPU. The patches which need to be edited are all named algrey - Force cpuid_cores_per_package, and you only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40\n\n\n# Bluetooth\n\nWARNING\n\nNote that all cards have not been fixed yet, and that bluetooth support is being worked on still.\n\nDo not be surprised if your card does not work, and please be patient!\n\nWith Monterey, Apple has completely rewritten the bluetooth stack. As of writing, many bluetooth devices do not work (legacy Broadcom and Intel). With the rewrite, injector kexts break bluetooth support in Monterey, though firmware uploader kexts are still needed. Make sure that you:\n\n * Disable injector kexts\n   * IntelBluetoothInjector.kext for Intel cards\n   * BrcmBluetoothInjector.kext for Broadcom cards\n   * If you still boot Big Sur or older, you can instead set the MaxKernel field to 20.99.9 for your injector kext in your config.plist.\n * Keep Firmware uploader kexts\n   * IntelBluetoothFirmware.kext for Intel\n   * BrcmPatchRAM2/3.kext + BrcmFirmwareData.kext for Broadcom\n * Add BlueToolFixup\n   * Needed for all non-native Bluetooth devices (Including Intel)\n   * If you still boot Big Sur or older, you can set the MinKernel field to 21.00.0 to prevent BlueToolFixup loading on older OSes.\n\nSee the below issues for more details:\n\n * BlueToolFixup PR\n * Monterey Beta 5+ issues\n\n\n# Ethernet\n\nIntel I211 chipset (typical for some AMD boards i.e. B450) no longer works with SmallTreeIntel82576 kext (network remains in Cable Unplugged status).\n\nAppleIGB confirmed working on I211 @ B450, but NICs on other boards might experience issues (please report if any)\n\nSee the below issues for more details:\n\n * Kext no longer working with MacOS 12.0\n\nThe boot-arg for enabling Intel I225-V ethernet controller has changed since macOS Monterey 12.3. Use e1000=0 instead of dk.e1000=0.\n\n\n# OTA Updates\n\nStarting with Monterey, updates are not delivered to T2 Macs which don't have Secure Boot enabled, and updates do not install properly if your SecureBootModel does not match your machine (ie. non-T2 SMBIOS using j137 or iMacPro1,1 using j160). Hackintoshes which use a T2 SMBIOS MUST have OpenCore 0.7.4+ with SecureBootModel set to Default. If your SMBIOS does not have a T2 chip, then either Default or Disabled is ok. More information is available on the Apple Secure Boot page.\n\nT2 SMBIOS List\n\nSMBIOS                           MINIMUM MACOS VERSION\niMacPro1,1 (December 2017)       10.13.2 (17C2111)\nMacBookPro15,1 (July 2018)       10.13.6 (17G2112)\nMacBookPro15,2 (July 2018)       10.13.6 (17G2112)\nMacmini8,1 (October 2018)        10.14 (18A2063)\nMacBookAir8,1 (October 2018)     10.14.1 (18B2084)\nMacBookPro15,3 (May 2019)        10.14.5 (18F132)\nMacBookPro15,4 (July 2019)       10.14.5 (18F2058)\nMacBookAir8,2 (July 2019)        10.14.5 (18F2058)\nMacBookPro16,1 (November 2019)   10.15.1 (19B2093)\nMacPro7,1 (December 2019)        10.15.1 (19B88)\nMacBookAir9,1 (March 2020)       10.15.3 (19D2064)\nMacBookPro16,2 (May 2020)        10.15.4 (19E2269)\nMacBookPro16,3 (May 2020)        10.15.4 (19E2265)\nMacBookPro16,4 (June 2020)       10.15.5 (19F96)\niMac20,1 (August 2020)           10.15.6 (19G2005)\niMac20,2 (August 2020)           10.15.6 (19G2005)\n\nNote: You do not need the -revsbvmm boot argument from RestrictEvents. Use OpenCore 0.7.4 or later.\n\n\n# Troubleshooting\n\n# No Updates\n\nMake sure that SIP is enabled. Two bits in SIP specifically cause issues:\n\n * CSR_ALLOW_APPLE_INTERNAL (Bit 4 = 0x10)\n   * Prevents updates appearing at all\n * CSR_ALLOW_UNAUTHENTICATED_ROOT (Bit 11 = 0x800)\n   * Prevents incremental OTA updates\n\nIf you want to still have SIP disabled, use either:\n\n * csrutil disable --no-internal in Recovery\n * A SIP value which does not include the two flags above\n\nTo enable SIP:\n\n * Set csr-active-config to <00 00 00 00> in your config.plist\n * Use csrutil clear in Recovery\n   * Can instead add csr-active-config to NVRAM->Delete or reset NVRAM",normalizedContent:"# macos 12: monterey\n\nreminder that dortania and any tools mentioned in this guide are neither responsible for any corruption, data loss, or other ill effects that may arise from this guide, including ones caused by typos. you, the end user, must understand this is beta software on unsupported machines so do not pester developers for fixes. dortania will not be accepting issues regarding this mini-guide except for typos and/or errors. this guide expects you to have a basic understanding of hackintoshing. if you are not familiar with it, we highly recommend you to wait until there is an easier and more straight-forward solution available.\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * supported smbios\n   * supported hardware\n   * amd patches\n   * bluetooth\n   * ethernet\n   * ota updates\n   * troubleshooting\n\n\n\n\n# prerequisites\n\n\n# supported smbios\n\nsmbios dropped in monterey:\n\n * imac15,x and older\n * macmini6,x and older\n * macbook8,1 and older\n * macbookair6,x and older\n * macbookpro11,3 and older\n   * macbookpro11,4 and 11,5 are still supported\n\nif your smbios was supported in big sur and is not included above, you're good to go!\n\nsupported smbios\n * imac16,1 and newer\n * macpro6,1 and newer\n * imacpro1,1 and newer\n * macmini7,1 and newer\n * macbook9,1 and newer\n * macbookair7,1 and newer\n * macbookpro11,4 and newer\n\nclick here for a full list of supported smbios.\n\nfor those on haswell or ivy bridge, here are some simple conversions:\n\n * ivy bridge desktops with dgpu should use macpro6,1\n * haswell desktops with dgpu should use imac17,1\n * haswell desktops with only an igpu should use imac16,2\n * haswell laptops should use macbookpro11,4 or macbookpro11,5\n\n\n# supported hardware\n\ndropped gpu hardware:\n\n * ivy bridge (hd 4000 and hd 2500)\n * nvidia kepler (gtx 6xx/7xx cards)\n * you can use opencore-legacy-patcher to add back support\n   * no support is provided for hackintoshes using oclp!\n   * you will lose access to non-full updates (small 1-3gb updates)\n   * requires sip, apple secure boot, and amfi disabled.\n\nhaswell igpus are still supported in monterey\n\n * macmini7,1 uses these drivers\n\n\n# amd patches\n\nfor those on amd cpus, make sure to update your kernel patches for monterey. don't forget to update your patches as well with the core count of your cpu. the patches which need to be edited are all named algrey - force cpuid_cores_per_package, and you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40\n\n\n# bluetooth\n\nwarning\n\nnote that all cards have not been fixed yet, and that bluetooth support is being worked on still.\n\ndo not be surprised if your card does not work, and please be patient!\n\nwith monterey, apple has completely rewritten the bluetooth stack. as of writing, many bluetooth devices do not work (legacy broadcom and intel). with the rewrite, injector kexts break bluetooth support in monterey, though firmware uploader kexts are still needed. make sure that you:\n\n * disable injector kexts\n   * intelbluetoothinjector.kext for intel cards\n   * brcmbluetoothinjector.kext for broadcom cards\n   * if you still boot big sur or older, you can instead set the maxkernel field to 20.99.9 for your injector kext in your config.plist.\n * keep firmware uploader kexts\n   * intelbluetoothfirmware.kext for intel\n   * brcmpatchram2/3.kext + brcmfirmwaredata.kext for broadcom\n * add bluetoolfixup\n   * needed for all non-native bluetooth devices (including intel)\n   * if you still boot big sur or older, you can set the minkernel field to 21.00.0 to prevent bluetoolfixup loading on older oses.\n\nsee the below issues for more details:\n\n * bluetoolfixup pr\n * monterey beta 5+ issues\n\n\n# ethernet\n\nintel i211 chipset (typical for some amd boards i.e. b450) no longer works with smalltreeintel82576 kext (network remains in cable unplugged status).\n\nappleigb confirmed working on i211 @ b450, but nics on other boards might experience issues (please report if any)\n\nsee the below issues for more details:\n\n * kext no longer working with macos 12.0\n\nthe boot-arg for enabling intel i225-v ethernet controller has changed since macos monterey 12.3. use e1000=0 instead of dk.e1000=0.\n\n\n# ota updates\n\nstarting with monterey, updates are not delivered to t2 macs which don't have secure boot enabled, and updates do not install properly if your securebootmodel does not match your machine (ie. non-t2 smbios using j137 or imacpro1,1 using j160). hackintoshes which use a t2 smbios must have opencore 0.7.4+ with securebootmodel set to default. if your smbios does not have a t2 chip, then either default or disabled is ok. more information is available on the apple secure boot page.\n\nt2 smbios list\n\nsmbios                           minimum macos version\nimacpro1,1 (december 2017)       10.13.2 (17c2111)\nmacbookpro15,1 (july 2018)       10.13.6 (17g2112)\nmacbookpro15,2 (july 2018)       10.13.6 (17g2112)\nmacmini8,1 (october 2018)        10.14 (18a2063)\nmacbookair8,1 (october 2018)     10.14.1 (18b2084)\nmacbookpro15,3 (may 2019)        10.14.5 (18f132)\nmacbookpro15,4 (july 2019)       10.14.5 (18f2058)\nmacbookair8,2 (july 2019)        10.14.5 (18f2058)\nmacbookpro16,1 (november 2019)   10.15.1 (19b2093)\nmacpro7,1 (december 2019)        10.15.1 (19b88)\nmacbookair9,1 (march 2020)       10.15.3 (19d2064)\nmacbookpro16,2 (may 2020)        10.15.4 (19e2269)\nmacbookpro16,3 (may 2020)        10.15.4 (19e2265)\nmacbookpro16,4 (june 2020)       10.15.5 (19f96)\nimac20,1 (august 2020)           10.15.6 (19g2005)\nimac20,2 (august 2020)           10.15.6 (19g2005)\n\nnote: you do not need the -revsbvmm boot argument from restrictevents. use opencore 0.7.4 or later.\n\n\n# troubleshooting\n\n# no updates\n\nmake sure that sip is enabled. two bits in sip specifically cause issues:\n\n * csr_allow_apple_internal (bit 4 = 0x10)\n   * prevents updates appearing at all\n * csr_allow_unauthenticated_root (bit 11 = 0x800)\n   * prevents incremental ota updates\n\nif you want to still have sip disabled, use either:\n\n * csrutil disable --no-internal in recovery\n * a sip value which does not include the two flags above\n\nto enable sip:\n\n * set csr-active-config to <00 00 00 00> in your config.plist\n * use csrutil clear in recovery\n   * can instead add csr-active-config to nvram->delete or reset nvram",charsets:{}},{title:"选择正确的SMBIOS",frontmatter:{},regularPath:"/extras/smbios-support.html",relativePath:"extras/smbios-support.md",key:"v-71e7376d",path:"/extras/smbios-support.html",headers:[{level:2,title:"如何决定",slug:"如何决定",normalizedTitle:"如何决定",charIndex:1132},{level:2,title:"macOS SMBIOS列表",slug:"macos-smbios列表",normalizedTitle:"macos smbios列表",charIndex:1728},{level:3,title:"MacBook",slug:"macbook",normalizedTitle:"macbook",charIndex:1041},{level:3,title:"MacBook Air",slug:"macbook-air",normalizedTitle:"macbook air",charIndex:1837},{level:3,title:"MacBook Pro",slug:"macbook-pro",normalizedTitle:"macbook pro",charIndex:1854},{level:3,title:"Mac Mini",slug:"mac-mini",normalizedTitle:"mac mini",charIndex:371},{level:3,title:"iMac",slug:"imac",normalizedTitle:"imac",charIndex:614},{level:3,title:"iMac Pro",slug:"imac-pro",normalizedTitle:"imac pro",charIndex:663},{level:3,title:"Mac Pro",slug:"mac-pro",normalizedTitle:"mac pro",charIndex:664},{level:3,title:"Xserve",slug:"xserve",normalizedTitle:"xserve",charIndex:1922},{level:3,title:"其他SMBIOS",slug:"其他smbios",normalizedTitle:"其他smbios",charIndex:1934}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"如何决定 macOS SMBIOS列表 MacBook MacBook Air MacBook Pro Mac Mini iMac iMac Pro Mac Pro Xserve 其他SMBIOS",content:'# 选择正确的SMBIOS\n\n在为您的机器选择正确的SMBIOS时，您必须了解这不仅仅是简单的CPU匹配。很多事情会影响你的机器的工作方式，因为你的SMBIOS决定了CPU电源管理、GPU配置文件、USB映射等等。\n\n选择SMBIOS时要考虑的主要事情:\n\n * CPU 类型\n   \n   * 特别是移动端vs桌面端vs服务器端，因为这会极大地影响睡眠和整个系统的稳定性\n   * 这也决定了你是否可以使用苹果的XCPM以及你会得到什么配置文件\n     * 这2个主要通过CPUFriend解决:修复电源管理\n   * 注意:AMD cpu不需要关心这个\n\n * GPU 类型\n   \n   * 这里会影响很多东西，比如GPU电源管理(AGPM)，显示支持(AGDP)，睡眠(AGDC)等等。\n     * 当我们着眼于只使用移动硬件的 Mac Mini SMBIOS时，这一点尤其重要，因为它与桌面硬件并不匹配。这就是我们不鼓励使用它们的原因，除非它们被用于英特尔的NUC系列 等基于移动硬件的产品。\n     * 笔记本电脑也应该密切关注，因为苹果公司总是假设，当SMBIOS存在dGPU时，所有的显示输出都将通过它路由。当Optimus笔记本电脑的外部显示器通过iGPU连接时，这可能会成为一个问题，导致黑屏问题，需要更多的补丁。\n   * 没有iGPU的cpu需要密切关注，因为如果SMBIOS期望iGPU(即每一个iMac SMBIOS)，像快速查看这样的功能将被破坏。\n     * F对于这些情况，请仔细查看iMac Pro和Mac Pro的SMBIOS\n   * DRM也被捆绑在这里，但这主要是在这里解决:修复DRM\n\n * 操作系统支持\n   \n   * 主要与旧的硬件相关，因为macOS可能仍然支持CPU，但不再支持那个时代的SMBIOS\n     * Arrandale cpu是一个很好的例子，因为即使在Big Sur它们仍然支持操作系统(但是在10.13.6之后没有iGPU支持)\n\n * USB 设备\n   \n   * 某些SMBIOS会有自己的USB地图，可能会连接到你的硬件，导致USB问题。\n     * 参见这里了解更多信息:USB映射\n   * 还要注意的是，Skylake+ SMBIOS还需要一个USBX设备 来修复USB电流输出\n     * 参见这里了解更多信息:修复USB电源\n\nXCPM 支持 SMBIOS\n\nSMBIOS\nMacBook8,1+\nMacBookAir6,x+\nMacBookPro11,x+\nMacmini7,1+\niMac14,x+\niMacPro1,1\nMacPro7,1+\n\n\n# 如何决定\n\n通常我们对SMBIOS的建议如下:\n\n 1. 尽可能地找到正确的CPU代数和架构\n 2. 然后只匹配iGPU或dGPU SMBIOS\n 3. 最终决定杂项内容(如精确的GPU和CPU)\n\n还有一些关于SMBIOS的特别注意事项:\n\n * iMacPro1,1和MacPro7,1是唯一允许dGPU处理所有工作负载的2个SMBIOS，包括后台渲染和其他iGPU将处理的任务\n   * 如果你需要，我们只推荐这个SMBIOS，但是你可能需要修复电源管理，因为如果你的硬件不是这个类(如HEDT/Server/AMD)，睡眠可能会中断:修复电源管理\n   * 请注意，这需要Polaris, Vega或Navi GPU才能正常工作。\n * iMac20,2是一个定制的SMBIOS，只适用于苹果定制的i9-10910 CPU，所以除非你有i9-10900K，我们建议使用iMac20,1\n * 应该避免使用Mac Mini SMBIOS，除非你运行的是没有内置显示器的移动硬件\n   * Intel NUCs是这种SMBIOS的理想硬件\n * 不支持iGPU的cpu在选择SMBIOS时必须非常注意，因为苹果公司总是假设iMac SMBIOS上存在iGPU，所以你需要找一个没有这个要求的SMBIOS，比如iMac Pro或Mac Pro。\n   * 这也适用于AMD cpu\n\n\n# macOS SMBIOS列表\n\n这是苹果在macOS中支持的所有SMBIOS的完整列表，包括CPU和GPU类型等额外信息。\n\n\n\n * 如何决定\n * macOS SMBIOS列表\n   * MacBook\n   * MacBook Air\n   * MacBook Pro\n   * Mac Mini\n   * iMac\n   * iMac Pro\n   * Mac Pro\n   * Xserve\n   * 其他SMBIOS\n\n\n\n信息来源：EveryMac和OpenCorePkg\n\n特别注意:\n\n * 每个CPU家族旁边的字母是CPU的级别，详见下表:\n\n字母             类型\nY              移动(低端)\nU, M           移动(中端)\nH, QM, HQ      移动(高端)\nS              桌面\nEP, SP, W, X   HEDT/服务器\n\n\n# MacBook\n\nSMBIOS        CPU家族          GPU             BOARD-ID               最初支持                最后支持版本\nMacBook1,1    Yonah(M)       GMA 950         Mac-F4208CC8           10.4.6 (8I2025)     10.6.8\nMacBook2,1    Merom(M)       GMA 950         Mac-F4208CA9           10.4.8 (8N1108)     10.7.5\nMacBook3,1    Merom(M)       GMA X3100       Mac-F22788C8           10.5 (9A3111)\nMacBook4,1    Penryn(M)      GMA X3100       Mac-F22788A9           10.5.2 (9C2015)\nMacBook5,1    Penryn(M)      GeForce 9400M   Mac-F42D89C8           10.5.5 (9F2114)     10.11.6\nMacBook5,2    Penryn(M)      GeForce 9400M   Mac-F22788AA           10.5.6 (9G2110)\nMacBook6,1    Penryn(M)      GeForce 9400M   Mac-F22C8AC8           10.6.1 (10A2047)    10.13.6\nMacBook7,1    Penryn(M)      GeForce 320M    Mac-F22C89C8           10.6.3 (10D2162)\nMacBook8,1    Broadwell(Y)   HD 5300         Mac-BE0E8AC46FE800CC   10.10.2 (14C2061)   11.7.x\nMacBook9,1    Skylake(Y)     HD 515          Mac-9AE82516C7C6B903   10.11.4 (15E2066)   12.6.x\nMacBook10,1   Kaby Lake(Y)   HD 615          Mac-EE2EBD4B90B839A8   10.12.5 (16F207)    Current\n\n\n# MacBook Air\n\nSMBIOS          CPU家族             GPU                     BOARD-ID               最初支持                最后支持版本\nMacBookAir1,1   Merom(M)          GMA X3100 (11")         Mac-F42C8CC8           10.5.1 (9B2324)     10.7.5\nMacBookAir2,1   Penryn(M)         GeForce 9400M (13")     Mac-F42D88C8           10.5.5              10.11.6\nMacBookAir3,1   Penryn(M)         GeForce 320M (11")      Mac-942452F5819B1C1B   10.6.4 (10F3061)    10.13.6\nMacBookAir3,2   Penryn(M)         GeForce 320M (13")      Mac-942C5DF58193131B   10.6.4 (10F3061)\nMacBookAir4,1   Sandy Bridge(M)   HD 3000 (11")           Mac-C08A6BB70A942AC2   10.7 (11A2063)\nMacBookAir4,2   Sandy Bridge(M)   HD 3000 (13")           Mac-742912EFDBEE19B3   10.7 (11A2063)\nMacBookAir5,1   Ivy Bridge(U)     HD 4000 (11")           Mac-66F35F19FE2A0D05   10.7.4 (11E2520)    10.15.7\nMacBookAir5,2   Ivy Bridge(U)     HD 4000 (13")           Mac-2E6FAB96566FE58C   10.8.2 (12C2034)\nMacBookAir6,1   Haswell(U)        HD 5000 (11")           Mac-35C1E88140C3E6CF   10.8.4 (12E3067)    11.7.x\nMacBookAir6,2   Haswell(U)        HD 5000 (13")           Mac-7DF21CB3ED6977E5   10.8.4 (12E3067)\nMacBookAir7,1   Broadwell(U)      HD 6000 (11")           Mac-9F18E312C5C2BF0B   10.10.2 (14C2507)   12.6.x\nMacBookAir7,2   Broadwell(U)      HD 6000 (13")           Mac-937CB26E2E02BB01   10.10.2 (14C2507)\nMacBookAir8,1   Amber Lake(Y)     UHD 617 (13")           Mac-827FAC58A8FDFA22   10.14.1 (18B2084)   Current\nMacBookAir8,2   Amber Lake(Y)     UHD 617 (13")           Mac-226CB3C6A851A671   10.14.5 (18F2058)\nMacBookAir9,1   Ice Lake(Y)       Iris Plus G4/G7 (13")   Mac-0CFF9C7C2B63DF8D   10.15.4 (19E287)\n\n\n# MacBook Pro\n\nSMBIOS           CPU家族              GPU                                   BOARD-ID               最初支持                最后支持版本\nMacBookPro1,1    Yonah(M)           Radeon X1600 (15")                    Mac-F425BEC8           10.4.5 (8G1453)     10.6.8\nMacBookPro1,2    Yonah(M)           Radeon X1600 (17")                    Mac-F42DBEC8           10.4.6 (8I2032)\nMacBookPro2,1    Merom(M)           Radeon X1600 (15")                    Mac-F42189C8           10.4.8 (8N1051)     10.7.5\nMacBookPro2,2    Merom(M)           Radeon X1600 (17")                    Mac-F42187C8           10.4.8 (8N1037)\nMacBookPro3,1    Merom(M)           GeForce 8600M GT (15/17")             Mac-F4238BC8           10.4.9 (8Q1058)     10.11.6\nMacBookPro4,1    Penryn(M)          GeForce 8600MG GT (17")               Mac-F42C89C8           10.5.2 (9C2018)\nMacBookPro5,1    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F42D86C8           10.5.5 (9F2114)\nMacBookPro5,2    Penryn(M)          GeForce 9400M/9600M GT (17")          Mac-F2268EC8           10.5.6 (9G2141)\nMacBookPro5,3    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F22587C8           10.5.7 (9J3050)\nMacBookPro5,4    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F22587A1           10.5.7 (9J3050)\nMacBookPro5,5    Penryn(M)          GeForce 9400M/9600M GT (13")          Mac-F2268AC8           10.5.7 (9J3050)\nMacBookPro6,1    Arrandale(M)       HD Graphics/GeForce GT 330M (17")     Mac-F22589C8           10.6.3 (10D2063a)   10.13.6\nMacBookPro6,2    Arrandale(M)       HD Graphics/GeForce GT 330M (15")     Mac-F22586C8           10.6.3 (10D2094)    10.13.6\nMacBookPro7,1    Penryn(M)          GeForce 320M (13")                    Mac-F222BEC8           10.6.3 (10D2125)\nMacBookPro8,1    Sandy Bridge(M)    HD 3000 (13")                         Mac-94245B3640C91C81   10.6.6 (10J3210)\nMacBookPro8,2    Sandy Bridge(QM)   HD 3000/Radeon HD 6490M (15")         Mac-94245A3940C91C80   10.6.6 (10J3210)\nMacBookPro8,3    Sandy Bridge(QM)   HD 3000/Radeon HD 6750M (17")         Mac-942459F5819B171B   10.6.6 (10J3210)\nMacBookPro9,1    Ivy Bridge(QM)     HD 4000/GeForce GT 650M (15")         Mac-4B7AC7E43945597E   10.7.3 (11D2097)    10.15.7\nMacBookPro9,2    Ivy Bridge(M)      HD 4000 (13")                         Mac-6F01561E16C75D06   10.7.3 (11D2515)\nMacBookPro10,1   Ivy Bridge(QM)     HD 4000/GeForce GT 650M (15")         Mac-C3EC7CD22292981F   10.7.4 (11E2068)\nMacBookPro10,2   Ivy Bridge(M)      HD 4000 (13")                         Mac-AFD8A9D944EA4843   10.8.2 (12C2034)\nMacBookPro11,1   Haswell(U)         Iris 5100 (13")                       Mac-189A3D4F975D5FFC   10.9 (13A2093)      11.7.x\nMacBookPro11,2   Haswell(HQ)        Iris Pro 5200 (15")                   Mac-3CBD00234E554E41   10.9 (13A3017)\nMacBookPro11,3   Haswell(HQ)        Iris Pro 5200/GeForce GT 750M (15")   Mac-2BD1B31983FE1663   10.9 (13A3017)\nMacBookPro11,4   Haswell(HQ)        Iris Pro 5200 (15")                   Mac-06F11FD93F0323C5   10.10.3 (14D2134)   12.6.x\nMacBookPro11,5   Haswell(HQ)        Iris Pro 5200/Radeon R9 M370X (15")   Mac-06F11F11946D27C5   10.10.3 (14D2134)\nMacBookPro12,1   Broadwell(U)       Iris 6100 (13")                       Mac-E43C1C25D4880AD6   10.10.2 (14C2507)\nMacBookPro13,1   Skylake(U)         Iris 540 (13")                        Mac-473D31EABEB93F9B   10.12 (16A2323a)\nMacBookPro13,2   Skylake(U)         Iris 550 (13")                        Mac-66E35819EE2D0D05   10.12.1 (16B2657)\nMacBookPro13,3   Skylake(H)         HD 530/Radeon Pro 450 (15")           Mac-A5C67F76ED83108C   10.12.1 (16B2659)\nMacBookPro14,1   Kaby Lake(U)       Iris Plus 640 (13")                   Mac-B4831CEBD52A0C4C   10.12.5 (16F2073)   Current\nMacBookPro14,2   Kaby Lake(U)       Iris Plus 650 (13")                   Mac-CAD6701F7CEA0921   10.12.5 (16F2073)\nMacBookPro14,3   Kaby Lake(H)       HD 630/Radeon Pro 555 (15")           Mac-551B86E5744E2388   10.12.5 (16F2073)\nMacBookPro15,1   Coffee Lake(H)     UHD 630/Radeon Pro 555X (15")         Mac-937A206F2EE63C01   10.13.6 (17G2112)\nMacBookPro15,2   Coffee Lake(U)     Iris Plus 655 (13")                   Mac-827FB448E656EC26   10.13.6 (17G2112)\nMacBookPro15,3   Coffee Lake(H)     UHD 630/Radeon Pro Vega 16 (15")      Mac-1E7E29AD0135F9BC   10.14.1 (18B3094)\nMacBookPro15,4   Coffee Lake(U)     Iris Plus 645 (13")                   Mac-53FDB3D8DB8CA971   10.14.5 (18F2058)\nMacBookPro16,1   Coffee Lake(H)     UHD 630/Radeon Pro 5300 (16")         Mac-E1008331FDC96864   10.15.1 (19B2093)\nMacBookPro16,2   Ice Lake(U)        Iris Plus G4/G7 (13")                 Mac-5F9802EFE386AA28   10.15.4 (19E2269)\nMacBookPro16,3   Coffee Lake(U)     Iris Plus 645 (13")                   Mac-E7203C0F68AA0004   10.15.4 (19E2269)\nMacBookPro16,4   Coffee Lake(H)     UHD 630/Radeon Pro 5600M (16")        Mac-A61BADE1FDAD7B05   10.15.1 (19B2093)\n\n\n# Mac Mini\n\nSMBIOS       CPU家族              GPU                    BOARD-ID               最初支持               最后支持版本\nMacmini1,1   Yonah(M)           GMA 950                Mac-F4208EC8           10.4.5 (8H1619)    10.6.8\nMacmini2,1   Merom(M)           GMA 950                Mac-F4208EAA           10.4.10 (8R3014)   10.7.5\nMacmini3,1   Penryn(M)          GeForce 9400M          Mac-F22C86C8           10.5.6 (9G2030)    10.11.6\nMacmini4,1   Penryn(M)          GeForce 320M           Mac-F2208EC8           10.6.4 (10F2025)   10.13.6\nMacmini5,1   Sandy Bridge(M)    HD 3000                Mac-8ED6AF5B48C039E1   10.7 (11A2061)\nMacmini5,2   Sandy Bridge(M)    Radeon HD 6630M        Mac-4BC72D62AD45599E   10.7 (11A2061)\nMacmini5,3   Sandy Bridge(QM)   HD 3000                Mac-7BA5B2794B2CDB12   10.7 (11A2061)\nMacmini6,1   Ivy Bridge(M)      HD 4000                Mac-031AEE4D24BFF0B1   10.8.1 (12B2080)   10.15.7\nMacmini6,2   Ivy Bridge(QM)     HD 4000                Mac-F65AE981FFA204ED   10.8.1 (12B2080)\nMacmini7,1   Haswell(U)         HD 5000 or Iris 5100   Mac-35C5E08120C7EEAF   10.10 (14A389)     12.6.x\nMacmini8,1   Coffee Lake(H)     UHD 630                Mac-7BA5B2DFE22DDD8C   10.14 (18A2063)    Current\n\n\n# iMac\n\nSMBIOS     CPU家族             GPU                        BOARD-ID                                      最初支持                最后支持版本\niMac4,1    Yonah(M)          Radeon X1600               Mac-F42786C8                                  10.4.4 (8G1165)     10.6.8\niMac4,2    Yonah(M)          GMA 950                    Mac-F4218EC8                                  10.4.7 (8I2057)\niMac5,1    Merom(M)          Radeon X1600               Mac-F4228EC8                                  10.4.7 (8K1106)     10.7.5\niMac5,2    Merom(M)          GMA 950                    Mac-F4218EC8                                  10.4.7 (8K1106)\niMac6,1    Merom(M)          GeForce 7300GT             Mac-F4218FC8                                  10.4.7 (8K1123)\niMac7,1    Merom(M)          Radeon HD 2400 XT          Mac-F42386C8                                  10.4.10 (8R4031)    10.11.6\niMac8,1    Penryn(M)         Radeon HD 2400 XT          Mac-F227BEC8                                  10.5.2 (9C2028)\niMac9,1    Penryn(M)         GeForce 9400M              Mac-F2218FA9                                  10.5.6 (9G2030)\niMac10,1   Wolfdale(S)       GeForce 9400M              Mac-F221DCC8                                  10.6.1 (10A2155)    10.13.6\niMac10,1   Wolfdale(S)       Radeon HD 4670             Mac-F2268CC8                                  10.6.1 (10A2155)\niMac11,1   Lynnfield(S)      Radeon HD 4850             Mac-F2268DAE                                  10.6.2 (10C2234)\niMac11,2   Clarkdale(S)      Radeon HD 4670             Mac-F2238AC8                                  10.6.3 (10D2322a)\niMac11,3   Clarkdale(S)      Radeon HD 5670             Mac-F2238BAE                                  10.6.3 (10D2322a)\niMac12,1   Sandy Bridge(S)   Radeon HD 6750M            Mac-942B5BF58194151B                          10.6.6 (10J4026)\niMac12,2   Sandy Bridge(S)   Radeon HD 6770M            Mac-942B59F58194171B                          10.6.6 (10J4026)\niMac13,1   Ivy Bridge(S)     GeForce GT 640M            Mac-00BE6ED71E35EB86                          10.8.2 (12C3104)    10.15.7\niMac13,1   Ivy Bridge(S)     HD 4000                    Mac-00BE6ED71E35EB86                          10.8.2 (12C3104)\niMac13,2   Ivy Bridge(S)     GeForce GTX 660M           Mac-FC02E91DDD3FA6A4                          10.8.2 (12C2037)\niMac13,3   Ivy Bridge(S)     HD 4000                    Mac-7DF2A3B5E5D671ED                          10.8.2 (12C2037)\niMac14,1   Haswell(S)        Iris Pro 5200              Mac-031B6874CF7F642A                          10.8.4 (12E4022)\niMac14,2   Haswell(S)        GeForce GT 750M            Mac-27ADBB7B4CEE8E61                          10.8.4 (12E4022)\niMac14,3   Haswell(S)        GeForce GT 755M            Mac-77EB7D7DAF985301                          10.8.4 (12E4022)\niMac14,4   Haswell(U)        HD 5000                    Mac-81E3E92DD6088272                          10.9.3 (13D2061)    11.7.x\niMac15,1   Haswell(S)        Radeon R9 M290X            Mac-42FD25EABCABB274                          10.10 (14A389)\niMac16,1   Broadwell(U)      HD 6000 or Iris Pro 6200   Mac-A369DDC4E67F1C45                          10.11 (15A2301)     12.6.x\niMac16,2   Broadwell(S)      Iris Pro 6200              Mac-FFE5EF870D7BA81A                          10.11 (15A2301)\niMac17,1   Skylake(S)        Radeon R9 M380             Mac-DB15BD556843C820, Mac-65CE76090165799A,   10.11 (15A4310)\n                                                        Mac-B809C3757DA9BB8D\niMac18,1   Kaby Lake(U)      Iris Plus 640              Mac-4B682C642B45593E                          10.12.4 (16E2193)   Current\niMac18,2   Kaby Lake(S)      Radeon Pro 555             Mac-77F17D7DA9285301                          10.12.4 (16F2073)\niMac18,3                     Radeon Pro 570             Mac-BE088AF8C5EB4FA2                          10.12.4 (16F2073)\niMac19,1   Coffee Lake(S)    Radeon Pro 570X            Mac-AA95B1DDAB278B95                          10.14.4 (18E226)\niMac19,2                     Radeon Pro 555X            Mac-63001698E7A34814                          10.14.4 (18E226)\niMac20,1   Comet Lake(S)     Radeon Pro 5300            Mac-CFF7D910A743CAAF                          10.15.6 (19G2005)\niMac20,2                                                Mac-AF89B6D9451A490B                          10.15.6 (19G2005)\n\n\n# iMac Pro\n\nSMBIOS       CPU家族       GPU       BOARD-ID               最初支持                最后支持版本\niMacPro1,1   Skylake-W   Vega 56   Mac-7BA5B2D9E42DDD94   10.13.2 (17C2111)   Current\n\n\n# Mac Pro\n\nSMBIOS      CPU家族            GPU                 BOARD-ID               最初支持               最后支持版本\nMacPro1,1   Woodcrest        GeForce 7300 GT     Mac-F4208DC8           10.4.7 (8K1079)    10.7.5\nMacPro2,1   Clovertown                           Mac-F4208DA9           10.4.9 (8P4037)\nMacPro3,1   Harpertown       Radeon HD 2600 XT   Mac-F42C88C8           10.5.1 (9B2117)    10.11.6\nMacPro4,1   Nehalem          GeForce GT 120      Mac-F221BEC8           10.5.6 (9G3553)\nMacPro5,1   Nehalem          Radeon HD 5770      Mac-F221BEC8           10.6.4 (10F2521)   10.14.6\nMacPro5,1   Westmere EP                          Mac-F221BEC8           10.6.4 (10F2521)\nMacPro6,1   Ivy Bridge EP    FirePro D300        Mac-F60DEB81FF30ACF6   10.9.1 (13B4116)   12.6.x\nMacPro7,1   Cascade Lake-W   Radeon Pro 580X     Mac-27AD2F918AE68F61   10.15.0 (19A583)   Current\n\n\n# Xserve\n\nSMBIOS      CPU家族        GPU              BOARD-ID       最初支持                     最后支持版本\nXserve1,1   Woodcrest    Radeon X1300     Mac-F4208AC8   Server 10.4.8 (8N1215)   Server 10.7.5\nXserve2,1   Harpertown                    Mac-F42289C8   Server 10.5 (9B2117)\nXserve3,1   Nehalem EP   GeForce GT 120   Mac-F223BEC8   Server 10.5.6            10.11.6\n\n\n# 其他SMBIOS\n\nOpenCore不支持下面列出的所有型号，但为了方便参考，这里列出了文档。\n\n * 苹果开发平台\n   * Developer Transition Kit\n * 苹果芯片\n   * Mac Mini\n   * MacBook Air\n   * MacBook Pro\n   * iMac\n * PowerPC\n   * PowerBook\n   * iBook\n   * PowerMac\n   * iMac\n   * eMac\n   * Cube\n   * Mac Mini\n   * Xserve\n\n苹果芯片笔记本\n\n关于苹果cpu的额外信息:\n\n * 它们不依赖ACPI或UEFI\n * 他们的固件中不包含DeviceProperties\n * 他们使用iPad8,6 iOS/iPadOS应用程序\n * board-id仅适用于Intel mac, PowerPC和ARM没有这个条目\n\n# Developer Transition Kit\n\nSMBIOS   年代         CPU家族            产品标识   初始支持\nADP2,1   Mid 2005   Intel Prescott   N/A    10.4.1 (8B1025)\nADP3,2   Mid 2020   Apple A12Z       J273   11.0.0 (20A5299w)\n\n# Mac Mini - Apple Silicon\n\nSMBIOS       年代          CPU家族      产品标识   初始支持\nMacmini9,1   Late 2020   Apple M1   J274   11.0.0 (20A2411)\n\n# MacBook Air - Apple Silicon\n\nSMBIOS           年代          CPU家族      产品标识   初始支持\nMacBookAir10,1   Late 2020   Apple M1   J313   11.0.0 (20A2411)\n\n# MacBook Pro - Apple Silicon\n\nSMBIOS           年代          CPU家族      产品标识   初始支持\nMacBookPro17,1   Late 2020   Apple M1   J293   11.0.0 (20A2411)\n\n# iMac - Apple Silicon\n\nSMBIOS     年代         CPU家族      产品标识   初始支持\niMac21,1   Mid 2021   Apple M1   J256   11.3 (20E232?)\niMac21,2   Mid 2021   Apple M1   J257   11.3 (20E232?)\n\nPower PC SMBIOS Table\n\n\n# PowerBook - PowerPC\n\nSMBIOS         年代           CPU家族                初始支持     最后支持版本\nPowerBook1,1   Mid-1999     PowerPC 750 (G3)     8.6      10.3.9\nPowerBook3,1   Early 2000                        9.0.2    10.4.11\nPowerBook3,2   Early 2001   PowerPC 7410 (G4)    9.1\nPowerBook3,3   Late 2001    PowerPC 7440 (G4)    9.2.1\nPowerBook3,4   Mid-2002     PowerPC 7451 (G4)    9.2.2\nPowerBook3,5   Late 2002    PowerPC 7455 (G4)             10.5.8\nPowerBook5,1   Early 2003                        10.2.4\nPowerBook5,2   Late 2003    PowerPC 7447 (G4)    10.2.7\nPowerBook5,3\nPowerBook5,4   Mid-2004     PowerPC 7447a (G4)   10.3.3\nPowerBook5,5\nPowerBook5,6   Early 2005   10.3.7\nPowerBook5,7\nPowerBook5,8   Late 2005                         10.4.2\nPowerBook5,9\nPowerBook6,1   Early 2003   PowerPC 7455 (G4)    10.2.3\nPowerBook6,2\nPowerBook6,4   Mid-2004     PowerPC 7447a (G4)   10.2.7\nPowerBook6,8   Early 2005                        10.3.7\n\n# iBook - PowerPC\n\nSMBIOS         年代           CPU家族                初始支持            最后支持版本\nPowerBook2,1   Mid-1999     PowerPC 750 (G3)     8.6             10.3.9\nPowerBook2,2   Late 20000   PowerPC 750cx (G3)   9.0.4           10.4.11\nPowerBook4,1   Late 2002    PowerPC 7455 (G4)    9.2.2           10.5.8\nPowerBook4,2   Early 2002   PowerPC 750cx (G3)   9.2.1           10.4.11\nPowerBook4,3   Mid-2002     PowerPC 750fx (G3)   9.2.2\nPowerBook6,3   Late 2003    PowerPC 7457 (G4)    10.3 (7B85)\nPowerBook6,5   Mid-2004     PowerPC 7447a (G4)   10.3.3 (7G51)   10.5.8\nPowerBook6,7   Mid-2005                          10.4.2 (8D37)\n\n# PowerMac - PowerPC\n\nSMBIOS         年代           CPU家族                初始支持            最后支持版本\nPowerMac1,1    Early 1999   PowerPC 750 (G3)     8.5.1           10.4.11\nPowerMac1,2    Mid 1999     PowerPC 7400 (G4)    8.6\nPowerMac3,1\nPowerMac3,2    Mid-2001     PowerPC 7450 (G4)    9.2\nPowerMac3,3    Mid-2000     PowerPC 7400 (G4)    9.0.4\nPowerMac3,4    Early 2001   PowerPC 7410 (G4)    9.1\nPowerMac3,5    Mid-2001     PowerPC 7450 (G4)    9.2             10.5.8\nPowerMac3,6    Mid-2002     PowerPC 7455 (G4)    9.2.2\nPowerMac7,2    Mid-2003     PowerPC 970 (G5)     10.2.7\nPowerMac7,3    Early-2005   PowerPC 970fx (G5)   10.4\nPowerMac9,1    Late 2004                         10.3.5 (8E90)\nPowerMac11,2   Late 2005    PowerPC 970MP (G5)   10.4.2\n\n# iMac - PowerPC\n\nSMBIOS         年代           CPU家族                初始支持             最后支持版本\niMac,1         Mid 1998     PowerPC 750 (G3)     8.1              10.3.9\nPowerMac2,1    Late 1999                         8.6              10.4.11\nPowerMac2,2    Mid 2000                          9.0.4            10.3.9\nPowerMac4,1    Early 2001   PowerPC 750cx (G3)   9.1              10.4.11\nPowerMac4,2    Early 2002   PowerPC 7441 (G4)    9.2.2\nPowerMac4,5    Mid-2002     PowerPC 7445 (G4)    9.2.2\nPowerMac6,1    Early 2003                        10.2.3           10.5.8\nPowerMac6,3    Late 2003                         10.3.1\nPowerMac8,1    Mid-2004     PowerPC 970 (G5)     10.3.5 (7P35)\nPowerMac8,2    Mid-2005                          10.4 (8A428)\nPowerMac12,1   Late 2005    PowerPC 970fx (G5)   10.4.2 (8E102)\n\n# eMac - PowerPC\n\nSMBIOS        年代           CPU家族                初始支持     最后支持版本\nPowerMac4,4   Mid-2003     PowerPC 7445 (G4     9.2.2    10.5.8\nPowerMac6,4   Early 2004   PowerPC 7447a (G4)   10.3.3\n\n# Cube - PowerPC\n\nSMBIOS        年代         CPU家族               初始支持    最后支持版本\nPowerMac5,1   Mid-2000   PowerPC 7400 (G4)   9.0.4   10.4.11\nPowerMac5,2\n\n# Mac Mini - PowerPC\n\nSMBIOS         年代           CPU家族                初始支持            最后支持版本\nPowerMac10,1   Early 2005   PowerPC 7447a (G4)   10.3.7 (7T11)   10.5.8\nPowerMac10,2   Late 2005                         10.4.2 (8D40)\n\n# Xserve - PowerPC\n\nSMBIOS       年代           CPU家族                初始支持             最后支持版本\nRackMac1,1   Mid-2002     PowerPC 7455 (G4)    10.1.5 (6C115)   Server 10.5.8\nRackMac1,2   Early 2003                        10.2.4 (6I34)\nRackMac3,1   Early 2004   PowerPC 970fx (G5)   10.3.0',normalizedContent:'# 选择正确的smbios\n\n在为您的机器选择正确的smbios时，您必须了解这不仅仅是简单的cpu匹配。很多事情会影响你的机器的工作方式，因为你的smbios决定了cpu电源管理、gpu配置文件、usb映射等等。\n\n选择smbios时要考虑的主要事情:\n\n * cpu 类型\n   \n   * 特别是移动端vs桌面端vs服务器端，因为这会极大地影响睡眠和整个系统的稳定性\n   * 这也决定了你是否可以使用苹果的xcpm以及你会得到什么配置文件\n     * 这2个主要通过cpufriend解决:修复电源管理\n   * 注意:amd cpu不需要关心这个\n\n * gpu 类型\n   \n   * 这里会影响很多东西，比如gpu电源管理(agpm)，显示支持(agdp)，睡眠(agdc)等等。\n     * 当我们着眼于只使用移动硬件的 mac mini smbios时，这一点尤其重要，因为它与桌面硬件并不匹配。这就是我们不鼓励使用它们的原因，除非它们被用于英特尔的nuc系列 等基于移动硬件的产品。\n     * 笔记本电脑也应该密切关注，因为苹果公司总是假设，当smbios存在dgpu时，所有的显示输出都将通过它路由。当optimus笔记本电脑的外部显示器通过igpu连接时，这可能会成为一个问题，导致黑屏问题，需要更多的补丁。\n   * 没有igpu的cpu需要密切关注，因为如果smbios期望igpu(即每一个imac smbios)，像快速查看这样的功能将被破坏。\n     * f对于这些情况，请仔细查看imac pro和mac pro的smbios\n   * drm也被捆绑在这里，但这主要是在这里解决:修复drm\n\n * 操作系统支持\n   \n   * 主要与旧的硬件相关，因为macos可能仍然支持cpu，但不再支持那个时代的smbios\n     * arrandale cpu是一个很好的例子，因为即使在big sur它们仍然支持操作系统(但是在10.13.6之后没有igpu支持)\n\n * usb 设备\n   \n   * 某些smbios会有自己的usb地图，可能会连接到你的硬件，导致usb问题。\n     * 参见这里了解更多信息:usb映射\n   * 还要注意的是，skylake+ smbios还需要一个usbx设备 来修复usb电流输出\n     * 参见这里了解更多信息:修复usb电源\n\nxcpm 支持 smbios\n\nsmbios\nmacbook8,1+\nmacbookair6,x+\nmacbookpro11,x+\nmacmini7,1+\nimac14,x+\nimacpro1,1\nmacpro7,1+\n\n\n# 如何决定\n\n通常我们对smbios的建议如下:\n\n 1. 尽可能地找到正确的cpu代数和架构\n 2. 然后只匹配igpu或dgpu smbios\n 3. 最终决定杂项内容(如精确的gpu和cpu)\n\n还有一些关于smbios的特别注意事项:\n\n * imacpro1,1和macpro7,1是唯一允许dgpu处理所有工作负载的2个smbios，包括后台渲染和其他igpu将处理的任务\n   * 如果你需要，我们只推荐这个smbios，但是你可能需要修复电源管理，因为如果你的硬件不是这个类(如hedt/server/amd)，睡眠可能会中断:修复电源管理\n   * 请注意，这需要polaris, vega或navi gpu才能正常工作。\n * imac20,2是一个定制的smbios，只适用于苹果定制的i9-10910 cpu，所以除非你有i9-10900k，我们建议使用imac20,1\n * 应该避免使用mac mini smbios，除非你运行的是没有内置显示器的移动硬件\n   * intel nucs是这种smbios的理想硬件\n * 不支持igpu的cpu在选择smbios时必须非常注意，因为苹果公司总是假设imac smbios上存在igpu，所以你需要找一个没有这个要求的smbios，比如imac pro或mac pro。\n   * 这也适用于amd cpu\n\n\n# macos smbios列表\n\n这是苹果在macos中支持的所有smbios的完整列表，包括cpu和gpu类型等额外信息。\n\n\n\n * 如何决定\n * macos smbios列表\n   * macbook\n   * macbook air\n   * macbook pro\n   * mac mini\n   * imac\n   * imac pro\n   * mac pro\n   * xserve\n   * 其他smbios\n\n\n\n信息来源：everymac和opencorepkg\n\n特别注意:\n\n * 每个cpu家族旁边的字母是cpu的级别，详见下表:\n\n字母             类型\ny              移动(低端)\nu, m           移动(中端)\nh, qm, hq      移动(高端)\ns              桌面\nep, sp, w, x   hedt/服务器\n\n\n# macbook\n\nsmbios        cpu家族          gpu             board-id               最初支持                最后支持版本\nmacbook1,1    yonah(m)       gma 950         mac-f4208cc8           10.4.6 (8i2025)     10.6.8\nmacbook2,1    merom(m)       gma 950         mac-f4208ca9           10.4.8 (8n1108)     10.7.5\nmacbook3,1    merom(m)       gma x3100       mac-f22788c8           10.5 (9a3111)\nmacbook4,1    penryn(m)      gma x3100       mac-f22788a9           10.5.2 (9c2015)\nmacbook5,1    penryn(m)      geforce 9400m   mac-f42d89c8           10.5.5 (9f2114)     10.11.6\nmacbook5,2    penryn(m)      geforce 9400m   mac-f22788aa           10.5.6 (9g2110)\nmacbook6,1    penryn(m)      geforce 9400m   mac-f22c8ac8           10.6.1 (10a2047)    10.13.6\nmacbook7,1    penryn(m)      geforce 320m    mac-f22c89c8           10.6.3 (10d2162)\nmacbook8,1    broadwell(y)   hd 5300         mac-be0e8ac46fe800cc   10.10.2 (14c2061)   11.7.x\nmacbook9,1    skylake(y)     hd 515          mac-9ae82516c7c6b903   10.11.4 (15e2066)   12.6.x\nmacbook10,1   kaby lake(y)   hd 615          mac-ee2ebd4b90b839a8   10.12.5 (16f207)    current\n\n\n# macbook air\n\nsmbios          cpu家族             gpu                     board-id               最初支持                最后支持版本\nmacbookair1,1   merom(m)          gma x3100 (11")         mac-f42c8cc8           10.5.1 (9b2324)     10.7.5\nmacbookair2,1   penryn(m)         geforce 9400m (13")     mac-f42d88c8           10.5.5              10.11.6\nmacbookair3,1   penryn(m)         geforce 320m (11")      mac-942452f5819b1c1b   10.6.4 (10f3061)    10.13.6\nmacbookair3,2   penryn(m)         geforce 320m (13")      mac-942c5df58193131b   10.6.4 (10f3061)\nmacbookair4,1   sandy bridge(m)   hd 3000 (11")           mac-c08a6bb70a942ac2   10.7 (11a2063)\nmacbookair4,2   sandy bridge(m)   hd 3000 (13")           mac-742912efdbee19b3   10.7 (11a2063)\nmacbookair5,1   ivy bridge(u)     hd 4000 (11")           mac-66f35f19fe2a0d05   10.7.4 (11e2520)    10.15.7\nmacbookair5,2   ivy bridge(u)     hd 4000 (13")           mac-2e6fab96566fe58c   10.8.2 (12c2034)\nmacbookair6,1   haswell(u)        hd 5000 (11")           mac-35c1e88140c3e6cf   10.8.4 (12e3067)    11.7.x\nmacbookair6,2   haswell(u)        hd 5000 (13")           mac-7df21cb3ed6977e5   10.8.4 (12e3067)\nmacbookair7,1   broadwell(u)      hd 6000 (11")           mac-9f18e312c5c2bf0b   10.10.2 (14c2507)   12.6.x\nmacbookair7,2   broadwell(u)      hd 6000 (13")           mac-937cb26e2e02bb01   10.10.2 (14c2507)\nmacbookair8,1   amber lake(y)     uhd 617 (13")           mac-827fac58a8fdfa22   10.14.1 (18b2084)   current\nmacbookair8,2   amber lake(y)     uhd 617 (13")           mac-226cb3c6a851a671   10.14.5 (18f2058)\nmacbookair9,1   ice lake(y)       iris plus g4/g7 (13")   mac-0cff9c7c2b63df8d   10.15.4 (19e287)\n\n\n# macbook pro\n\nsmbios           cpu家族              gpu                                   board-id               最初支持                最后支持版本\nmacbookpro1,1    yonah(m)           radeon x1600 (15")                    mac-f425bec8           10.4.5 (8g1453)     10.6.8\nmacbookpro1,2    yonah(m)           radeon x1600 (17")                    mac-f42dbec8           10.4.6 (8i2032)\nmacbookpro2,1    merom(m)           radeon x1600 (15")                    mac-f42189c8           10.4.8 (8n1051)     10.7.5\nmacbookpro2,2    merom(m)           radeon x1600 (17")                    mac-f42187c8           10.4.8 (8n1037)\nmacbookpro3,1    merom(m)           geforce 8600m gt (15/17")             mac-f4238bc8           10.4.9 (8q1058)     10.11.6\nmacbookpro4,1    penryn(m)          geforce 8600mg gt (17")               mac-f42c89c8           10.5.2 (9c2018)\nmacbookpro5,1    penryn(m)          geforce 9400m/9600m gt (15")          mac-f42d86c8           10.5.5 (9f2114)\nmacbookpro5,2    penryn(m)          geforce 9400m/9600m gt (17")          mac-f2268ec8           10.5.6 (9g2141)\nmacbookpro5,3    penryn(m)          geforce 9400m/9600m gt (15")          mac-f22587c8           10.5.7 (9j3050)\nmacbookpro5,4    penryn(m)          geforce 9400m/9600m gt (15")          mac-f22587a1           10.5.7 (9j3050)\nmacbookpro5,5    penryn(m)          geforce 9400m/9600m gt (13")          mac-f2268ac8           10.5.7 (9j3050)\nmacbookpro6,1    arrandale(m)       hd graphics/geforce gt 330m (17")     mac-f22589c8           10.6.3 (10d2063a)   10.13.6\nmacbookpro6,2    arrandale(m)       hd graphics/geforce gt 330m (15")     mac-f22586c8           10.6.3 (10d2094)    10.13.6\nmacbookpro7,1    penryn(m)          geforce 320m (13")                    mac-f222bec8           10.6.3 (10d2125)\nmacbookpro8,1    sandy bridge(m)    hd 3000 (13")                         mac-94245b3640c91c81   10.6.6 (10j3210)\nmacbookpro8,2    sandy bridge(qm)   hd 3000/radeon hd 6490m (15")         mac-94245a3940c91c80   10.6.6 (10j3210)\nmacbookpro8,3    sandy bridge(qm)   hd 3000/radeon hd 6750m (17")         mac-942459f5819b171b   10.6.6 (10j3210)\nmacbookpro9,1    ivy bridge(qm)     hd 4000/geforce gt 650m (15")         mac-4b7ac7e43945597e   10.7.3 (11d2097)    10.15.7\nmacbookpro9,2    ivy bridge(m)      hd 4000 (13")                         mac-6f01561e16c75d06   10.7.3 (11d2515)\nmacbookpro10,1   ivy bridge(qm)     hd 4000/geforce gt 650m (15")         mac-c3ec7cd22292981f   10.7.4 (11e2068)\nmacbookpro10,2   ivy bridge(m)      hd 4000 (13")                         mac-afd8a9d944ea4843   10.8.2 (12c2034)\nmacbookpro11,1   haswell(u)         iris 5100 (13")                       mac-189a3d4f975d5ffc   10.9 (13a2093)      11.7.x\nmacbookpro11,2   haswell(hq)        iris pro 5200 (15")                   mac-3cbd00234e554e41   10.9 (13a3017)\nmacbookpro11,3   haswell(hq)        iris pro 5200/geforce gt 750m (15")   mac-2bd1b31983fe1663   10.9 (13a3017)\nmacbookpro11,4   haswell(hq)        iris pro 5200 (15")                   mac-06f11fd93f0323c5   10.10.3 (14d2134)   12.6.x\nmacbookpro11,5   haswell(hq)        iris pro 5200/radeon r9 m370x (15")   mac-06f11f11946d27c5   10.10.3 (14d2134)\nmacbookpro12,1   broadwell(u)       iris 6100 (13")                       mac-e43c1c25d4880ad6   10.10.2 (14c2507)\nmacbookpro13,1   skylake(u)         iris 540 (13")                        mac-473d31eabeb93f9b   10.12 (16a2323a)\nmacbookpro13,2   skylake(u)         iris 550 (13")                        mac-66e35819ee2d0d05   10.12.1 (16b2657)\nmacbookpro13,3   skylake(h)         hd 530/radeon pro 450 (15")           mac-a5c67f76ed83108c   10.12.1 (16b2659)\nmacbookpro14,1   kaby lake(u)       iris plus 640 (13")                   mac-b4831cebd52a0c4c   10.12.5 (16f2073)   current\nmacbookpro14,2   kaby lake(u)       iris plus 650 (13")                   mac-cad6701f7cea0921   10.12.5 (16f2073)\nmacbookpro14,3   kaby lake(h)       hd 630/radeon pro 555 (15")           mac-551b86e5744e2388   10.12.5 (16f2073)\nmacbookpro15,1   coffee lake(h)     uhd 630/radeon pro 555x (15")         mac-937a206f2ee63c01   10.13.6 (17g2112)\nmacbookpro15,2   coffee lake(u)     iris plus 655 (13")                   mac-827fb448e656ec26   10.13.6 (17g2112)\nmacbookpro15,3   coffee lake(h)     uhd 630/radeon pro vega 16 (15")      mac-1e7e29ad0135f9bc   10.14.1 (18b3094)\nmacbookpro15,4   coffee lake(u)     iris plus 645 (13")                   mac-53fdb3d8db8ca971   10.14.5 (18f2058)\nmacbookpro16,1   coffee lake(h)     uhd 630/radeon pro 5300 (16")         mac-e1008331fdc96864   10.15.1 (19b2093)\nmacbookpro16,2   ice lake(u)        iris plus g4/g7 (13")                 mac-5f9802efe386aa28   10.15.4 (19e2269)\nmacbookpro16,3   coffee lake(u)     iris plus 645 (13")                   mac-e7203c0f68aa0004   10.15.4 (19e2269)\nmacbookpro16,4   coffee lake(h)     uhd 630/radeon pro 5600m (16")        mac-a61bade1fdad7b05   10.15.1 (19b2093)\n\n\n# mac mini\n\nsmbios       cpu家族              gpu                    board-id               最初支持               最后支持版本\nmacmini1,1   yonah(m)           gma 950                mac-f4208ec8           10.4.5 (8h1619)    10.6.8\nmacmini2,1   merom(m)           gma 950                mac-f4208eaa           10.4.10 (8r3014)   10.7.5\nmacmini3,1   penryn(m)          geforce 9400m          mac-f22c86c8           10.5.6 (9g2030)    10.11.6\nmacmini4,1   penryn(m)          geforce 320m           mac-f2208ec8           10.6.4 (10f2025)   10.13.6\nmacmini5,1   sandy bridge(m)    hd 3000                mac-8ed6af5b48c039e1   10.7 (11a2061)\nmacmini5,2   sandy bridge(m)    radeon hd 6630m        mac-4bc72d62ad45599e   10.7 (11a2061)\nmacmini5,3   sandy bridge(qm)   hd 3000                mac-7ba5b2794b2cdb12   10.7 (11a2061)\nmacmini6,1   ivy bridge(m)      hd 4000                mac-031aee4d24bff0b1   10.8.1 (12b2080)   10.15.7\nmacmini6,2   ivy bridge(qm)     hd 4000                mac-f65ae981ffa204ed   10.8.1 (12b2080)\nmacmini7,1   haswell(u)         hd 5000 or iris 5100   mac-35c5e08120c7eeaf   10.10 (14a389)     12.6.x\nmacmini8,1   coffee lake(h)     uhd 630                mac-7ba5b2dfe22ddd8c   10.14 (18a2063)    current\n\n\n# imac\n\nsmbios     cpu家族             gpu                        board-id                                      最初支持                最后支持版本\nimac4,1    yonah(m)          radeon x1600               mac-f42786c8                                  10.4.4 (8g1165)     10.6.8\nimac4,2    yonah(m)          gma 950                    mac-f4218ec8                                  10.4.7 (8i2057)\nimac5,1    merom(m)          radeon x1600               mac-f4228ec8                                  10.4.7 (8k1106)     10.7.5\nimac5,2    merom(m)          gma 950                    mac-f4218ec8                                  10.4.7 (8k1106)\nimac6,1    merom(m)          geforce 7300gt             mac-f4218fc8                                  10.4.7 (8k1123)\nimac7,1    merom(m)          radeon hd 2400 xt          mac-f42386c8                                  10.4.10 (8r4031)    10.11.6\nimac8,1    penryn(m)         radeon hd 2400 xt          mac-f227bec8                                  10.5.2 (9c2028)\nimac9,1    penryn(m)         geforce 9400m              mac-f2218fa9                                  10.5.6 (9g2030)\nimac10,1   wolfdale(s)       geforce 9400m              mac-f221dcc8                                  10.6.1 (10a2155)    10.13.6\nimac10,1   wolfdale(s)       radeon hd 4670             mac-f2268cc8                                  10.6.1 (10a2155)\nimac11,1   lynnfield(s)      radeon hd 4850             mac-f2268dae                                  10.6.2 (10c2234)\nimac11,2   clarkdale(s)      radeon hd 4670             mac-f2238ac8                                  10.6.3 (10d2322a)\nimac11,3   clarkdale(s)      radeon hd 5670             mac-f2238bae                                  10.6.3 (10d2322a)\nimac12,1   sandy bridge(s)   radeon hd 6750m            mac-942b5bf58194151b                          10.6.6 (10j4026)\nimac12,2   sandy bridge(s)   radeon hd 6770m            mac-942b59f58194171b                          10.6.6 (10j4026)\nimac13,1   ivy bridge(s)     geforce gt 640m            mac-00be6ed71e35eb86                          10.8.2 (12c3104)    10.15.7\nimac13,1   ivy bridge(s)     hd 4000                    mac-00be6ed71e35eb86                          10.8.2 (12c3104)\nimac13,2   ivy bridge(s)     geforce gtx 660m           mac-fc02e91ddd3fa6a4                          10.8.2 (12c2037)\nimac13,3   ivy bridge(s)     hd 4000                    mac-7df2a3b5e5d671ed                          10.8.2 (12c2037)\nimac14,1   haswell(s)        iris pro 5200              mac-031b6874cf7f642a                          10.8.4 (12e4022)\nimac14,2   haswell(s)        geforce gt 750m            mac-27adbb7b4cee8e61                          10.8.4 (12e4022)\nimac14,3   haswell(s)        geforce gt 755m            mac-77eb7d7daf985301                          10.8.4 (12e4022)\nimac14,4   haswell(u)        hd 5000                    mac-81e3e92dd6088272                          10.9.3 (13d2061)    11.7.x\nimac15,1   haswell(s)        radeon r9 m290x            mac-42fd25eabcabb274                          10.10 (14a389)\nimac16,1   broadwell(u)      hd 6000 or iris pro 6200   mac-a369ddc4e67f1c45                          10.11 (15a2301)     12.6.x\nimac16,2   broadwell(s)      iris pro 6200              mac-ffe5ef870d7ba81a                          10.11 (15a2301)\nimac17,1   skylake(s)        radeon r9 m380             mac-db15bd556843c820, mac-65ce76090165799a,   10.11 (15a4310)\n                                                        mac-b809c3757da9bb8d\nimac18,1   kaby lake(u)      iris plus 640              mac-4b682c642b45593e                          10.12.4 (16e2193)   current\nimac18,2   kaby lake(s)      radeon pro 555             mac-77f17d7da9285301                          10.12.4 (16f2073)\nimac18,3                     radeon pro 570             mac-be088af8c5eb4fa2                          10.12.4 (16f2073)\nimac19,1   coffee lake(s)    radeon pro 570x            mac-aa95b1ddab278b95                          10.14.4 (18e226)\nimac19,2                     radeon pro 555x            mac-63001698e7a34814                          10.14.4 (18e226)\nimac20,1   comet lake(s)     radeon pro 5300            mac-cff7d910a743caaf                          10.15.6 (19g2005)\nimac20,2                                                mac-af89b6d9451a490b                          10.15.6 (19g2005)\n\n\n# imac pro\n\nsmbios       cpu家族       gpu       board-id               最初支持                最后支持版本\nimacpro1,1   skylake-w   vega 56   mac-7ba5b2d9e42ddd94   10.13.2 (17c2111)   current\n\n\n# mac pro\n\nsmbios      cpu家族            gpu                 board-id               最初支持               最后支持版本\nmacpro1,1   woodcrest        geforce 7300 gt     mac-f4208dc8           10.4.7 (8k1079)    10.7.5\nmacpro2,1   clovertown                           mac-f4208da9           10.4.9 (8p4037)\nmacpro3,1   harpertown       radeon hd 2600 xt   mac-f42c88c8           10.5.1 (9b2117)    10.11.6\nmacpro4,1   nehalem          geforce gt 120      mac-f221bec8           10.5.6 (9g3553)\nmacpro5,1   nehalem          radeon hd 5770      mac-f221bec8           10.6.4 (10f2521)   10.14.6\nmacpro5,1   westmere ep                          mac-f221bec8           10.6.4 (10f2521)\nmacpro6,1   ivy bridge ep    firepro d300        mac-f60deb81ff30acf6   10.9.1 (13b4116)   12.6.x\nmacpro7,1   cascade lake-w   radeon pro 580x     mac-27ad2f918ae68f61   10.15.0 (19a583)   current\n\n\n# xserve\n\nsmbios      cpu家族        gpu              board-id       最初支持                     最后支持版本\nxserve1,1   woodcrest    radeon x1300     mac-f4208ac8   server 10.4.8 (8n1215)   server 10.7.5\nxserve2,1   harpertown                    mac-f42289c8   server 10.5 (9b2117)\nxserve3,1   nehalem ep   geforce gt 120   mac-f223bec8   server 10.5.6            10.11.6\n\n\n# 其他smbios\n\nopencore不支持下面列出的所有型号，但为了方便参考，这里列出了文档。\n\n * 苹果开发平台\n   * developer transition kit\n * 苹果芯片\n   * mac mini\n   * macbook air\n   * macbook pro\n   * imac\n * powerpc\n   * powerbook\n   * ibook\n   * powermac\n   * imac\n   * emac\n   * cube\n   * mac mini\n   * xserve\n\n苹果芯片笔记本\n\n关于苹果cpu的额外信息:\n\n * 它们不依赖acpi或uefi\n * 他们的固件中不包含deviceproperties\n * 他们使用ipad8,6 ios/ipados应用程序\n * board-id仅适用于intel mac, powerpc和arm没有这个条目\n\n# developer transition kit\n\nsmbios   年代         cpu家族            产品标识   初始支持\nadp2,1   mid 2005   intel prescott   n/a    10.4.1 (8b1025)\nadp3,2   mid 2020   apple a12z       j273   11.0.0 (20a5299w)\n\n# mac mini - apple silicon\n\nsmbios       年代          cpu家族      产品标识   初始支持\nmacmini9,1   late 2020   apple m1   j274   11.0.0 (20a2411)\n\n# macbook air - apple silicon\n\nsmbios           年代          cpu家族      产品标识   初始支持\nmacbookair10,1   late 2020   apple m1   j313   11.0.0 (20a2411)\n\n# macbook pro - apple silicon\n\nsmbios           年代          cpu家族      产品标识   初始支持\nmacbookpro17,1   late 2020   apple m1   j293   11.0.0 (20a2411)\n\n# imac - apple silicon\n\nsmbios     年代         cpu家族      产品标识   初始支持\nimac21,1   mid 2021   apple m1   j256   11.3 (20e232?)\nimac21,2   mid 2021   apple m1   j257   11.3 (20e232?)\n\npower pc smbios table\n\n\n# powerbook - powerpc\n\nsmbios         年代           cpu家族                初始支持     最后支持版本\npowerbook1,1   mid-1999     powerpc 750 (g3)     8.6      10.3.9\npowerbook3,1   early 2000                        9.0.2    10.4.11\npowerbook3,2   early 2001   powerpc 7410 (g4)    9.1\npowerbook3,3   late 2001    powerpc 7440 (g4)    9.2.1\npowerbook3,4   mid-2002     powerpc 7451 (g4)    9.2.2\npowerbook3,5   late 2002    powerpc 7455 (g4)             10.5.8\npowerbook5,1   early 2003                        10.2.4\npowerbook5,2   late 2003    powerpc 7447 (g4)    10.2.7\npowerbook5,3\npowerbook5,4   mid-2004     powerpc 7447a (g4)   10.3.3\npowerbook5,5\npowerbook5,6   early 2005   10.3.7\npowerbook5,7\npowerbook5,8   late 2005                         10.4.2\npowerbook5,9\npowerbook6,1   early 2003   powerpc 7455 (g4)    10.2.3\npowerbook6,2\npowerbook6,4   mid-2004     powerpc 7447a (g4)   10.2.7\npowerbook6,8   early 2005                        10.3.7\n\n# ibook - powerpc\n\nsmbios         年代           cpu家族                初始支持            最后支持版本\npowerbook2,1   mid-1999     powerpc 750 (g3)     8.6             10.3.9\npowerbook2,2   late 20000   powerpc 750cx (g3)   9.0.4           10.4.11\npowerbook4,1   late 2002    powerpc 7455 (g4)    9.2.2           10.5.8\npowerbook4,2   early 2002   powerpc 750cx (g3)   9.2.1           10.4.11\npowerbook4,3   mid-2002     powerpc 750fx (g3)   9.2.2\npowerbook6,3   late 2003    powerpc 7457 (g4)    10.3 (7b85)\npowerbook6,5   mid-2004     powerpc 7447a (g4)   10.3.3 (7g51)   10.5.8\npowerbook6,7   mid-2005                          10.4.2 (8d37)\n\n# powermac - powerpc\n\nsmbios         年代           cpu家族                初始支持            最后支持版本\npowermac1,1    early 1999   powerpc 750 (g3)     8.5.1           10.4.11\npowermac1,2    mid 1999     powerpc 7400 (g4)    8.6\npowermac3,1\npowermac3,2    mid-2001     powerpc 7450 (g4)    9.2\npowermac3,3    mid-2000     powerpc 7400 (g4)    9.0.4\npowermac3,4    early 2001   powerpc 7410 (g4)    9.1\npowermac3,5    mid-2001     powerpc 7450 (g4)    9.2             10.5.8\npowermac3,6    mid-2002     powerpc 7455 (g4)    9.2.2\npowermac7,2    mid-2003     powerpc 970 (g5)     10.2.7\npowermac7,3    early-2005   powerpc 970fx (g5)   10.4\npowermac9,1    late 2004                         10.3.5 (8e90)\npowermac11,2   late 2005    powerpc 970mp (g5)   10.4.2\n\n# imac - powerpc\n\nsmbios         年代           cpu家族                初始支持             最后支持版本\nimac,1         mid 1998     powerpc 750 (g3)     8.1              10.3.9\npowermac2,1    late 1999                         8.6              10.4.11\npowermac2,2    mid 2000                          9.0.4            10.3.9\npowermac4,1    early 2001   powerpc 750cx (g3)   9.1              10.4.11\npowermac4,2    early 2002   powerpc 7441 (g4)    9.2.2\npowermac4,5    mid-2002     powerpc 7445 (g4)    9.2.2\npowermac6,1    early 2003                        10.2.3           10.5.8\npowermac6,3    late 2003                         10.3.1\npowermac8,1    mid-2004     powerpc 970 (g5)     10.3.5 (7p35)\npowermac8,2    mid-2005                          10.4 (8a428)\npowermac12,1   late 2005    powerpc 970fx (g5)   10.4.2 (8e102)\n\n# emac - powerpc\n\nsmbios        年代           cpu家族                初始支持     最后支持版本\npowermac4,4   mid-2003     powerpc 7445 (g4     9.2.2    10.5.8\npowermac6,4   early 2004   powerpc 7447a (g4)   10.3.3\n\n# cube - powerpc\n\nsmbios        年代         cpu家族               初始支持    最后支持版本\npowermac5,1   mid-2000   powerpc 7400 (g4)   9.0.4   10.4.11\npowermac5,2\n\n# mac mini - powerpc\n\nsmbios         年代           cpu家族                初始支持            最后支持版本\npowermac10,1   early 2005   powerpc 7447a (g4)   10.3.7 (7t11)   10.5.8\npowermac10,2   late 2005                         10.4.2 (8d40)\n\n# xserve - powerpc\n\nsmbios       年代           cpu家族                初始支持             最后支持版本\nrackmac1,1   mid-2002     powerpc 7455 (g4)    10.1.5 (6c115)   server 10.5.8\nrackmac1,2   early 2003                        10.2.4 (6i34)\nrackmac3,1   early 2004   powerpc 970fx (g5)   10.3.0',charsets:{cjk:!0}},{title:"Selecting the right SMBIOS",frontmatter:{search:!1},regularPath:"/extras/smbios.html",relativePath:"extras/smbios.md",key:"v-3a21b4ad",path:"/extras/smbios.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# Selecting the right SMBIOS\n\nPage has been moved here: Choosing the right SMBIOS",normalizedContent:"# selecting the right smbios\n\npage has been moved here: choosing the right smbios",charsets:{}},{title:"禁用 GPU",frontmatter:{},regularPath:"/extras/spoof.html",relativePath:"extras/spoof.md",key:"v-655aff7f",path:"/extras/spoof.html",headers:[{level:3,title:"引导标志",slug:"引导标志",normalizedTitle:"引导标志",charIndex:84},{level:3,title:"DeviceProperties 方法",slug:"deviceproperties-方法",normalizedTitle:"deviceproperties 方法",charIndex:301},{level:3,title:"SSDT 方法",slug:"ssdt-方法",normalizedTitle:"ssdt 方法",charIndex:615},{level:2,title:"Windows GPU选择",slug:"windows-gpu选择",normalizedTitle:"windows gpu选择",charIndex:1558}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"引导标志 DeviceProperties 方法 SSDT 方法 Windows GPU选择",content:'# 禁用 GPU\n\n所以你需要隐藏你的不支持GPU吗?使用OpenCore，事情略有不同，特别是我们需要指定我们想要欺骗的确切设备。有三种方法可以做到这一点:\n\n * 引导标志\n   * 禁用除iGPU外的所有gpu\n * DeviceProperties\n   * 在每个插槽的基础上禁用GPU\n * SSDT\n   * 在每个插槽的基础上禁用GPU\n\nCSM必须在BIOS中关闭，才能使欺骗正常工作，特别是在基于AMD CPU的系统上。\n\n\n# 引导标志\n\n到目前为止最简单的方法，你所需要做的就是添加以下引导参数:\n\n-wegnoegpu\n\n请注意，这将禁用除iGPU之外的所有gpu。\n\n\n# DeviceProperties 方法\n\n这里很简单，用gfxutil 找到PCI路由，然后用你的spoof创建一个新的DeviceProperties部分:\n\npath/to/gfxutil -f GFX0\n\n\n输出结果类似:\n\nDevicePath = PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\n导航到Root -> DeviceProperties -> Add并使用以下属性添加您的PCI路由:\n\nKEY           TYPE      VALUE\ndisable-gpu   Boolean   True\n\n\n\n\n# SSDT 方法\n\n有许多方法可以找到路径，但通常最简单的方法是进入windows下的设备管理器并找到PCI路径。\n\n\\_SB.PCI0.PEG0.PEGP的设备路径示例:\n\n\n    DefinitionBlock ("", "SSDT", 2, "DRTNIA", "spoof", 0x00000000)\n    {\n       External (_SB_.PCI0.PEG0.PEGP, DeviceObj)\n\n       Method (_SB.PCI0.PEG0.PEGP._DSM, 4, NotSerialized)\n       {\n          If ((!Arg2 || !(_OSI ("Darwin"))))\n          {\n             Return (Buffer (One)\n             {\n                0x03\n             })\n          }\n\n          Return (Package (0x0A)\n          {\n             "name",\n             Buffer (0x09)\n             {\n                "#display"\n             },\n\n             "IOName",\n             "#display",\n             "class-code",\n             Buffer (0x04)\n             {\n                0xFF, 0xFF, 0xFF, 0xFF\n             },\n          })\n       }\n    }\n\n\n\n可以在这里找到该SSDT的副本:Spoof-SSDT.dsl. 你需要MaciASL 来编译。记住， .aml 是已编译的，而 .dsl 是源代码。您可以通过选择File -> Save As -> ACPI Machine Language，使用MaciASL进行编译。\n\n来源:CorpNewt\n\n\n# Windows GPU选择\n\n根据你的设置，你可能会发现Windows渲染游戏或应用程序使用了不需要的GPU。\n\n许多用户只有两个gpu。NVIDIA和Intel HD/UHD IGPU。由于NVIDIA不再在macOS上工作，为了方便，他们可能有显示器插入主板的HDMI/DP连接。因此，Windows将通过IGPU渲染所有的游戏和应用程序。您可以通过以下方式将特定的游戏或应用程序重路由到不同的GPU:设置>系统>显示>图形设置\n\n\n\n渲染后的游戏或应用程序将其缓冲区复制到IGPU。然后显示给你看。这也有一些缺点:\n\n * GSync将不再工作。\n * NVIDIA设置不能再打开。这需要显示器与GPU连接\n * 降低帧速率。\n * 增加输入延迟。\n * 刷新率上限。\n\n如果你的主板只有一个用于iGPU的HDMI连接器，规格2.1的最大刷新率是120Hz. 这假设您的主板和显示器具有相同的规格。这意味着您的144Hz显示器仅看到硬件决定的最大120Hz。如果你的板上有IGPU的DP连接器，这个限制不适用。\n\n如果您有两个以上的gpu (AMD、NVIDIA和Intel)，则此设置将受到限制。显示器连接到AMD GPU意味着Windows将只允许您选择AMD GPU或Intel IGPU。NVIDIA GPU将不显示。在Windows的未来版本中，将删除此限制.\n\n作为建议，如果你使用两种操作系统，并且不希望有任何缺点，你最好的选择是HDMI或DP开关。',normalizedContent:'# 禁用 gpu\n\n所以你需要隐藏你的不支持gpu吗?使用opencore，事情略有不同，特别是我们需要指定我们想要欺骗的确切设备。有三种方法可以做到这一点:\n\n * 引导标志\n   * 禁用除igpu外的所有gpu\n * deviceproperties\n   * 在每个插槽的基础上禁用gpu\n * ssdt\n   * 在每个插槽的基础上禁用gpu\n\ncsm必须在bios中关闭，才能使欺骗正常工作，特别是在基于amd cpu的系统上。\n\n\n# 引导标志\n\n到目前为止最简单的方法，你所需要做的就是添加以下引导参数:\n\n-wegnoegpu\n\n请注意，这将禁用除igpu之外的所有gpu。\n\n\n# deviceproperties 方法\n\n这里很简单，用gfxutil 找到pci路由，然后用你的spoof创建一个新的deviceproperties部分:\n\npath/to/gfxutil -f gfx0\n\n\n输出结果类似:\n\ndevicepath = pciroot(0x0)/pci(0x1,0x0)/pci(0x0,0x0)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\n导航到root -> deviceproperties -> add并使用以下属性添加您的pci路由:\n\nkey           type      value\ndisable-gpu   boolean   true\n\n\n\n\n# ssdt 方法\n\n有许多方法可以找到路径，但通常最简单的方法是进入windows下的设备管理器并找到pci路径。\n\n\\_sb.pci0.peg0.pegp的设备路径示例:\n\n\n    definitionblock ("", "ssdt", 2, "drtnia", "spoof", 0x00000000)\n    {\n       external (_sb_.pci0.peg0.pegp, deviceobj)\n\n       method (_sb.pci0.peg0.pegp._dsm, 4, notserialized)\n       {\n          if ((!arg2 || !(_osi ("darwin"))))\n          {\n             return (buffer (one)\n             {\n                0x03\n             })\n          }\n\n          return (package (0x0a)\n          {\n             "name",\n             buffer (0x09)\n             {\n                "#display"\n             },\n\n             "ioname",\n             "#display",\n             "class-code",\n             buffer (0x04)\n             {\n                0xff, 0xff, 0xff, 0xff\n             },\n          })\n       }\n    }\n\n\n\n可以在这里找到该ssdt的副本:spoof-ssdt.dsl. 你需要maciasl 来编译。记住， .aml 是已编译的，而 .dsl 是源代码。您可以通过选择file -> save as -> acpi machine language，使用maciasl进行编译。\n\n来源:corpnewt\n\n\n# windows gpu选择\n\n根据你的设置，你可能会发现windows渲染游戏或应用程序使用了不需要的gpu。\n\n许多用户只有两个gpu。nvidia和intel hd/uhd igpu。由于nvidia不再在macos上工作，为了方便，他们可能有显示器插入主板的hdmi/dp连接。因此，windows将通过igpu渲染所有的游戏和应用程序。您可以通过以下方式将特定的游戏或应用程序重路由到不同的gpu:设置>系统>显示>图形设置\n\n\n\n渲染后的游戏或应用程序将其缓冲区复制到igpu。然后显示给你看。这也有一些缺点:\n\n * gsync将不再工作。\n * nvidia设置不能再打开。这需要显示器与gpu连接\n * 降低帧速率。\n * 增加输入延迟。\n * 刷新率上限。\n\n如果你的主板只有一个用于igpu的hdmi连接器，规格2.1的最大刷新率是120hz. 这假设您的主板和显示器具有相同的规格。这意味着您的144hz显示器仅看到硬件决定的最大120hz。如果你的板上有igpu的dp连接器，这个限制不适用。\n\n如果您有两个以上的gpu (amd、nvidia和intel)，则此设置将受到限制。显示器连接到amd gpu意味着windows将只允许您选择amd gpu或intel igpu。nvidia gpu将不显示。在windows的未来版本中，将删除此限制.\n\n作为建议，如果你使用两种操作系统，并且不希望有任何缺点，你最好的选择是hdmi或dp开关。',charsets:{cjk:!0}},{title:"macOS 13: Ventura 系统事项",frontmatter:{},regularPath:"/extras/ventura.html",relativePath:"extras/ventura.md",key:"v-4694779a",path:"/extras/ventura.html",headers:[{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:29},{level:2,title:"注意事项",slug:"注意事项",normalizedTitle:"注意事项",charIndex:44},{level:3,title:"去掉的CPU支持",slug:"去掉的cpu支持",normalizedTitle:"去掉的cpu支持",charIndex:54},{level:3,title:"支持的机型",slug:"支持的机型",normalizedTitle:"支持的机型",charIndex:68},{level:3,title:"支持的硬件",slug:"支持的硬件",normalizedTitle:"支持的硬件",charIndex:79},{level:3,title:"AMD 补丁",slug:"amd-补丁",normalizedTitle:"amd 补丁",charIndex:90}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"目录 注意事项 去掉的CPU支持 支持的机型 支持的硬件 AMD 补丁",content:"# macOS 13: Ventura 系统事项\n\n\n# 目录\n\n\n\n * 目录\n * 注意事项\n   * 去掉的CPU支持\n   * 支持的机型\n   * 支持的硬件\n   * AMD 补丁\n\n\n\n\n# 注意事项\n\n\n# 去掉的CPU支持\n\nmacOS Ventura（macOS 13） 删除了对Haswell架构以前的cpu的支持。许多用户空间需要AVX2指令集的支持，以及AMD北极星架构的显卡驱动和一些kext中AVX2的指令实例。尽管这些kext可以通过 打补丁 的方式或者 降级kext的方式解决, 但是无法通过打补丁的方式解决北极星架构的显卡驱动和大部分基于AVX2指令集的用户空间问题。\n\n苹果留下了一个dyld缓存，在Ventura中不使用AVX2指令集来支持苹果硅机器上的Rosetta，但默认情况下没有安装这个缓存。 你可以使用 CryptexFixup 来强制安装dyld缓存, 但是有如下几点:\n\n * 如果苹果将AVX2支持添加到Rosetta中，他们可能会在未来的任何时候删除这个缓存\n * 无法进行增量更新(1-3GB的小更新)，你必须安装完整的更新(12GB)，因为增量更新只包含无avx2缓存Apple Silicon机器\n * 北极星架构的显卡无法在无AVX2指令集的机器上使用\n\n因为以上原因，Dortania团队将不再对Haswell架构以前的cpu提供Ventura（macOS 13）及以上的支持，对应这些cpu的页面将只针对Monterey（macOS 12）系统进行更新。\n\n\n# 支持的机型\n\nVentura 删除了如下机型的支持:\n\n * iMac17,x 以及更早的机型\n * Macmini7,1 以及更早的机型\n * MacBook9,1 以及更早的机型\n * MacBookAir7,x 以及更早的机型\n * MacBookPro13,x 以及更早的机型\n * MacPro6,1 以及更早的机型\n\n如果你的机型是在能够被Monterey系统支持并且没有出现在上述列表, 那么你可以继续完好的使用！\n\n详细的机型支持\n * iMac18,x 以及更新的机型\n * MacPro7,1 以及更新的机型\n * iMacPro1,1 以及更新的机型\n * Macmini8,1\n * MacBook10,1\n * MacBookAir8,1 以及更新的机型\n * MacBookPro14,x 以及更新的机型\n\n点这里 查看完整的机型支持列表。\n\n对于那些在Ventura不再支持的架构上:\n\n * 所有有独立显卡的台式机应该使用iMac18，iMac18,2，MacPro7,1或者iMacPro1,1。不受支持的独立显卡（非免驱独立显卡）仍然需要OCLP，免驱的显卡则不需要。\n * 所有使用不受支持的核心显卡（非免驱核心显卡）的台式机应该使用iMac18,1。\n * 所有不受支持的笔记本(使用Haswell, Broadwell, Skylake架构cpu的笔记本) 应该使用 MacBookPro14,1。\n\n\n# 支持的硬件\n\n去掉了如下硬件的支持:\n\n * Haswell (HD 4200/4400/4600/5000/P4600/P4700, Iris 5100, Iris Pro 5200)\n\n * Broadwell (HD 5300/5500/5600/6000/P5700, Iris 6100, Iris Pro 6200/P6300)\n\n * Skylake (HD 5xx/P5xx, Iris 5xx, Iris Pro 5xx/P5xx)\n   \n   * Skylake可以用v1.6.1版本或者更新版本的WhateverGreen来仿冒成Kaby Lake\n   * 更换最接近你配置的Kaby Lake架构的 device-id和AAPL,ig-platform-id\n   * 如果你想通过同样的配置来引导Monterey（macOS 12）或者更老的系统, 请在启动参数（boot-args）中添加-igfxsklaskbl\n\n * 你可以使用OpenCore-Legacy-Patcher来添加回删掉的硬件支持\n   \n   * 不会为使用OCLP的设备提供支持\n   * 你将不能进行增量更新 (1-3GB的小更新)\n   * 必须将SIP，Apple Secure Boot，和AMFI禁用.\n\n\n# AMD 补丁\n\n对于AMD的cpu, 请确保你更新了针对Ventura（macOS 13）的内核补丁。 不要忘记更新补丁以及你的cpu内核数量. 需要编辑的补丁名称为 algrey - Force cpuid_cores_per_package, 并且你只需要编辑 Replace 的值。你应该按照如下更改:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\n这里的<core count>应该被替换为你cpu物理核心数的16进制数。举个例子,一颗8核心的5800x应该设置成下面这样:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\n核心数量 => 对应的16进制\n\nCORE COUNT   HEXADECIMAL\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40",normalizedContent:"# macos 13: ventura 系统事项\n\n\n# 目录\n\n\n\n * 目录\n * 注意事项\n   * 去掉的cpu支持\n   * 支持的机型\n   * 支持的硬件\n   * amd 补丁\n\n\n\n\n# 注意事项\n\n\n# 去掉的cpu支持\n\nmacos ventura（macos 13） 删除了对haswell架构以前的cpu的支持。许多用户空间需要avx2指令集的支持，以及amd北极星架构的显卡驱动和一些kext中avx2的指令实例。尽管这些kext可以通过 打补丁 的方式或者 降级kext的方式解决, 但是无法通过打补丁的方式解决北极星架构的显卡驱动和大部分基于avx2指令集的用户空间问题。\n\n苹果留下了一个dyld缓存，在ventura中不使用avx2指令集来支持苹果硅机器上的rosetta，但默认情况下没有安装这个缓存。 你可以使用 cryptexfixup 来强制安装dyld缓存, 但是有如下几点:\n\n * 如果苹果将avx2支持添加到rosetta中，他们可能会在未来的任何时候删除这个缓存\n * 无法进行增量更新(1-3gb的小更新)，你必须安装完整的更新(12gb)，因为增量更新只包含无avx2缓存apple silicon机器\n * 北极星架构的显卡无法在无avx2指令集的机器上使用\n\n因为以上原因，dortania团队将不再对haswell架构以前的cpu提供ventura（macos 13）及以上的支持，对应这些cpu的页面将只针对monterey（macos 12）系统进行更新。\n\n\n# 支持的机型\n\nventura 删除了如下机型的支持:\n\n * imac17,x 以及更早的机型\n * macmini7,1 以及更早的机型\n * macbook9,1 以及更早的机型\n * macbookair7,x 以及更早的机型\n * macbookpro13,x 以及更早的机型\n * macpro6,1 以及更早的机型\n\n如果你的机型是在能够被monterey系统支持并且没有出现在上述列表, 那么你可以继续完好的使用！\n\n详细的机型支持\n * imac18,x 以及更新的机型\n * macpro7,1 以及更新的机型\n * imacpro1,1 以及更新的机型\n * macmini8,1\n * macbook10,1\n * macbookair8,1 以及更新的机型\n * macbookpro14,x 以及更新的机型\n\n点这里 查看完整的机型支持列表。\n\n对于那些在ventura不再支持的架构上:\n\n * 所有有独立显卡的台式机应该使用imac18，imac18,2，macpro7,1或者imacpro1,1。不受支持的独立显卡（非免驱独立显卡）仍然需要oclp，免驱的显卡则不需要。\n * 所有使用不受支持的核心显卡（非免驱核心显卡）的台式机应该使用imac18,1。\n * 所有不受支持的笔记本(使用haswell, broadwell, skylake架构cpu的笔记本) 应该使用 macbookpro14,1。\n\n\n# 支持的硬件\n\n去掉了如下硬件的支持:\n\n * haswell (hd 4200/4400/4600/5000/p4600/p4700, iris 5100, iris pro 5200)\n\n * broadwell (hd 5300/5500/5600/6000/p5700, iris 6100, iris pro 6200/p6300)\n\n * skylake (hd 5xx/p5xx, iris 5xx, iris pro 5xx/p5xx)\n   \n   * skylake可以用v1.6.1版本或者更新版本的whatevergreen来仿冒成kaby lake\n   * 更换最接近你配置的kaby lake架构的 device-id和aapl,ig-platform-id\n   * 如果你想通过同样的配置来引导monterey（macos 12）或者更老的系统, 请在启动参数（boot-args）中添加-igfxsklaskbl\n\n * 你可以使用opencore-legacy-patcher来添加回删掉的硬件支持\n   \n   * 不会为使用oclp的设备提供支持\n   * 你将不能进行增量更新 (1-3gb的小更新)\n   * 必须将sip，apple secure boot，和amfi禁用.\n\n\n# amd 补丁\n\n对于amd的cpu, 请确保你更新了针对ventura（macos 13）的内核补丁。 不要忘记更新补丁以及你的cpu内核数量. 需要编辑的补丁名称为 algrey - force cpuid_cores_per_package, 并且你只需要编辑 replace 的值。你应该按照如下更改:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\n这里的<core count>应该被替换为你cpu物理核心数的16进制数。举个例子,一颗8核心的5800x应该设置成下面这样:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\n核心数量 => 对应的16进制\n\ncore count   hexadecimal\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40",charsets:{cjk:!0}},{title:"查找你的硬件",frontmatter:{},regularPath:"/find-hardware.html",relativePath:"find-hardware.md",key:"v-3730ed66",path:"/find-hardware.html",headers:[{level:2,title:"使用Windows查找硬件",slug:"使用windows查找硬件",normalizedTitle:"使用windows查找硬件",charIndex:129},{level:3,title:"CPU 型号",slug:"cpu-型号",normalizedTitle:"cpu 型号",charIndex:148},{level:3,title:"GPU 型号",slug:"gpu-型号",normalizedTitle:"gpu 型号",charIndex:160},{level:3,title:"芯片组 型号",slug:"芯片组-型号",normalizedTitle:"芯片组 型号",charIndex:172},{level:3,title:"键盘、触控板和触摸屏连接类型",slug:"键盘、触控板和触摸屏连接类型",normalizedTitle:"键盘、触控板和触摸屏连接类型",charIndex:184},{level:3,title:"音频编解码器",slug:"音频编解码器",normalizedTitle:"音频编解码器",charIndex:204},{level:3,title:"网络控制器型号",slug:"网络控制器型号",normalizedTitle:"网络控制器型号",charIndex:216},{level:3,title:"硬盘型号",slug:"硬盘型号",normalizedTitle:"硬盘型号",charIndex:229},{level:2,title:"使用Linux查找硬件",slug:"使用linux查找硬件",normalizedTitle:"使用linux查找硬件",charIndex:237},{level:3,title:"CPU 型号",slug:"cpu-型号-2",normalizedTitle:"cpu 型号",charIndex:148},{level:3,title:"GPU 型号",slug:"gpu-型号-2",normalizedTitle:"gpu 型号",charIndex:160},{level:3,title:"芯片组 型号",slug:"芯片组-型号-2",normalizedTitle:"芯片组 型号",charIndex:172},{level:3,title:"键盘，触控板和触摸屏连接类型",slug:"键盘-触控板和触摸屏连接类型",normalizedTitle:"键盘，触控板和触摸屏连接类型",charIndex:290},{level:3,title:"音频编解码器",slug:"音频编解码器-2",normalizedTitle:"音频编解码器",charIndex:204},{level:3,title:"网络控制器型号",slug:"网络控制器型号-2",normalizedTitle:"网络控制器型号",charIndex:216},{level:3,title:"硬盘型号",slug:"硬盘型号-2",normalizedTitle:"硬盘型号",charIndex:229},{level:2,title:"使用OCSysInfo查找硬件",slug:"使用ocsysinfo查找硬件",normalizedTitle:"使用ocsysinfo查找硬件",charIndex:343},{level:3,title:"发现硬件",slug:"发现硬件",normalizedTitle:"发现硬件",charIndex:364},{level:3,title:"CPU 型号",slug:"cpu-型号-3",normalizedTitle:"cpu 型号",charIndex:148},{level:3,title:"GPU 型号",slug:"gpu-型号-3",normalizedTitle:"gpu 型号",charIndex:160},{level:3,title:"键盘和触摸板连接类型",slug:"键盘和触摸板连接类型",normalizedTitle:"键盘和触摸板连接类型",charIndex:398},{level:3,title:"音频编解码器",slug:"音频编解码器-3",normalizedTitle:"音频编解码器",charIndex:204},{level:3,title:"网络控制器型号",slug:"网络控制器型号-3",normalizedTitle:"网络控制器型号",charIndex:216},{level:3,title:"硬盘型号",slug:"硬盘型号-3",normalizedTitle:"硬盘型号",charIndex:229}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"使用Windows查找硬件 CPU 型号 GPU 型号 芯片组 型号 键盘、触控板和触摸屏连接类型 音频编解码器 网络控制器型号 硬盘型号 使用Linux查找硬件 CPU 型号 GPU 型号 芯片组 型号 键盘，触控板和触摸屏连接类型 音频编解码器 网络控制器型号 硬盘型号 使用OCSysInfo查找硬件 发现硬件 CPU 型号 GPU 型号 键盘和触摸板连接类型 音频编解码器 网络控制器型号 硬盘型号",content:'# 查找你的硬件\n\n本节主要是一个关于如何找到当前运行的硬件的迷你指南;这主要与笔记本电脑和预构建用户有关，因为硬件规格有点难以获得。如果你已经知道你有什么硬件，你可以跳过这一页，转到创建USB.\n\n假设你已经安装了Windows或Linux:\n\n\n\n * 使用Windows查找硬件\n   * CPU 型号\n   * GPU 型号\n   * 芯片组 型号\n   * 键盘、触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 硬盘型号\n * 使用Linux查找硬件\n   * CPU 型号\n   * GPU 型号\n   * 芯片组 型号\n   * 键盘，触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 硬盘型号\n * 使用OCSysInfo查找硬件\n   * 发现硬件\n   * CPU 型号\n   * GPU 型号\n   * 键盘和触摸板连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 硬盘型号\n\n\n\n\n# 使用Windows查找硬件\n\n我们主要有两个选择:\n\n * Windows内置的设备管理器\n * AIDA64\n\n由于使用GUI更容易，我们建议下载AIDA64并运行它，因为它更容易获取规格。然而我们将向你展示这两种方法获取的硬件规格。\n\n\n# CPU 型号\n\nAIDA64   设备管理器\n         \n\n\n# GPU 型号\n\nAIDA64   设备管理器\n         \n\n\n# 芯片组 型号\n\nAIDA64   设备管理器\n         \n\n * 注意:英特尔基于SOC的cpu将在同一个芯片上拥有芯片组和其他功能，而不是专用芯片。这意味着试图检测准确的芯片组有点困难\n\n\n# 键盘、触控板和触摸屏连接类型\n\n设备管理器\n\n\n不幸的是，AIDA64没有提供任何关于指针设备的有用信息，因此我们建议使用DeviceManager。\n\n * 你可以找到以下这些设备:\n   \n   * 人机界面设备\n   * 键盘\n   * 鼠标和其他指针设备\n\n * 要查看设备的确切连接类型，请选择指针设备，然后输入view -> device by connection。这将明确它是否通过PS2, I2C, SMBus, USB等\n\n根据设备的不同，它可能会在多个名称和连接下显示。主要需要关注的是:\n\nSMBus\n\n这些将显示为直接PCI设备，如 Synaptics SMBus Driver 或 ELAN SMBus Driver\n\n * 触摸设备将显示在PS2下的Synaptics PS2 device/Synaptics Pointing Device 和 PCI的 Synaptics SMBus Driver\n\n\n\n正如你所看到的，我们在左边的图像中有两个Synaptics设备，但是如果我们仔细看，我们会看到顶部的设备是PS2，而底部的是SMBus。虽然你可以在任何一种模式下使用触控板，但SMBus通常提供更好的手势支持和准确性。\n\nUSB\n\nDEVICE BY TYPE   DEVICE BY CONNECTION\n                 \n\n当我们将连接视图切换到按连接设备时，这些会显示为“PS2兼容的触摸板”，在USB下也会显示为按连接设备\n\nI2C\n\n它们几乎总是以微软的HID设备的形式显示，不过也可以以其他触控板的形式显示。但它们总是在I2C下显示。\n\n\n# 音频编解码器\n\nAIDA64   设备管理器\n         \n\n由于某些oem呈现设备名称的方式，您可以通过DeviceManager获得的最准确的信息是通过PCI ID(例如PCI 14F1,50F4)。这意味着您需要谷歌ID并计算出确切的设备ID，然而AIDA64可以正确地显示名称，这对终端用户来说更容易。\n\n\n# 网络控制器型号\n\nAIDA64   设备管理器\n         \n\n由于某些oem提供设备名称的方式，您可以通过设备管理器获得的最准确信息是PCI ID(例如 PCI\\VEN_14E4&DEV_43A0 对应于供应商ID为 14E4 和设备ID为 43A0). 这意味着你需要谷歌ID并弄清楚确切的设备ID;但是，AIDA64可以正确地显示名称，这要容易得多。\n\n\n# 硬盘型号\n\nAIDA64   设备管理器\n         \n\n由于oem没有提供关于驱动器的很多细节，您将需要谷歌来确定驱动器匹配显示的名称。\n\n\n# 使用Linux查找硬件\n\n使用Linux查找硬件,我们将使用一些工具:\n\n * pciutils\n * dmidecode\n\n下面是要在终端上运行的命令列表，幸运的是，大多数Linux发行版都已经安装了这些工具。如果没有，您可能会在您的发行版的包管理器中找到它们。\n\n\n# CPU 型号\n\ngrep -i "model name" /proc/cpuinfo\n\n\n\n# GPU 型号\n\nlspci | grep -i --color "vga\\|3d\\|2d"\n\n\n\n# 芯片组 型号\n\ndmidecode -t baseboard\n\n\n\n# 键盘，触控板和触摸屏连接类型\n\ndmesg | grep -i input\n\n\n\n# 音频编解码器\n\naplay -l\n\n\n\n# 网络控制器型号\n\nBasic info:\n\nlspci | grep -i network\n\n\nMore in-depth info:\n\nlshw -class network\n\n\n\n# 硬盘型号\n\nlshw -class disk -class storage\n\n\n\n# 使用OCSysInfo查找硬件\n\n有两种获取和运行OCSysInfo的方法:\n\n * 预编译二进制文件\n * 手动克隆 存储库\n\n:::TIP 我们建议您下载二进制文件，因为这是最简单的方法。\n\n如果您想了解关于手动克隆存储库的更多信息，可以查看OCSysInfo迷你指南. :::\n\n\n# 发现硬件\n\n:::WARING 笔记本电脑用户:在我们开始之前，我们建议您断开任何外部USB设备，因为这可能会导致收集的模棱两可或不必要的信息，可能会使您感到困惑。 :::\n\n成功安装并运行应用程序后，你应该看到如下界面:\n\n\n\n在这里，你可以输入d并按ENTER/RETURN，然后，你应该会看到一个类似的界面:\n\n\n\n\n# CPU 型号\n\n\n\n除了CPU型号，它还列出了CPU的代号、支持的最高SSE版本和SSSE3可用性。\n\n\n# GPU 型号\n\n\n\n在这种情况下,机器有两个gpu:\n\n * iGPU (Intel UHD Graphics 630)\n * dGPU (AMD Radeon R9 390X)\n\n除了模型名称，它还列出了gpu的代码，ACPI和PCI路径，随着你在hackintosh之旅的进展，你可能很快就会发现这些代码很有用。\n\n\n# 键盘和触摸板连接类型\n\nSMBus触摸板\n\n触摸板: SMBus\n键盘: PS/2\n\n图片来源:ThatCopy\n\nI2C触摸板\n\n触摸板: I2C\n键盘: PS/2\n\n图片来源:Mahas\n\nPS/2触摸板\n\n触摸板: PS/2\n键盘: PS/2\n\n图片来源:Tasty0\n\n\n# 音频编解码器\n\n\n\n\n# 网络控制器型号\n\n\n\n\n# 硬盘型号\n\n',normalizedContent:'# 查找你的硬件\n\n本节主要是一个关于如何找到当前运行的硬件的迷你指南;这主要与笔记本电脑和预构建用户有关，因为硬件规格有点难以获得。如果你已经知道你有什么硬件，你可以跳过这一页，转到创建usb.\n\n假设你已经安装了windows或linux:\n\n\n\n * 使用windows查找硬件\n   * cpu 型号\n   * gpu 型号\n   * 芯片组 型号\n   * 键盘、触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 硬盘型号\n * 使用linux查找硬件\n   * cpu 型号\n   * gpu 型号\n   * 芯片组 型号\n   * 键盘，触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 硬盘型号\n * 使用ocsysinfo查找硬件\n   * 发现硬件\n   * cpu 型号\n   * gpu 型号\n   * 键盘和触摸板连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 硬盘型号\n\n\n\n\n# 使用windows查找硬件\n\n我们主要有两个选择:\n\n * windows内置的设备管理器\n * aida64\n\n由于使用gui更容易，我们建议下载aida64并运行它，因为它更容易获取规格。然而我们将向你展示这两种方法获取的硬件规格。\n\n\n# cpu 型号\n\naida64   设备管理器\n         \n\n\n# gpu 型号\n\naida64   设备管理器\n         \n\n\n# 芯片组 型号\n\naida64   设备管理器\n         \n\n * 注意:英特尔基于soc的cpu将在同一个芯片上拥有芯片组和其他功能，而不是专用芯片。这意味着试图检测准确的芯片组有点困难\n\n\n# 键盘、触控板和触摸屏连接类型\n\n设备管理器\n\n\n不幸的是，aida64没有提供任何关于指针设备的有用信息，因此我们建议使用devicemanager。\n\n * 你可以找到以下这些设备:\n   \n   * 人机界面设备\n   * 键盘\n   * 鼠标和其他指针设备\n\n * 要查看设备的确切连接类型，请选择指针设备，然后输入view -> device by connection。这将明确它是否通过ps2, i2c, smbus, usb等\n\n根据设备的不同，它可能会在多个名称和连接下显示。主要需要关注的是:\n\nsmbus\n\n这些将显示为直接pci设备，如 synaptics smbus driver 或 elan smbus driver\n\n * 触摸设备将显示在ps2下的synaptics ps2 device/synaptics pointing device 和 pci的 synaptics smbus driver\n\n\n\n正如你所看到的，我们在左边的图像中有两个synaptics设备，但是如果我们仔细看，我们会看到顶部的设备是ps2，而底部的是smbus。虽然你可以在任何一种模式下使用触控板，但smbus通常提供更好的手势支持和准确性。\n\nusb\n\ndevice by type   device by connection\n                 \n\n当我们将连接视图切换到按连接设备时，这些会显示为“ps2兼容的触摸板”，在usb下也会显示为按连接设备\n\ni2c\n\n它们几乎总是以微软的hid设备的形式显示，不过也可以以其他触控板的形式显示。但它们总是在i2c下显示。\n\n\n# 音频编解码器\n\naida64   设备管理器\n         \n\n由于某些oem呈现设备名称的方式，您可以通过devicemanager获得的最准确的信息是通过pci id(例如pci 14f1,50f4)。这意味着您需要谷歌id并计算出确切的设备id，然而aida64可以正确地显示名称，这对终端用户来说更容易。\n\n\n# 网络控制器型号\n\naida64   设备管理器\n         \n\n由于某些oem提供设备名称的方式，您可以通过设备管理器获得的最准确信息是pci id(例如 pci\\ven_14e4&dev_43a0 对应于供应商id为 14e4 和设备id为 43a0). 这意味着你需要谷歌id并弄清楚确切的设备id;但是，aida64可以正确地显示名称，这要容易得多。\n\n\n# 硬盘型号\n\naida64   设备管理器\n         \n\n由于oem没有提供关于驱动器的很多细节，您将需要谷歌来确定驱动器匹配显示的名称。\n\n\n# 使用linux查找硬件\n\n使用linux查找硬件,我们将使用一些工具:\n\n * pciutils\n * dmidecode\n\n下面是要在终端上运行的命令列表，幸运的是，大多数linux发行版都已经安装了这些工具。如果没有，您可能会在您的发行版的包管理器中找到它们。\n\n\n# cpu 型号\n\ngrep -i "model name" /proc/cpuinfo\n\n\n\n# gpu 型号\n\nlspci | grep -i --color "vga\\|3d\\|2d"\n\n\n\n# 芯片组 型号\n\ndmidecode -t baseboard\n\n\n\n# 键盘，触控板和触摸屏连接类型\n\ndmesg | grep -i input\n\n\n\n# 音频编解码器\n\naplay -l\n\n\n\n# 网络控制器型号\n\nbasic info:\n\nlspci | grep -i network\n\n\nmore in-depth info:\n\nlshw -class network\n\n\n\n# 硬盘型号\n\nlshw -class disk -class storage\n\n\n\n# 使用ocsysinfo查找硬件\n\n有两种获取和运行ocsysinfo的方法:\n\n * 预编译二进制文件\n * 手动克隆 存储库\n\n:::tip 我们建议您下载二进制文件，因为这是最简单的方法。\n\n如果您想了解关于手动克隆存储库的更多信息，可以查看ocsysinfo迷你指南. :::\n\n\n# 发现硬件\n\n:::waring 笔记本电脑用户:在我们开始之前，我们建议您断开任何外部usb设备，因为这可能会导致收集的模棱两可或不必要的信息，可能会使您感到困惑。 :::\n\n成功安装并运行应用程序后，你应该看到如下界面:\n\n\n\n在这里，你可以输入d并按enter/return，然后，你应该会看到一个类似的界面:\n\n\n\n\n# cpu 型号\n\n\n\n除了cpu型号，它还列出了cpu的代号、支持的最高sse版本和ssse3可用性。\n\n\n# gpu 型号\n\n\n\n在这种情况下,机器有两个gpu:\n\n * igpu (intel uhd graphics 630)\n * dgpu (amd radeon r9 390x)\n\n除了模型名称，它还列出了gpu的代码，acpi和pci路径，随着你在hackintosh之旅的进展，你可能很快就会发现这些代码很有用。\n\n\n# 键盘和触摸板连接类型\n\nsmbus触摸板\n\n触摸板: smbus\n键盘: ps/2\n\n图片来源:thatcopy\n\ni2c触摸板\n\n触摸板: i2c\n键盘: ps/2\n\n图片来源:mahas\n\nps/2触摸板\n\n触摸板: ps/2\n键盘: ps/2\n\n图片来源:tasty0\n\n\n# 音频编解码器\n\n\n\n\n# 网络控制器型号\n\n\n\n\n# 硬盘型号\n\n',charsets:{cjk:!0}},{title:"安装过程",frontmatter:{},regularPath:"/installation/installation-process.html",relativePath:"installation/installation-process.md",key:"v-4b67d32d",path:"/installation/installation-process.html",headers:[{level:2,title:"再次检查你的准备工作",slug:"再次检查你的准备工作",normalizedTitle:"再次检查你的准备工作",charIndex:205},{level:2,title:"在 USB 上启动 OpenCore",slug:"在-usb-上启动-opencore",normalizedTitle:"在 usb 上启动 opencore",charIndex:633},{level:2,title:"macOS 安装程序",slug:"macos-安装程序",normalizedTitle:"macos 安装程序",charIndex:1145}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"再次检查你的准备工作 在 USB 上启动 OpenCore macOS 安装程序",content:'# 安装过程\n\n现在你已经完成了OpenCore的设置，你终于能够启动，需要记住的主要事情:\n\n * 为macOS启用最佳BIOS设置\n * 阅读 OpenCore 多引导指南 以及 设置启动选项\n   * 主要适用于那些在单个驱动器上运行的多个操作系统人\n * 和通用故障诊断 页面\n * 阅读macOS引导过程\n   * 可以帮助第一次安装的用户更好地了解他们可能在哪里卡住\n * 以及大量的耐心\n\n\n# 再次检查你的准备工作\n\n在启动之前，我们应该检查的最后一件事是你的EFI是如何设置的:\n\n好的 EFI                     坏的 EFI\n                           \nEFI文件夹在EFI分区上              EFI文件夹不见了\n已编译ACPI文件(.aml)            未编译ACPI文件(.dsl)\n不包括DSDT                    * DSDT包括在内\n删除不需要的驱动程序(.efi)           保留默认驱动程序\n删除不需要的工具(.efi)             保留默认工具\nkext文件夹中的所有文件都以 .kext 结尾   包括源代码和文件夹\nconfig.plist 在 EFI/OC 内    既没有重命名也没有将.plist放在正确的位置\n只使用需要的kext                 下载了每一个列出的kext\n\n\n# 在 USB 上启动 OpenCore\n\n现在你终于准备好把u盘插入电脑并启动了。请记住，大多数笔记本电脑和一些台式机仍然会默认使用Windows内部驱动器，你需要在BIOS启动选项中手动选择OpenCore。您需要查看用户手册或使用谷歌来找出如何访问BIOS和启动菜单(例如：Esc、F2 F10或F12)\n\n启动USB后，你可能会看到以下启动选项:\n\n 1. Windows\n 2. macOS Base System (External) / Install macOS Big Sur (External) / u盘名称 (External)\n 3. OpenShell.efi\n 4. Reset NVRAM\n\nWARNING\n\n你可能需要按空格键才能看到安装程序，因为在OpenCore的后续版本中默认启用了HideAuxiliary。\n\n对我们来说, 选项 2. 就是我们想要的。根据安装程序的制作方式，它可能显示为 "macOS Base System (External)", "Install macOS Big Sur (External)" 或 "你的USB驱动器名称 (External)"\n\n\n# macOS 安装程序\n\n因此，您终于启动了安装程序，完成了冗长的操作并点击安装程序!现在你已经走到了这一步，需要记住的主要事情是:\n\n * 你希望安装macOS的驱动 必须 同时是 GUID分区模式 和 APFS\n   * 硬盘上的High Sierra，所有Sierra用户都需要使用macOS Journaled(HFS+)\n * 驱动器 必须 有一个200MB的分区\n   * 默认情况下，macOS将设置新格式化的驱动器为200MB\n   * 参见 多引导指南 了解更多关于分区Windows驱动器的信息\n\n开始安装后，需要等待系统重新启动。您将再次选择引导到OpenCore，但不是选择USB installer/recovery-您将选择硬盘上的macOS安装程序以继续安装。你会看到一个苹果的logo，几分钟后你会看到底部有一个计时器，上面写着“还剩x分钟”。这可能是喝饮料或吃零食的好时机，因为这需要一段时间。它可能会重新启动几次，但如果一切顺利，它最终会把你带到“设置你的Mac”界面。\n\n你成功了! 🎉 您需要浏览安装后的页面来完成系统的设置',normalizedContent:'# 安装过程\n\n现在你已经完成了opencore的设置，你终于能够启动，需要记住的主要事情:\n\n * 为macos启用最佳bios设置\n * 阅读 opencore 多引导指南 以及 设置启动选项\n   * 主要适用于那些在单个驱动器上运行的多个操作系统人\n * 和通用故障诊断 页面\n * 阅读macos引导过程\n   * 可以帮助第一次安装的用户更好地了解他们可能在哪里卡住\n * 以及大量的耐心\n\n\n# 再次检查你的准备工作\n\n在启动之前，我们应该检查的最后一件事是你的efi是如何设置的:\n\n好的 efi                     坏的 efi\n                           \nefi文件夹在efi分区上              efi文件夹不见了\n已编译acpi文件(.aml)            未编译acpi文件(.dsl)\n不包括dsdt                    * dsdt包括在内\n删除不需要的驱动程序(.efi)           保留默认驱动程序\n删除不需要的工具(.efi)             保留默认工具\nkext文件夹中的所有文件都以 .kext 结尾   包括源代码和文件夹\nconfig.plist 在 efi/oc 内    既没有重命名也没有将.plist放在正确的位置\n只使用需要的kext                 下载了每一个列出的kext\n\n\n# 在 usb 上启动 opencore\n\n现在你终于准备好把u盘插入电脑并启动了。请记住，大多数笔记本电脑和一些台式机仍然会默认使用windows内部驱动器，你需要在bios启动选项中手动选择opencore。您需要查看用户手册或使用谷歌来找出如何访问bios和启动菜单(例如：esc、f2 f10或f12)\n\n启动usb后，你可能会看到以下启动选项:\n\n 1. windows\n 2. macos base system (external) / install macos big sur (external) / u盘名称 (external)\n 3. openshell.efi\n 4. reset nvram\n\nwarning\n\n你可能需要按空格键才能看到安装程序，因为在opencore的后续版本中默认启用了hideauxiliary。\n\n对我们来说, 选项 2. 就是我们想要的。根据安装程序的制作方式，它可能显示为 "macos base system (external)", "install macos big sur (external)" 或 "你的usb驱动器名称 (external)"\n\n\n# macos 安装程序\n\n因此，您终于启动了安装程序，完成了冗长的操作并点击安装程序!现在你已经走到了这一步，需要记住的主要事情是:\n\n * 你希望安装macos的驱动 必须 同时是 guid分区模式 和 apfs\n   * 硬盘上的high sierra，所有sierra用户都需要使用macos journaled(hfs+)\n * 驱动器 必须 有一个200mb的分区\n   * 默认情况下，macos将设置新格式化的驱动器为200mb\n   * 参见 多引导指南 了解更多关于分区windows驱动器的信息\n\n开始安装后，需要等待系统重新启动。您将再次选择引导到opencore，但不是选择usb installer/recovery-您将选择硬盘上的macos安装程序以继续安装。你会看到一个苹果的logo，几分钟后你会看到底部有一个计时器，上面写着“还剩x分钟”。这可能是喝饮料或吃零食的好时机，因为这需要一段时间。它可能会重新启动几次，但如果一切顺利，它最终会把你带到“设置你的mac”界面。\n\n你成功了! 🎉 您需要浏览安装后的页面来完成系统的设置',charsets:{cjk:!0}},{title:"制作引导U盘",frontmatter:{},regularPath:"/installer-guide/",relativePath:"installer-guide/README.md",key:"v-a0034d84",path:"/installer-guide/",headers:[{level:3,title:"在线与离线安装程序",slug:"在线与离线安装程序",normalizedTitle:"在线与离线安装程序",charIndex:226},{level:3,title:"制作安装程序",slug:"制作安装程序",normalizedTitle:"制作安装程序",charIndex:444}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"在线与离线安装程序 制作安装程序",content:"# 制作引导U盘\n\n要求:\n\n * OpenCorePkg, 强烈建议运行测试版本来显示更多的测试信息\n * ProperTree 编辑.plist文件(OpenCore Configurator是另一个工具，但已经严重过时，Mackie版本以腐败而闻名。请尽量避免使用这些工具!)\n * 如果您希望使用OpenCore作为主引导加载程序，则必须从系统中完全删除Clover。保留一个基于三叶草的EFI备份。请看这里需要清洁的东西:三叶草转换\n\n\n# 在线与离线安装程序\n\n离线安装程序有一个完整的macOS副本，而在线安装程序只有一个恢复映像(~500MB)，一旦启动就从苹果服务器下载macOS。\n\n * 离线\n   * 只能在macOS中制作\n   * Windows/Linux没有安装完整安装程序所需的APFS/HFS驱动程序\n * 在线\n   * 可以在macOS/Linux/Windows中制作\n   * 需要通过目标机器上支持macOS的网络适配器来连接互联网\n\n\n# 制作安装程序\n\n根据你使用的操作系统，请参阅有关制作USB引导的章节:\n\n * macOS 用户\n   * 支持OS x10.4到当前\n   * 支持传统和UEFI安装\n * Windows 用户\n   * 支持OS X 10.7到当前\n   * 仅限在线安装程序\n   * 支持传统和UEFI安装\n * Linux 用户(UEFI)\n   * 支持OS X 10.7到当前 *仅限在线安装程序 *适用于支持UEFI 启动的机器",normalizedContent:"# 制作引导u盘\n\n要求:\n\n * opencorepkg, 强烈建议运行测试版本来显示更多的测试信息\n * propertree 编辑.plist文件(opencore configurator是另一个工具，但已经严重过时，mackie版本以腐败而闻名。请尽量避免使用这些工具!)\n * 如果您希望使用opencore作为主引导加载程序，则必须从系统中完全删除clover。保留一个基于三叶草的efi备份。请看这里需要清洁的东西:三叶草转换\n\n\n# 在线与离线安装程序\n\n离线安装程序有一个完整的macos副本，而在线安装程序只有一个恢复映像(~500mb)，一旦启动就从苹果服务器下载macos。\n\n * 离线\n   * 只能在macos中制作\n   * windows/linux没有安装完整安装程序所需的apfs/hfs驱动程序\n * 在线\n   * 可以在macos/linux/windows中制作\n   * 需要通过目标机器上支持macos的网络适配器来连接互联网\n\n\n# 制作安装程序\n\n根据你使用的操作系统，请参阅有关制作usb引导的章节:\n\n * macos 用户\n   * 支持os x10.4到当前\n   * 支持传统和uefi安装\n * windows 用户\n   * 支持os x 10.7到当前\n   * 仅限在线安装程序\n   * 支持传统和uefi安装\n * linux 用户(uefi)\n   * 支持os x 10.7到当前 *仅限在线安装程序 *适用于支持uefi 启动的机器",charsets:{cjk:!0}},{title:"抓取旧版本的macOS/OS X",frontmatter:{},regularPath:"/installer-guide/legacy-mac-install.html",relativePath:"installer-guide/legacy-mac-install.md",key:"v-1d1cd917",path:"/installer-guide/legacy-mac-install.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# 抓取旧版本的macOS/OS X\n\n此页已弃用，请参阅旧版macOS安装程序的相应安装页面",normalizedContent:"# 抓取旧版本的macos/os x\n\n此页已弃用，请参阅旧版macos安装程序的相应安装页面",charsets:{cjk:!0}},{title:"在 Linux 中制作安装程序",frontmatter:{},regularPath:"/installer-guide/linux-install.html",relativePath:"installer-guide/linux-install.md",key:"v-094f9f8d",path:"/installer-guide/linux-install.html",headers:[{level:2,title:"下载macOS",slug:"下载macos",normalizedTitle:"下载macos",charIndex:118},{level:2,title:"制作安装程序",slug:"制作安装程序",normalizedTitle:"制作安装程序",charIndex:11},{level:3,title:"方法 1",slug:"方法-1",normalizedTitle:"方法 1",charIndex:2228},{level:3,title:"方法 2 (在情况1无效的情况下)",slug:"方法-2-在情况1无效的情况下",normalizedTitle:"方法 2 (在情况1无效的情况下)",charIndex:3196},{level:2,title:"现在所有这些都完成了，前往设置EFI 来完成你的工作",slug:"现在所有这些都完成了-前往设置efi-来完成你的工作",normalizedTitle:"现在所有这些都完成了，前往设置efi 来完成你的工作",charIndex:4562}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"下载macOS 制作安装程序 方法 1 方法 2 (在情况1无效的情况下) 现在所有这些都完成了，前往设置EFI 来完成你的工作",content:'# 在 Linux 中制作安装程序\n\n虽然你不需要重新安装macOS来使用OpenCore，但一些用户更喜欢使用全新的引导管理器升级。\n\n开始之前，你需要准备以下内容:\n\n * 4GB U盘\n * macrecovery.py\n\n\n# 下载macOS\n\n现在开始，首先 cd 到macrecovery 的文件夹 并运行以下命令之一:\n\n\n\n# Adjust below command to the correct folder\ncd ~/Downloads/OpenCore-0/Utilities/macrecovery/\n\n\n接下来，根据要启动的操作系统运行以下命令之一:\n\n# Lion (10.7):\npython3 ./macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 ./macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 ./macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 ./macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 ./macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 ./macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 ./macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 ./macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 ./macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 ./macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 ./macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# Latest version\n# ie. Ventura (13)\npython3 ./macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n现在，在终端中运行其中一个命令，完成后你将得到类似于下面的输出:\n\n\n\n * 注意: 根据操作系统的不同，您将获得 BaseSystem 或 RecoveryImage 文件。它们以相同的方式工作，所以当我们引用 BaseSystem 时，相同的信息适用于 RecoveryImage\n\n * macOS 12及以上版本注意: 由于最新macOS版本引入了USB堆栈的更改，在安装macOS之前，强烈建议您映射USB端口(使用USBToolBox)。\n   \n   * 注意: 在macOS 11.3及更新版本中，XhciPortLimit被破坏导致启动循环.\n     * 如果你已经映射了你的USB端口 并且禁用了 XhciPortLimit ，那么你可以正常启动macOS 11.3+。\n\n\n# 制作安装程序\n\n本节的目标是在USB设备中创建必要的分区。你可以使用你最喜欢的程序，比如gdisk fdisk parted gparted 或 gnome-disks。本指南将重点介绍 gdisk ，因为它很好，可以在稍后更改分区类型，因为我们需要它来引导 macOS Recovery HD。(这里使用的发行版是Ubuntu 18.04，其他版本或发行版也可以)\n\n感谢 midi1996 为 Internet安装指南 所做的工作。\n\n\n# 方法 1\n\n在终端:\n\n 1. 运行 lsblk 并确定你的USB设备块\n 2. 运行 sudo gdisk /dev/<你的USB块>\n    1. 如果您被问及使用什么分区表，选择GPT。\n    2. 发送 p 来打印你的区块的分区(并验证它是否是需要的分区)\n    3. 发送 o 来清除分区表，并创建一个新的GPT表(如果不是空的)\n       1. 用 y 确认\n    4. 发送 n\n       1. partition number: 默认为空\n       2. first sector: 默认为空\n       3. last sector: 整个磁盘保持空白\n       4. Hex code or GUID: 0700 用于Microsoft基本数据分区类型\n    5. 发送 w\n       * 用 y 确认\n       * 在某些情况下需要重启电脑，但如果你想确定的话，很少会重启电脑。你也可以尝试重新插入你的u盘。\n    6. 通过发送 q 来关闭 gdisk (通常它应该自己退出)\n 3. 使用 lsblk 来确定分区的标识符\n 4. 运行 sudo mkfs.vfat -F 32 -n "OPENCORE" /dev/<你的USB分区块> 格式化USB到FAT32并命名为OPENCORE\n 5. 然后 cd 到 /OpenCore/Utilities/macrecovery/ 你应该得到一个 .dmg 和 .chunklist 文件\n    1. 挂载您的USB分区 udisksctl (udisksctl mount -b /dev/<你的USB分区块>, 在大多数情况下不需要sudo) 或者 mount (sudo mount /dev/<你的USB分区块> /where/your/mount/stuff, sudo是必需的)\n    2. cd 到你的USB驱动器和 mkdir com.apple.recovery.boot 在FAT32 USB分区的根目录下\n    3. 现在 cp 或者 rsync 将 BaseSystem.dmg 和 BaseSystem.chunklist 放入 com.apple.recovery.boot 文件夹.\n\n\n# 方法 2 (在情况1无效的情况下)\n\n在终端:\n\n 1. 运行 lsblk 并确定您的USB设备块\n 2. 运行 sudo gdisk /dev/<你的USB块>\n    1. 如果询问使用什么分区表，选择GPT。\n    2. 发送 p 来打印你的区块的分区(并验证它是否是需要的分区)\n    3. 发送 o 来清除分区表，并创建一个新的GPT表(如果不是空的)\n       1. 用 y 确认\n    4. 发送 n\n       1. partition number: 默认为空\n       2. first sector: 默认为空\n       3. last sector:+200M来创建一个200MB的分区，稍后将在OPENCORE上命名\n       4. Hex code or GUID: 0700 用于Microsoft基本数据分区类型\n    5. 发送 n\n       1. partition number: 默认为空\n       2. first sector: 默认为空\n       3. last sector: 保持默认 (或者如果你想进一步划分USB的其余部分，可以将其设为“+3G”)\n       4. Hex code or GUID: af00 为苹果HFS/HFS+分区类型\n    6. 发送 w\n       * 用 y 确认\n       * 在某些情况下需要重启电脑，但如果你想确定的话，很少会重启电脑。你也可以尝试重新插入你的u盘。\n    7. 通过发送 q 来关闭 gdisk (通常它应该自己退出)\n 3. 再次使用 lsblk 来确定200MB驱动器和其他分区\n 4. 运行 sudo mkfs.vfat -F 32 -n "OPENCORE" /dev/<你的 200MB 分区块> 将200MB分区格式化为FAT32，命名为OPENCORE\n 5. 然后 cd 到 /OpenCore/Utilities/macrecovery/ 你应该得到一个 .dmg 和 .chunklist 文件\n    1. 挂载你的USB分区 udisksctl (udisksctl mount -b /dev/<你的 200MB 分区块>, 大多数情况下不需要sudo) 或用 mount (sudo mount /dev/<你的 200MB 分区块> /where/your/mount/stuff, sudo是必需的)\n    2. cd 到你的U盘和 mkdir com.apple.recovery.boot 在你的FAT32 USB分区根\n    3. 下载 dmg2img (在大多数发行版上可用)\n    4. 运行 dmg2img -l BaseSystem.dmg 并确定哪个分区具有 disk image 属性\n    5. 运行 sudo dmg2img -p <the partition number> BaseSystem.dmg /dev/<你的 3GB+ 分区块> 来提取恢复映像并将其写入分区磁盘\n       * 这需要一些时间。如果你用的是速度较慢的USB(我用一个速度较快的USB2.0驱动器只花了不到5分钟)。\n\n\n# 现在所有这些都完成了，前往设置EFI 来完成你的工作',normalizedContent:'# 在 linux 中制作安装程序\n\n虽然你不需要重新安装macos来使用opencore，但一些用户更喜欢使用全新的引导管理器升级。\n\n开始之前，你需要准备以下内容:\n\n * 4gb u盘\n * macrecovery.py\n\n\n# 下载macos\n\n现在开始，首先 cd 到macrecovery 的文件夹 并运行以下命令之一:\n\n\n\n# adjust below command to the correct folder\ncd ~/downloads/opencore-0/utilities/macrecovery/\n\n\n接下来，根据要启动的操作系统运行以下命令之一:\n\n# lion (10.7):\npython3 ./macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 ./macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 ./macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 ./macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 ./macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 ./macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 ./macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 ./macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 ./macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 ./macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 ./macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# latest version\n# ie. ventura (13)\npython3 ./macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n现在，在终端中运行其中一个命令，完成后你将得到类似于下面的输出:\n\n\n\n * 注意: 根据操作系统的不同，您将获得 basesystem 或 recoveryimage 文件。它们以相同的方式工作，所以当我们引用 basesystem 时，相同的信息适用于 recoveryimage\n\n * macos 12及以上版本注意: 由于最新macos版本引入了usb堆栈的更改，在安装macos之前，强烈建议您映射usb端口(使用usbtoolbox)。\n   \n   * 注意: 在macos 11.3及更新版本中，xhciportlimit被破坏导致启动循环.\n     * 如果你已经映射了你的usb端口 并且禁用了 xhciportlimit ，那么你可以正常启动macos 11.3+。\n\n\n# 制作安装程序\n\n本节的目标是在usb设备中创建必要的分区。你可以使用你最喜欢的程序，比如gdisk fdisk parted gparted 或 gnome-disks。本指南将重点介绍 gdisk ，因为它很好，可以在稍后更改分区类型，因为我们需要它来引导 macos recovery hd。(这里使用的发行版是ubuntu 18.04，其他版本或发行版也可以)\n\n感谢 midi1996 为 internet安装指南 所做的工作。\n\n\n# 方法 1\n\n在终端:\n\n 1. 运行 lsblk 并确定你的usb设备块\n 2. 运行 sudo gdisk /dev/<你的usb块>\n    1. 如果您被问及使用什么分区表，选择gpt。\n    2. 发送 p 来打印你的区块的分区(并验证它是否是需要的分区)\n    3. 发送 o 来清除分区表，并创建一个新的gpt表(如果不是空的)\n       1. 用 y 确认\n    4. 发送 n\n       1. partition number: 默认为空\n       2. first sector: 默认为空\n       3. last sector: 整个磁盘保持空白\n       4. hex code or guid: 0700 用于microsoft基本数据分区类型\n    5. 发送 w\n       * 用 y 确认\n       * 在某些情况下需要重启电脑，但如果你想确定的话，很少会重启电脑。你也可以尝试重新插入你的u盘。\n    6. 通过发送 q 来关闭 gdisk (通常它应该自己退出)\n 3. 使用 lsblk 来确定分区的标识符\n 4. 运行 sudo mkfs.vfat -f 32 -n "opencore" /dev/<你的usb分区块> 格式化usb到fat32并命名为opencore\n 5. 然后 cd 到 /opencore/utilities/macrecovery/ 你应该得到一个 .dmg 和 .chunklist 文件\n    1. 挂载您的usb分区 udisksctl (udisksctl mount -b /dev/<你的usb分区块>, 在大多数情况下不需要sudo) 或者 mount (sudo mount /dev/<你的usb分区块> /where/your/mount/stuff, sudo是必需的)\n    2. cd 到你的usb驱动器和 mkdir com.apple.recovery.boot 在fat32 usb分区的根目录下\n    3. 现在 cp 或者 rsync 将 basesystem.dmg 和 basesystem.chunklist 放入 com.apple.recovery.boot 文件夹.\n\n\n# 方法 2 (在情况1无效的情况下)\n\n在终端:\n\n 1. 运行 lsblk 并确定您的usb设备块\n 2. 运行 sudo gdisk /dev/<你的usb块>\n    1. 如果询问使用什么分区表，选择gpt。\n    2. 发送 p 来打印你的区块的分区(并验证它是否是需要的分区)\n    3. 发送 o 来清除分区表，并创建一个新的gpt表(如果不是空的)\n       1. 用 y 确认\n    4. 发送 n\n       1. partition number: 默认为空\n       2. first sector: 默认为空\n       3. last sector:+200m来创建一个200mb的分区，稍后将在opencore上命名\n       4. hex code or guid: 0700 用于microsoft基本数据分区类型\n    5. 发送 n\n       1. partition number: 默认为空\n       2. first sector: 默认为空\n       3. last sector: 保持默认 (或者如果你想进一步划分usb的其余部分，可以将其设为“+3g”)\n       4. hex code or guid: af00 为苹果hfs/hfs+分区类型\n    6. 发送 w\n       * 用 y 确认\n       * 在某些情况下需要重启电脑，但如果你想确定的话，很少会重启电脑。你也可以尝试重新插入你的u盘。\n    7. 通过发送 q 来关闭 gdisk (通常它应该自己退出)\n 3. 再次使用 lsblk 来确定200mb驱动器和其他分区\n 4. 运行 sudo mkfs.vfat -f 32 -n "opencore" /dev/<你的 200mb 分区块> 将200mb分区格式化为fat32，命名为opencore\n 5. 然后 cd 到 /opencore/utilities/macrecovery/ 你应该得到一个 .dmg 和 .chunklist 文件\n    1. 挂载你的usb分区 udisksctl (udisksctl mount -b /dev/<你的 200mb 分区块>, 大多数情况下不需要sudo) 或用 mount (sudo mount /dev/<你的 200mb 分区块> /where/your/mount/stuff, sudo是必需的)\n    2. cd 到你的u盘和 mkdir com.apple.recovery.boot 在你的fat32 usb分区根\n    3. 下载 dmg2img (在大多数发行版上可用)\n    4. 运行 dmg2img -l basesystem.dmg 并确定哪个分区具有 disk image 属性\n    5. 运行 sudo dmg2img -p <the partition number> basesystem.dmg /dev/<你的 3gb+ 分区块> 来提取恢复映像并将其写入分区磁盘\n       * 这需要一些时间。如果你用的是速度较慢的usb(我用一个速度较快的usb2.0驱动器只花了不到5分钟)。\n\n\n# 现在所有这些都完成了，前往设置efi 来完成你的工作',charsets:{cjk:!0}},{title:"Legacy macOS: Disk Images",frontmatter:{},regularPath:"/installer-guide/mac-install-dmg.html",relativePath:"installer-guide/mac-install-dmg.md",key:"v-3720f90d",path:"/installer-guide/mac-install-dmg.html",headers:[{level:3,title:"Restoring the drive",slug:"restoring-the-drive",normalizedTitle:"restoring the drive",charIndex:600},{level:3,title:"Once you're finished, you can head to Setting up OpenCore's EFI environment",slug:"once-you-re-finished-you-can-head-to-setting-up-opencore-s-efi-environment",normalizedTitle:"once you're finished, you can head to setting up opencore's efi environment",charIndex:1403},{level:3,title:"Once you're finished, you can head to Setting up OpenCore's EFI environment",slug:"once-you-re-finished-you-can-head-to-setting-up-opencore-s-efi-environment-2",normalizedTitle:"once you're finished, you can head to setting up opencore's efi environment",charIndex:1403}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Restoring the drive Once you're finished, you can head to Setting up OpenCore's EFI environment Once you're finished, you can head to Setting up OpenCore's EFI environment",content:"# Legacy macOS: Disk Images\n\nThis method instead relies on hosted images either from Apple or Acidanthera, and restoring onto your drive.\n\n# Acidanthera Images\n\nThe below installers were pulled from genuine Mac restore disks with their SMBIOS lock removed, contents of OS X itself have not been modified in any way.\n\n * OS X 10.4.10(8R4088)MEGA Mirror\n\n * OS X 10.5.7(9J3050)MEGA Mirror\n\n * OS X 10.6.7(10J4139)MEGA Mirror\n\n# Apple Images\n\nNote that these images require you to have an Apple Developer account to access.\n\n * OS X 10.5.0 Golden Master(9a581)\n\n * OS X 10.6.0 Golden Master(10a432)\n\n\n# Restoring the drive\n\nNow comes the fun part, you'll first want to open the dmg you just downloaded and have it mounted. Now open Disk Utility and format your drive as macOS Extended(HFS+) with a GUID partition map:\n\n\n\nNext we have 2 options to follow:\n\n * ASR Restore(Apple Software Restore)\n   * Terminal based, works with SIP enabled\n * Disk Utility Restore\n   * May require SIP disabled in newer OSes\n\n# ASR\n\nHere you'll simply want to open terminal and run the following:\n\nsudo asr restore -source /Volumes/Mac\\ OS\\ X\\ Install\\ DVD  -target /Volumes/MyVolume -erase -noverify\n\n\n * Note: This may not align with your setup, please change accordingly:\n   * Change /Volumes/Mac\\ OS\\ X\\ Install\\ DVD to what your mounted Disk Image is called\n   * Change /Volumes/MyVolume to what your USB is called\n\n\n# Once you're finished, you can head to Setting up OpenCore's EFI environment\n\n# Disk Utility\n\nDue to some pesky issues with Disk Utility, many restores can fail if SIP is enabled. If you have issues we recommend either using the ASR Method or disable SIP.\n\nTo start, open Disk Utility and you should see both your USB drive and the Disk Image in the sidebar. From here, select restore\n\n\n\nTroubleshooting\n\nIf you get an error such as this one during restore:\n\n\n\nThis likely means SIP needs to be disabled, however we recommend using ASR Method instead.\n\n\n# Once you're finished, you can head to Setting up OpenCore's EFI environment",normalizedContent:"# legacy macos: disk images\n\nthis method instead relies on hosted images either from apple or acidanthera, and restoring onto your drive.\n\n# acidanthera images\n\nthe below installers were pulled from genuine mac restore disks with their smbios lock removed, contents of os x itself have not been modified in any way.\n\n * os x 10.4.10(8r4088)mega mirror\n\n * os x 10.5.7(9j3050)mega mirror\n\n * os x 10.6.7(10j4139)mega mirror\n\n# apple images\n\nnote that these images require you to have an apple developer account to access.\n\n * os x 10.5.0 golden master(9a581)\n\n * os x 10.6.0 golden master(10a432)\n\n\n# restoring the drive\n\nnow comes the fun part, you'll first want to open the dmg you just downloaded and have it mounted. now open disk utility and format your drive as macos extended(hfs+) with a guid partition map:\n\n\n\nnext we have 2 options to follow:\n\n * asr restore(apple software restore)\n   * terminal based, works with sip enabled\n * disk utility restore\n   * may require sip disabled in newer oses\n\n# asr\n\nhere you'll simply want to open terminal and run the following:\n\nsudo asr restore -source /volumes/mac\\ os\\ x\\ install\\ dvd  -target /volumes/myvolume -erase -noverify\n\n\n * note: this may not align with your setup, please change accordingly:\n   * change /volumes/mac\\ os\\ x\\ install\\ dvd to what your mounted disk image is called\n   * change /volumes/myvolume to what your usb is called\n\n\n# once you're finished, you can head to setting up opencore's efi environment\n\n# disk utility\n\ndue to some pesky issues with disk utility, many restores can fail if sip is enabled. if you have issues we recommend either using the asr method or disable sip.\n\nto start, open disk utility and you should see both your usb drive and the disk image in the sidebar. from here, select restore\n\n\n\ntroubleshooting\n\nif you get an error such as this one during restore:\n\n\n\nthis likely means sip needs to be disabled, however we recommend using asr method instead.\n\n\n# once you're finished, you can head to setting up opencore's efi environment",charsets:{}},{title:"Legacy macOS: Offline Method",frontmatter:{},regularPath:"/installer-guide/mac-install-pkg.html",relativePath:"installer-guide/mac-install-pkg.md",key:"v-5c2963cd",path:"/installer-guide/mac-install-pkg.html",headers:[{level:3,title:"Extracting the Installer",slug:"extracting-the-installer",normalizedTitle:"extracting the installer",charIndex:1010},{level:3,title:"Once you're finished, you can head to Setting up the installer",slug:"once-you-re-finished-you-can-head-to-setting-up-the-installer",normalizedTitle:"once you're finished, you can head to setting up the installer",charIndex:2523}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Extracting the Installer Once you're finished, you can head to Setting up the installer",content:'# Legacy macOS: Offline Method\n\nThis method allows us to download full installers from Apple, however is limited to the following macOS versions:\n\n * Lion (10.7)\n * Mountain Lion (10.8)\n * Yosemite (10.10)\n * El Capitan (10.11)\n * Sierra (10.12)\n\nTIP\n\nMavericks (10.9) is not available with this method. See Legacy macOS: Online Method for this version.\n\nTo start, go to one of the following links:\n\n * Mac OS X Lion Installer\n * Mac OS X Mountain Lion Installer\n * How to get old versions of macOS (for 10.10 - 10.12 installers)\n\nDownload your desired version and a .dmg file should be provided, with a .pkg inside.\n\nDepending on what OS you\'re on, you can install this package, which will provide you with a "Install (macOS version).app" and head to Setting up the installer; however if you receive this error:\n\n\n\nYour SMBIOS is too new to run that version natively (even if you\'re trying to make a USB for a different computer, it still checks). This means we\'ll need to manually extract the installer.\n\n\n# Extracting the Installer\n\nTo start, grab the InstallMacOSX/InstallOS.dmg and mount it:\n\n\n\nNext, let\'s open up a Terminal window and extract the package to a folder on our desktop. This may take a while.\n\n * For Lion and Mountain Lion:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install Mac OS X/InstallMacOSX.pkg" OSInstaller\n\n\n * For Yosemite and El Capitan:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install OS X/InstallMacOSX.pkg" OSInstaller\n\n\n * For Sierra:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install macOS/InstallOS.pkg" OSInstaller\n\n\nNext, run the following (one at a time):\n\n * Lion:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install Mac OS X Lion.app/Contents/SharedSupport/"\nmv "Payload/Install Mac OS X Lion.app" /Applications\n\n\n * Mountain Lion:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X Mountain Lion.app/Contents/SharedSupport/"\nmv "Payload/Install OS X Mountain Lion.app" /Applications\n\n\n * Yosemite:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X Yosemite.app/Contents/SharedSupport/"\nmv "Payload/Install OS X Yosemite.app" /Applications\n\n\n * El Capitan:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X El Capitan.app/Contents/SharedSupport/"\nmv "Payload/Install OS X El Capitan.app" /Applications\n\n\n * Sierra:\n\ncd OSInstaller/InstallOS.pkg\nmv InstallESD.dmg "Payload/Install macOS Sierra.app/Contents/SharedSupport/"\nmv "Payload/Install macOS Sierra.app" /Applications\n\n\n\n# Once you\'re finished, you can head to Setting up the installer',normalizedContent:'# legacy macos: offline method\n\nthis method allows us to download full installers from apple, however is limited to the following macos versions:\n\n * lion (10.7)\n * mountain lion (10.8)\n * yosemite (10.10)\n * el capitan (10.11)\n * sierra (10.12)\n\ntip\n\nmavericks (10.9) is not available with this method. see legacy macos: online method for this version.\n\nto start, go to one of the following links:\n\n * mac os x lion installer\n * mac os x mountain lion installer\n * how to get old versions of macos (for 10.10 - 10.12 installers)\n\ndownload your desired version and a .dmg file should be provided, with a .pkg inside.\n\ndepending on what os you\'re on, you can install this package, which will provide you with a "install (macos version).app" and head to setting up the installer; however if you receive this error:\n\n\n\nyour smbios is too new to run that version natively (even if you\'re trying to make a usb for a different computer, it still checks). this means we\'ll need to manually extract the installer.\n\n\n# extracting the installer\n\nto start, grab the installmacosx/installos.dmg and mount it:\n\n\n\nnext, let\'s open up a terminal window and extract the package to a folder on our desktop. this may take a while.\n\n * for lion and mountain lion:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install mac os x/installmacosx.pkg" osinstaller\n\n\n * for yosemite and el capitan:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install os x/installmacosx.pkg" osinstaller\n\n\n * for sierra:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install macos/installos.pkg" osinstaller\n\n\nnext, run the following (one at a time):\n\n * lion:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install mac os x lion.app/contents/sharedsupport/"\nmv "payload/install mac os x lion.app" /applications\n\n\n * mountain lion:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x mountain lion.app/contents/sharedsupport/"\nmv "payload/install os x mountain lion.app" /applications\n\n\n * yosemite:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x yosemite.app/contents/sharedsupport/"\nmv "payload/install os x yosemite.app" /applications\n\n\n * el capitan:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x el capitan.app/contents/sharedsupport/"\nmv "payload/install os x el capitan.app" /applications\n\n\n * sierra:\n\ncd osinstaller/installos.pkg\nmv installesd.dmg "payload/install macos sierra.app/contents/sharedsupport/"\nmv "payload/install macos sierra.app" /applications\n\n\n\n# once you\'re finished, you can head to setting up the installer',charsets:{}},{title:"Legacy macOS: Online Method",frontmatter:{},regularPath:"/installer-guide/mac-install-recovery.html",relativePath:"installer-guide/mac-install-recovery.md",key:"v-6e88b902",path:"/installer-guide/mac-install-recovery.html",headers:[{level:3,title:"Once you're finished, you can head to Setting up OpenCore's EFI environment",slug:"once-you-re-finished-you-can-head-to-setting-up-opencore-s-efi-environment",normalizedTitle:"once you're finished, you can head to setting up opencore's efi environment",charIndex:2551}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"Once you're finished, you can head to Setting up OpenCore's EFI environment",content:"# Legacy macOS: Online Method\n\nThis method allows us to download legacy versions of macOS including 10.7 to current, however these are only recovery installers so require an internet connection inside the installer itself\n\nTo start, you'll want to use macrecovery.py instead. This tool is actually already bundled in OpenCorePkg:\n\n\n\nInstructions for running are quite simple, choose from one of the below commands depending on which OS you want to download:\n\n# Lion (10.7):\npython3 ./macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 ./macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 ./macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 ./macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 ./macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 ./macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 ./macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 ./macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 ./macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 ./macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 ./macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# Latest version\n# ie. Ventura (13)\npython3 ./macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n * macOS 12 and above note: As recent macOS versions introduce changes to the USB stack, it is highly advisable that you map your USB ports (with USBToolBox) before installing macOS.\n   * CAUTION: With macOS 11.3 and newer, XhciPortLimit is broken resulting in boot loops.\n     * If you've already mapped your USB ports and disabled XhciPortLimit, you can boot macOS 11.3+ without issues.\n\nFrom here, run one of those commands in terminal and once finished you'll get an output similar to this:\n\n\n\nOnce this is done, format your USB as FAT32 with GUID Partition Scheme:\n\n\n\nAnd finally, create folder on the root of this drive called com.apple.recovery.boot and place the newly downloaded BaseSystem/RecoveryImage files in:\n\n\n\n\n# Once you're finished, you can head to Setting up OpenCore's EFI environment",normalizedContent:"# legacy macos: online method\n\nthis method allows us to download legacy versions of macos including 10.7 to current, however these are only recovery installers so require an internet connection inside the installer itself\n\nto start, you'll want to use macrecovery.py instead. this tool is actually already bundled in opencorepkg:\n\n\n\ninstructions for running are quite simple, choose from one of the below commands depending on which os you want to download:\n\n# lion (10.7):\npython3 ./macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 ./macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 ./macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 ./macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 ./macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 ./macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 ./macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 ./macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 ./macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 ./macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 ./macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# latest version\n# ie. ventura (13)\npython3 ./macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n * macos 12 and above note: as recent macos versions introduce changes to the usb stack, it is highly advisable that you map your usb ports (with usbtoolbox) before installing macos.\n   * caution: with macos 11.3 and newer, xhciportlimit is broken resulting in boot loops.\n     * if you've already mapped your usb ports and disabled xhciportlimit, you can boot macos 11.3+ without issues.\n\nfrom here, run one of those commands in terminal and once finished you'll get an output similar to this:\n\n\n\nonce this is done, format your usb as fat32 with guid partition scheme:\n\n\n\nand finally, create folder on the root of this drive called com.apple.recovery.boot and place the newly downloaded basesystem/recoveryimage files in:\n\n\n\n\n# once you're finished, you can head to setting up opencore's efi environment",charsets:{}},{title:"在macOS中制作安装程序",frontmatter:{},regularPath:"/installer-guide/mac-install.html",relativePath:"installer-guide/mac-install.md",key:"v-76c4d0ed",path:"/installer-guide/mac-install.html",headers:[{level:2,title:"下载macOS:现代OS",slug:"下载macos-现代os",normalizedTitle:"下载macos:现代os",charIndex:184},{level:2,title:"下载macOS:传统OS",slug:"下载macos-传统os",normalizedTitle:"下载macos:传统os",charIndex:1813},{level:2,title:"设置安装程序",slug:"设置安装程序",normalizedTitle:"设置安装程序",charIndex:316},{level:2,title:"传统设置",slug:"传统设置",normalizedTitle:"传统设置",charIndex:4421},{level:2,title:"设置OpenCore的EFI环境",slug:"设置opencore的efi环境",normalizedTitle:"设置opencore的efi环境",charIndex:2235},{level:2,title:"现在所有这些都完成了，前往设置EFI 来完成你的工作",slug:"现在所有这些都完成了-前往设置efi-来完成你的工作",normalizedTitle:"现在所有这些都完成了，前往设置efi 来完成你的工作",charIndex:5099}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"下载macOS:现代OS 下载macOS:传统OS 设置安装程序 传统设置 设置OpenCore的EFI环境 现在所有这些都完成了，前往设置EFI 来完成你的工作",content:"# 在macOS中制作安装程序\n\n虽然你不需要重新安装macOS来使用OpenCore，但一些用户更喜欢使用全新的引导管理器升级。\n\n首先，我们要找一个macOS的副本。如果你只是制作一个可引导的OpenCore U盘，而不是安装程序，你可以跳过这一步，直接格式化USB。对于其他人来说，你可以从App Store下载macOS，也可以使用Munki的脚本。\n\n\n# 下载macOS:现代OS\n\n * 此方法允许您下载macOS 10.13及更新版本，对于10.12及更旧的版本，请查看 下载macOS: 传统OS\n\n在符合你想要安装的操作系统版本要求的macOS机器上，直接进入App Store下载所需的操作系统版本，然后继续 设置安装程序.\n\n对于需要特定操作系统版本或无法从App Store下载的机器，可以使用Munki的InstallInstallMacOS实用程序。\n\n运行macOS Monterey 12.3或以上版本的用户请注意\n\n从macOS Monterey 12.3开始，苹果删除了对python2.7的支持， 因此如果没有它，installinstallmacos.py将出现以下错误:\n\nThis tool requires the Python xattr module. Perhaps run 'pip install xattr' to install it.\n\n\n为了解决这个问题，我们建议通过在终端中运行Xcode -select——install来安装Xcode命令行工具，然后运行pip3 install xattr\n\n之后你可以使用python3而不是python来运行下面相同的命令:\n\nmkdir -p ~/macOS-installer && cd ~/macOS-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python3 installinstallmacos.py\n\n\n为了运行它，只需要在终端窗口中复制并粘贴下面的命令:\n\nmkdir -p ~/macOS-installer && cd ~/macOS-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python installinstallmacos.py\n\n\n\n\n如你所见，我们得到了一个很好的macOS安装程序列表。如果你需要某个特定版本的macOS，可以通过在它旁边输入数字来选择它。在这个例子中，我们选择10:\n\n\n\n * macOS 12及以上版本注意: 由于最新版本的macOS对USB栈进行了更改，因此强烈建议您在安装macOS之前(使用USBToolBox)映射USB端口。\n   * 注意: 在macOS 11.3及更新版本中，XhciPortLimit被破坏导致启动循环.\n     * 如果你已经映射了你的USB端口 并且禁用了 XhciPortLimit, 那么你可以正常启动macOS 11.3+。\n\n这需要一段时间，因为我们正在下载整个8GB以上的macOS安装程序，所以强烈建议你在等待的时候阅读本指南的其余部分。\n\n完成后，你会发现在你的~/macOS-Installer/文件夹中有一个包含macOS安装程序的DMG，名为Install_macOS_11.1-20C69.Dmg。挂载它，你就会找到安装程序。\n\n * 注意:我们建议移动安装 macOS.app 到 /Applications 文件夹，因为我们将从那里执行命令。\n * 注意 2:在Finder中运行Cmd+Shift+G可以让你轻松跳转到~/macOS-installer\n\n\n\n\n\n从这里，跳转到设置安装程序 来完成你的工作。如果你想检查下载的完整性，你可以检查这个校验存储库, 不过请注意，这些校验和是众包的，可能不是检查真实性的可靠方法。\n\n\n# 下载macOS:传统OS\n\n * 此方法允许您下载OS X的更老版本，目前支持所有OS X的英特尔版本(10.4到当前)\n   \n   * 传统macOS:离线方法\n     * 10.7 - 10.12 支持，不包括 10.9\n   * 传统macOS:在线方法\n     * 10.7 - 11 支持\n   * 传统macOS:磁盘映像\n     * 10.4 - 10.6 支持\n\n\n# 设置安装程序\n\n现在我们将格式化USB为macOS安装程序和OpenCore做准备。我们希望使用带有GUID分区映射的macOS Extended (HFS+)。这将创建两个分区:主分区MyVolume和第二个名为EFI的分区，它用作引导分区，固件将在其中检查引导文件。\n\n * 注意:默认情况下，磁盘实用程序只显示分区-按Cmd/Win+2显示所有设备(或者你可以按查看按钮)\n * 注意 2: 使用 \"传统macOS:在线方法\" 的用户可以跳转到设置OpenCore的EFI环境\n\n\n\n接下来运行苹果提供的createinstallmedia命令。请注意，该命令是为名称为MyVolume的USB创建的:\n\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n\nApple Silicon上安装macOS比Big Sur更早的用户请注意\n\n如果createinstallmedia以zsh:killed或killed:9失败，那么很可能是安装程序的代码签名有问题。要解决这个问题，您可以运行以下命令:\n\ncd /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/\ncodesign -s - -f --deep /Applications/Install\\ macOS\\ Big\\ Sur.app\n\n\n你需要为Xcode安装命令行工具:\n\nxcode-select --install\n\n\n这需要一些时间，所以你可能想要喝杯咖啡或继续阅读本指南(公平地说，你真的不应该在没有阅读完整内容之前一步一步地遵循本指南)。\n\n你也可以将createinstallmedia路径替换为安装程序所在的路径(与驱动器名称相同)。\n\n传统 createinstallmedia 命令\n\n来自苹果自己的网站:如何为macOS创建一个可引导安装程序\n\n# Ventura\nsudo /Applications/Install\\ macOS\\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Monterey\nsudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Big Sur\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Catalina\nsudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Mojave\nsudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# High Sierra\nsudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Sierra\nsudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ macOS\\ Sierra.app\n\n# El Capitan\nsudo /Applications/Install\\ OS\\ X\\ El\\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ El\\ Capitan.app\n\n# Yosemite\nsudo /Applications/Install\\ OS\\ X\\ Yosemite.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ Yosemite.app\n\n# Mavericks\nsudo /Applications/Install\\ OS\\ X\\ Mavericks.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ Mavericks.app --nointeraction\n\n\n\n# 传统设置\n\n对于不支持UEFI引导的系统，请参见以下内容:\n\n设置传统引导\n\n首先，你需要以下文件:\n\n * BootInstall_IA32.tool 或 BootInstall_X64.tool\n   * 可以在OpenCorePkg的/utilities/LegacyBoot/目录下找到\n * 安装USB(上面创建的)\n\n在你的OpenCore build文件夹中，导航到Utilities/LegacyBoot。在这里你会找到一个名为BootInstall_ARCH.tool的文件。这样做的目的是将DuetPkg安装到所需的驱动器。\n\n\n\n现在使用sudo在终端中运行此工具(否则此工具可能会失败):\n\n# Replace X64 with IA32 if you have a 32-Bit CPU\nsudo ~/Downloads/OpenCore/Utilities/legacyBoot/BootInstall_X64.tool\n\n\n\n\n这将给您一个可用磁盘的列表，选择您的磁盘，并提示您写入一个新的MBR。选择yes[y]，你就完成了。\n\n\n\n\n\n这将为你提供一个包含bootia32或bootx64文件的EFI分区\n\n\n# 设置OpenCore的EFI环境\n\n设置OpenCore的EFI环境很简单-你需要做的就是挂载我们的EFI系统分区。当我们使用GUID格式化时，这是自动生成的，但默认情况下是卸载的， 这就是我们的朋友挂载EFI 发挥作用的地方:\n\n\n\n你会注意到，打开EFI分区后，它是空的。这就是乐趣的开始。\n\n\n\n\n# 现在所有这些都完成了，前往设置EFI 来完成你的工作",normalizedContent:"# 在macos中制作安装程序\n\n虽然你不需要重新安装macos来使用opencore，但一些用户更喜欢使用全新的引导管理器升级。\n\n首先，我们要找一个macos的副本。如果你只是制作一个可引导的opencore u盘，而不是安装程序，你可以跳过这一步，直接格式化usb。对于其他人来说，你可以从app store下载macos，也可以使用munki的脚本。\n\n\n# 下载macos:现代os\n\n * 此方法允许您下载macos 10.13及更新版本，对于10.12及更旧的版本，请查看 下载macos: 传统os\n\n在符合你想要安装的操作系统版本要求的macos机器上，直接进入app store下载所需的操作系统版本，然后继续 设置安装程序.\n\n对于需要特定操作系统版本或无法从app store下载的机器，可以使用munki的installinstallmacos实用程序。\n\n运行macos monterey 12.3或以上版本的用户请注意\n\n从macos monterey 12.3开始，苹果删除了对python2.7的支持， 因此如果没有它，installinstallmacos.py将出现以下错误:\n\nthis tool requires the python xattr module. perhaps run 'pip install xattr' to install it.\n\n\n为了解决这个问题，我们建议通过在终端中运行xcode -select——install来安装xcode命令行工具，然后运行pip3 install xattr\n\n之后你可以使用python3而不是python来运行下面相同的命令:\n\nmkdir -p ~/macos-installer && cd ~/macos-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python3 installinstallmacos.py\n\n\n为了运行它，只需要在终端窗口中复制并粘贴下面的命令:\n\nmkdir -p ~/macos-installer && cd ~/macos-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python installinstallmacos.py\n\n\n\n\n如你所见，我们得到了一个很好的macos安装程序列表。如果你需要某个特定版本的macos，可以通过在它旁边输入数字来选择它。在这个例子中，我们选择10:\n\n\n\n * macos 12及以上版本注意: 由于最新版本的macos对usb栈进行了更改，因此强烈建议您在安装macos之前(使用usbtoolbox)映射usb端口。\n   * 注意: 在macos 11.3及更新版本中，xhciportlimit被破坏导致启动循环.\n     * 如果你已经映射了你的usb端口 并且禁用了 xhciportlimit, 那么你可以正常启动macos 11.3+。\n\n这需要一段时间，因为我们正在下载整个8gb以上的macos安装程序，所以强烈建议你在等待的时候阅读本指南的其余部分。\n\n完成后，你会发现在你的~/macos-installer/文件夹中有一个包含macos安装程序的dmg，名为install_macos_11.1-20c69.dmg。挂载它，你就会找到安装程序。\n\n * 注意:我们建议移动安装 macos.app 到 /applications 文件夹，因为我们将从那里执行命令。\n * 注意 2:在finder中运行cmd+shift+g可以让你轻松跳转到~/macos-installer\n\n\n\n\n\n从这里，跳转到设置安装程序 来完成你的工作。如果你想检查下载的完整性，你可以检查这个校验存储库, 不过请注意，这些校验和是众包的，可能不是检查真实性的可靠方法。\n\n\n# 下载macos:传统os\n\n * 此方法允许您下载os x的更老版本，目前支持所有os x的英特尔版本(10.4到当前)\n   \n   * 传统macos:离线方法\n     * 10.7 - 10.12 支持，不包括 10.9\n   * 传统macos:在线方法\n     * 10.7 - 11 支持\n   * 传统macos:磁盘映像\n     * 10.4 - 10.6 支持\n\n\n# 设置安装程序\n\n现在我们将格式化usb为macos安装程序和opencore做准备。我们希望使用带有guid分区映射的macos extended (hfs+)。这将创建两个分区:主分区myvolume和第二个名为efi的分区，它用作引导分区，固件将在其中检查引导文件。\n\n * 注意:默认情况下，磁盘实用程序只显示分区-按cmd/win+2显示所有设备(或者你可以按查看按钮)\n * 注意 2: 使用 \"传统macos:在线方法\" 的用户可以跳转到设置opencore的efi环境\n\n\n\n接下来运行苹果提供的createinstallmedia命令。请注意，该命令是为名称为myvolume的usb创建的:\n\nsudo /applications/install\\ macos\\ big\\ sur.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n\napple silicon上安装macos比big sur更早的用户请注意\n\n如果createinstallmedia以zsh:killed或killed:9失败，那么很可能是安装程序的代码签名有问题。要解决这个问题，您可以运行以下命令:\n\ncd /applications/install\\ macos\\ big\\ sur.app/contents/resources/\ncodesign -s - -f --deep /applications/install\\ macos\\ big\\ sur.app\n\n\n你需要为xcode安装命令行工具:\n\nxcode-select --install\n\n\n这需要一些时间，所以你可能想要喝杯咖啡或继续阅读本指南(公平地说，你真的不应该在没有阅读完整内容之前一步一步地遵循本指南)。\n\n你也可以将createinstallmedia路径替换为安装程序所在的路径(与驱动器名称相同)。\n\n传统 createinstallmedia 命令\n\n来自苹果自己的网站:如何为macos创建一个可引导安装程序\n\n# ventura\nsudo /applications/install\\ macos\\ ventura.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# monterey\nsudo /applications/install\\ macos\\ monterey.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# big sur\nsudo /applications/install\\ macos\\ big\\ sur.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# catalina\nsudo /applications/install\\ macos\\ catalina.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# mojave\nsudo /applications/install\\ macos\\ mojave.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# high sierra\nsudo /applications/install\\ macos\\ high\\ sierra.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# sierra\nsudo /applications/install\\ macos\\ sierra.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ macos\\ sierra.app\n\n# el capitan\nsudo /applications/install\\ os\\ x\\ el\\ capitan.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ el\\ capitan.app\n\n# yosemite\nsudo /applications/install\\ os\\ x\\ yosemite.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ yosemite.app\n\n# mavericks\nsudo /applications/install\\ os\\ x\\ mavericks.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ mavericks.app --nointeraction\n\n\n\n# 传统设置\n\n对于不支持uefi引导的系统，请参见以下内容:\n\n设置传统引导\n\n首先，你需要以下文件:\n\n * bootinstall_ia32.tool 或 bootinstall_x64.tool\n   * 可以在opencorepkg的/utilities/legacyboot/目录下找到\n * 安装usb(上面创建的)\n\n在你的opencore build文件夹中，导航到utilities/legacyboot。在这里你会找到一个名为bootinstall_arch.tool的文件。这样做的目的是将duetpkg安装到所需的驱动器。\n\n\n\n现在使用sudo在终端中运行此工具(否则此工具可能会失败):\n\n# replace x64 with ia32 if you have a 32-bit cpu\nsudo ~/downloads/opencore/utilities/legacyboot/bootinstall_x64.tool\n\n\n\n\n这将给您一个可用磁盘的列表，选择您的磁盘，并提示您写入一个新的mbr。选择yes[y]，你就完成了。\n\n\n\n\n\n这将为你提供一个包含bootia32或bootx64文件的efi分区\n\n\n# 设置opencore的efi环境\n\n设置opencore的efi环境很简单-你需要做的就是挂载我们的efi系统分区。当我们使用guid格式化时，这是自动生成的，但默认情况下是卸载的， 这就是我们的朋友挂载efi 发挥作用的地方:\n\n\n\n你会注意到，打开efi分区后，它是空的。这就是乐趣的开始。\n\n\n\n\n# 现在所有这些都完成了，前往设置efi 来完成你的工作",charsets:{cjk:!0}},{title:"添加基础OpenCore文件",frontmatter:{},regularPath:"/installer-guide/opencore-efi.html",relativePath:"installer-guide/opencore-efi.md",key:"v-6a3191c1",path:"/installer-guide/opencore-efi.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# 添加基础OpenCore文件\n\n要设置OpenCore的文件夹结构，你需要抓取OpenCorePkg的发行版中的EFI文件夹。注意，它们可能位于IA32或X64文件夹下，前者用于32位固件，后者用于64位固件:\n\n\n\n关于DEBUG和RELEASE版本:\n\n * DEBUG: 可以极大地帮助调试启动问题，但是会增加一些明显的启动时间延迟(例如:3-5秒到选择器)。安装之后，你可以轻松地过渡到RELEASE版本\n * RELEASE: 更快的启动时间，但是在OpenCore中几乎没有提供有用的调试信息，这使得故障排除更加困难。\n\n下载后，将EFI文件夹(来自OpenCorePkg)放在EFI分区的根目录:\n\n\n\n注意:\n\n * Windows用户: 你需要将EFI文件夹放在你之前创建的USB驱动器的根目录下\n * Linux用户: 这是我们之前创建的OPENCORE分区\n   * 注意，方法1只创建1个分区，而方法2创建2个分区\n\n现在让我们打开EFI文件夹，看看里面有什么:\n\n\n\n现在你会注意到它在Drivers和Tools文件夹中有一堆文件，其中大部分我们都不想要:\n\n * 避免驱动程序使用以下内容(如果适用):\n\n驱动                     状态   描述\nOpenUsbKbDxe.efi       可选   非uefi系统必选(2012年前)\nOpenPartitionDxe.efi        引导macOS 10.7-10.9恢复需要\nResetNvramEntry.efi         重置系统的NVRAM需要\nOpenRuntime.efi        必选   正确操作所需\n\n有关提供的驱动程序的更多信息\n * AudioDxe.efi\n   * 与macOS中的音频支持无关\n * CrScreenshotDxe.efi\n   * 在UEFI中用于截图，我们不需要\n * HiiDatabase.efi\n   * 用于修复GUI支持，像OpenShell.efi 在 Sandy Bridge 和更老的\n   * 引导时不需要\n * NvmExpressDxe.efi\n   * 当固件中没有内置NVMe驱动程序时，用于Haswell和更早的版本\n   * 除非你知道自己在做什么，否则不要使用\n * OpenCanopy.efi\n   * 这是OpenCore的可选GUI，我们将讨论如何在安装后 中设置这个，所以现在删除这个\n * OpenHfsPlus.efi\n   * 开源的HFS Plus驱动程序，相当慢，所以我们建议不要使用，除非你知道你在做什么。\n * OpenPartitionDxe.efi\n   * 在OS X 10.7到10.9上启动恢复需要\n     * 注意:OpenDuet用户(例如:没有UEFI)将内置这个驱动程序，不需要它\n * OpenUsbKbDxe.efi\n   * 这个OpenCore picker用于 传统系统运行拾取器, 不推荐，甚至在Ivy Bridge和更新的系统上有害\n * Ps2KeyboardDxe.efi + Ps2MouseDxe.efi\n   * 很明显，当你需要它时，USB键盘和鼠标用户不需要它\n   * 提醒: PS2 ≠ USB\n * ResetNvramEntry.efi\n   * 允许从启动选择器重置NVRAM\n * UsbMouseDxe.efi\n   * 与OpenUsbKbDxe类似的想法，应该只需要在使用DuetPkg的传统系统上\n * XhciDxe.efi\n   * 当固件中没有XHCI驱动程序时，用于Sandy Bridge和更老的\n   * 只有在旧机器上使用USB 3.0扩展卡时才需要\n\n * 避免使用以下工具:\n\n工具              状态   说明\nOpenShell.efi   可选   推荐使用，便于调试\n\n清理后的EFI:\n\n\n\n现在你可以将你的必要的固件驱动程序(.efi)放在_Drivers_文件夹中，将kext /ACPI放在它们各自的文件夹中。有关应该使用哪些文件的更多信息，请参阅收集文件\n\n * 请注意，来自Clover的UEFI驱动程序不支持OpenCore!(EmuVariableUEFI, AptioMemoryFix, OsxAptioFixDrv,等). 请参阅 Clover固件驱动程序转换 了解更多支持的驱动程序和合并到OpenCore的驱动程序。\n\n下面是填充过的EFI 可能 的样子(你的可能会不同):\n\n\n\n提醒:\n\n * 将ssdt和自定义dsdt (.aml)放入ACPI文件夹\n * kext (.kext)放入Kexts文件夹\n * 将固件驱动程序(.efi)放在drivers文件夹中\n\n\n# 现在，所有这些都完成了，前往收集文件 获得所需的kext和固件驱动程序",normalizedContent:"# 添加基础opencore文件\n\n要设置opencore的文件夹结构，你需要抓取opencorepkg的发行版中的efi文件夹。注意，它们可能位于ia32或x64文件夹下，前者用于32位固件，后者用于64位固件:\n\n\n\n关于debug和release版本:\n\n * debug: 可以极大地帮助调试启动问题，但是会增加一些明显的启动时间延迟(例如:3-5秒到选择器)。安装之后，你可以轻松地过渡到release版本\n * release: 更快的启动时间，但是在opencore中几乎没有提供有用的调试信息，这使得故障排除更加困难。\n\n下载后，将efi文件夹(来自opencorepkg)放在efi分区的根目录:\n\n\n\n注意:\n\n * windows用户: 你需要将efi文件夹放在你之前创建的usb驱动器的根目录下\n * linux用户: 这是我们之前创建的opencore分区\n   * 注意，方法1只创建1个分区，而方法2创建2个分区\n\n现在让我们打开efi文件夹，看看里面有什么:\n\n\n\n现在你会注意到它在drivers和tools文件夹中有一堆文件，其中大部分我们都不想要:\n\n * 避免驱动程序使用以下内容(如果适用):\n\n驱动                     状态   描述\nopenusbkbdxe.efi       可选   非uefi系统必选(2012年前)\nopenpartitiondxe.efi        引导macos 10.7-10.9恢复需要\nresetnvramentry.efi         重置系统的nvram需要\nopenruntime.efi        必选   正确操作所需\n\n有关提供的驱动程序的更多信息\n * audiodxe.efi\n   * 与macos中的音频支持无关\n * crscreenshotdxe.efi\n   * 在uefi中用于截图，我们不需要\n * hiidatabase.efi\n   * 用于修复gui支持，像openshell.efi 在 sandy bridge 和更老的\n   * 引导时不需要\n * nvmexpressdxe.efi\n   * 当固件中没有内置nvme驱动程序时，用于haswell和更早的版本\n   * 除非你知道自己在做什么，否则不要使用\n * opencanopy.efi\n   * 这是opencore的可选gui，我们将讨论如何在安装后 中设置这个，所以现在删除这个\n * openhfsplus.efi\n   * 开源的hfs plus驱动程序，相当慢，所以我们建议不要使用，除非你知道你在做什么。\n * openpartitiondxe.efi\n   * 在os x 10.7到10.9上启动恢复需要\n     * 注意:openduet用户(例如:没有uefi)将内置这个驱动程序，不需要它\n * openusbkbdxe.efi\n   * 这个opencore picker用于 传统系统运行拾取器, 不推荐，甚至在ivy bridge和更新的系统上有害\n * ps2keyboarddxe.efi + ps2mousedxe.efi\n   * 很明显，当你需要它时，usb键盘和鼠标用户不需要它\n   * 提醒: ps2 = usb\n * resetnvramentry.efi\n   * 允许从启动选择器重置nvram\n * usbmousedxe.efi\n   * 与openusbkbdxe类似的想法，应该只需要在使用duetpkg的传统系统上\n * xhcidxe.efi\n   * 当固件中没有xhci驱动程序时，用于sandy bridge和更老的\n   * 只有在旧机器上使用usb 3.0扩展卡时才需要\n\n * 避免使用以下工具:\n\n工具              状态   说明\nopenshell.efi   可选   推荐使用，便于调试\n\n清理后的efi:\n\n\n\n现在你可以将你的必要的固件驱动程序(.efi)放在_drivers_文件夹中，将kext /acpi放在它们各自的文件夹中。有关应该使用哪些文件的更多信息，请参阅收集文件\n\n * 请注意，来自clover的uefi驱动程序不支持opencore!(emuvariableuefi, aptiomemoryfix, osxaptiofixdrv,等). 请参阅 clover固件驱动程序转换 了解更多支持的驱动程序和合并到opencore的驱动程序。\n\n下面是填充过的efi 可能 的样子(你的可能会不同):\n\n\n\n提醒:\n\n * 将ssdt和自定义dsdt (.aml)放入acpi文件夹\n * kext (.kext)放入kexts文件夹\n * 将固件驱动程序(.efi)放在drivers文件夹中\n\n\n# 现在，所有这些都完成了，前往收集文件 获得所需的kext和固件驱动程序",charsets:{cjk:!0}},{title:"在 Windows 中制作安装程序",frontmatter:{},regularPath:"/installer-guide/windows-install.html",relativePath:"installer-guide/windows-install.md",key:"v-6a91c3ed",path:"/installer-guide/windows-install.html",headers:[{level:2,title:"下载 macOS",slug:"下载-macos",normalizedTitle:"下载 macos",charIndex:198},{level:2,title:"制作安装程序",slug:"制作安装程序",normalizedTitle:"制作安装程序",charIndex:13},{level:3,title:"磁盘管理方法",slug:"磁盘管理方法",normalizedTitle:"磁盘管理方法",charIndex:2099},{level:3,title:"Rufus 方法",slug:"rufus-方法",normalizedTitle:"rufus 方法",charIndex:2152},{level:3,title:"diskpart 方法",slug:"diskpart-方法",normalizedTitle:"diskpart 方法",charIndex:2207},{level:2,title:"现在所有这些都完成了，前往设置EFI来完成你的工作",slug:"现在所有这些都完成了-前往设置efi来完成你的工作",normalizedTitle:"现在所有这些都完成了，前往设置efi来完成你的工作",charIndex:4669}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"下载 macOS 制作安装程序 磁盘管理方法 Rufus 方法 diskpart 方法 现在所有这些都完成了，前往设置EFI来完成你的工作",content:'# 在 Windows 中制作安装程序\n\n虽然你不需要重新安装macOS来使用OpenCore，但一些用户更喜欢使用全新的引导管理器升级。\n\n开始之前，你需要做好以下准备：\n\n * 4GB 的 U 盘\n\n * 对于大于 16GB 的 USB ，使用 Rufus method 格式化成 FAT32。\n\n * macrecovery.py\n   \n   * 这需要 安装 Python 3\n\n\n# 下载 macOS\n\n要获取传统的安装程序非常容易，首先获取 OpenCorePkg 然后转到 /Utilities/macrecovery/. 接下来，单击当前文件夹路径旁边的，输入 cmd ，在当前目录中打开命令提示符:\n\n\n\n现在根据你想要的macOS版本运行以下其中之一(注意这些脚本依赖于Python 3 支持，如果你还没有安装请安装):\n\n# Lion (10.7):\npython3 macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# Latest version\n# ie. Ventura (13)\npython3 macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n * macOS 12及以上版本注意: 由于最新版本的 macOS 对 USB 栈进行了更改，因此强烈建议您在安装 macOS 之前(使用 USBToolBox )映射USB端口。\n   * 注意: 在 macOS 11.3 及更新版本中，XhciPortLimit被破坏导致启动循环.\n     * 如果你已经映射了你的USB端口 并且禁用了 XhciPortLimit ，那么你可以正常启动 macOS 11.3+。\n\n这需要一些时间，但是一旦你完成，你应该得到BaseSystem或RecoveryImage文件:\n\n\n\nBASESYSTEM   RECOVERYIMAGE\n             \n\n现在安装程序已经下载完毕，接下来我们要格式化USB。\n\n\n# 制作安装程序\n\n在这里，我们将格式化我们的 USB 并将 macOS 添加到其中，我们有两个选择:\n\n * 磁盘管理方法\n   * 基于GUI，最简单的方式\n   * 仅支持UEFI系统(例如:2012+)\n * Rufus 方法\n   * 基于GUI，最简单的方式\n   * 用于更大的USB驱动器(16GB以上)\n * diskpart 方法\n   * 基于命令行，更多的工作\n   * 传统系统所需(如：非uefi, 2012年之前)\n\n\n# 磁盘管理方法\n\n只需打开磁盘管理，并将USB格式化为FAT32:\n\n 1. 右键单击任务栏上的“开始”按钮并选择“磁盘管理”。\n 2. 您应该会看到所有分区和磁盘。在下半部分，你会看到你的设备。找到你的USB。\n 3. 你需要将USB格式化为FAT32分区。\n\n * 如果你在USB上有多个分区，右键单击每个分区并单击USB的删除卷(这将删除数据，确保你有备份，只删除USB的分区)\n   * 点击右键未分配的空间,创建一个新的简单卷。请确保它是FAT32，并且至少有1g或2g大。命名为“EFI”。\n * 否则，右键单击USB上的分区，单击“格式化”，设置为FAT32。\n\n\n\n接下来，在这个u盘的根目录下创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的 baseSystem 或 RecoveryImage 文件。请确保将 .dmg 和 .chunklist 文件都复制到这个文件夹:\n\n\n\n现在获取之前下载的 OpenCorePkg 并打开它:\n\n\n\n这里我们看到 IA32(32位cpu) 和 X64(64位cpu) 文件夹，选择一个最适合你的硬件，并打开它。接下来，抓取里面的EFI文件夹，并将其与 com.apple.recovery.boot 一起放在USB驱动器的根目录上。完成后，它看起来应该像这样:\n\n\n\n\n# Rufus 方法\n\n 1. 下载 Rufus\n 2. 将BOOT选项设置为“无引导”\n 3. 设置文件系统为 Large FAT32\n 4. 单击“开始”\n 5. 删除u盘分区中所有“autorun”文件\n\n\n\n接下来，在这个u盘的根目录下创建一个名为 com.apple.recovery.boot 的文件夹。然后移动下载的 baseSystem 或 RecoveryImage 文件。请确保将 .dmg 和 .chunklist 文件都复制到这个文件夹:\n\n\n\n现在获取之前下载的 OpenCorePkg 并打开它:\n\n\n\n这里我们看到 IA32(32位cpu) 和 X64(64位cpu) 文件夹，选择一个最适合你的硬件，并打开它。接下来，抓取里面的EFI文件夹，并将其与 com.apple.recovery.boot 一起放在USB驱动器的根目录上。完成后，它看起来应该像这样:\n\n\n\n\n# diskpart 方法\n\ndiskpart 方法\n\n按 Windows+R 并输入 diskpart 。\n\n现在运行以下命令:\n\n# List available disks\nlist disk\n# Select your disk(ie. disk 1)\nselect disk 1\n# Format the drive\nclean\n# Convert to GPT\n# Due to an odd bug with BOOTICE and DuetPkg, MBR disks will fail to boot\nconvert gpt\n# Create a new partition\ncreate partition primary\n# Select your partition\n# Running clean ensures we only have 1 partition so it will be "partition 1"\nselect partition 1\n# Format the drive as FAT32\nformat fs=fat32 quick\n# Assign a drive letter(ie. Drive E, ensure it\'s not currently in use)\nASSIGN LETTER=E\n\n\n接下来，在这个u盘的根目录下创建一个名为 com.apple.recovery.boot 的文件夹。然后移动下载的 baseSystem 或 RecoveryImage 文件。请确保将 .dmg 和 .chunklist 文件都复制到这个文件夹:\n\n\n\n现在获取之前下载的 OpenCorePkg 并打开它:\n\n\n\n这里我们看到 IA32(32位cpu) 和 X64(64位cpu) 文件夹，选择一个最适合你的硬件，并打开它。接下来，抓取其中的EFI文件夹，并将其与 com.apple.recovery.boot 放在USB驱动器的根目录下。完成后，它看起来应该像这样:\n\n\n\n传统安装设置\n\n如果您的固件不支持UEFI，请参阅以下说明:\n\n首先，你需要以下东西:\n\n * 7-Zip\n * BOOTICE\n * OpenCorePkg\n\n接下来，打开 BOOTICE 并确保选择了正确的驱动器。\n\n\n\n接下来，输入“Process MBR”，然后选择“Restore MBR”，并在 OpenCorePkg 中从 Utilities/LegacyBoot/ 中选择 boot0 文件:\n\nRESTORE MBR   RESTORE BOOT0 FILE\n              \n\n返回主界面，选择 "Process PBR" 然后选择 "Restore PBR". 从 OpenCorePkg 的 Utilities/LegacyBoot/ 中选择 boot1f32 文件:\n\nRESTORE PBR   RESTORE BOOT1F32 FILE\n              \n\n一旦完成，回到你的USB，做最后一件事。从 Utilities/LegacyBoot/ 中获取 bootx64 (64位cpu)或 bootia32 (32位cpu)文件，并将其放在驱动器的根目录下。 将这个文件重命名为boot 以确保DuetPkg可以正常运行:\n\n\n\n\n# 现在所有这些都完成了，前往设置EFI来完成你的工作',normalizedContent:'# 在 windows 中制作安装程序\n\n虽然你不需要重新安装macos来使用opencore，但一些用户更喜欢使用全新的引导管理器升级。\n\n开始之前，你需要做好以下准备：\n\n * 4gb 的 u 盘\n\n * 对于大于 16gb 的 usb ，使用 rufus method 格式化成 fat32。\n\n * macrecovery.py\n   \n   * 这需要 安装 python 3\n\n\n# 下载 macos\n\n要获取传统的安装程序非常容易，首先获取 opencorepkg 然后转到 /utilities/macrecovery/. 接下来，单击当前文件夹路径旁边的，输入 cmd ，在当前目录中打开命令提示符:\n\n\n\n现在根据你想要的macos版本运行以下其中之一(注意这些脚本依赖于python 3 支持，如果你还没有安装请安装):\n\n# lion (10.7):\npython3 macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# latest version\n# ie. ventura (13)\npython3 macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n * macos 12及以上版本注意: 由于最新版本的 macos 对 usb 栈进行了更改，因此强烈建议您在安装 macos 之前(使用 usbtoolbox )映射usb端口。\n   * 注意: 在 macos 11.3 及更新版本中，xhciportlimit被破坏导致启动循环.\n     * 如果你已经映射了你的usb端口 并且禁用了 xhciportlimit ，那么你可以正常启动 macos 11.3+。\n\n这需要一些时间，但是一旦你完成，你应该得到basesystem或recoveryimage文件:\n\n\n\nbasesystem   recoveryimage\n             \n\n现在安装程序已经下载完毕，接下来我们要格式化usb。\n\n\n# 制作安装程序\n\n在这里，我们将格式化我们的 usb 并将 macos 添加到其中，我们有两个选择:\n\n * 磁盘管理方法\n   * 基于gui，最简单的方式\n   * 仅支持uefi系统(例如:2012+)\n * rufus 方法\n   * 基于gui，最简单的方式\n   * 用于更大的usb驱动器(16gb以上)\n * diskpart 方法\n   * 基于命令行，更多的工作\n   * 传统系统所需(如：非uefi, 2012年之前)\n\n\n# 磁盘管理方法\n\n只需打开磁盘管理，并将usb格式化为fat32:\n\n 1. 右键单击任务栏上的“开始”按钮并选择“磁盘管理”。\n 2. 您应该会看到所有分区和磁盘。在下半部分，你会看到你的设备。找到你的usb。\n 3. 你需要将usb格式化为fat32分区。\n\n * 如果你在usb上有多个分区，右键单击每个分区并单击usb的删除卷(这将删除数据，确保你有备份，只删除usb的分区)\n   * 点击右键未分配的空间,创建一个新的简单卷。请确保它是fat32，并且至少有1g或2g大。命名为“efi”。\n * 否则，右键单击usb上的分区，单击“格式化”，设置为fat32。\n\n\n\n接下来，在这个u盘的根目录下创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的 basesystem 或 recoveryimage 文件。请确保将 .dmg 和 .chunklist 文件都复制到这个文件夹:\n\n\n\n现在获取之前下载的 opencorepkg 并打开它:\n\n\n\n这里我们看到 ia32(32位cpu) 和 x64(64位cpu) 文件夹，选择一个最适合你的硬件，并打开它。接下来，抓取里面的efi文件夹，并将其与 com.apple.recovery.boot 一起放在usb驱动器的根目录上。完成后，它看起来应该像这样:\n\n\n\n\n# rufus 方法\n\n 1. 下载 rufus\n 2. 将boot选项设置为“无引导”\n 3. 设置文件系统为 large fat32\n 4. 单击“开始”\n 5. 删除u盘分区中所有“autorun”文件\n\n\n\n接下来，在这个u盘的根目录下创建一个名为 com.apple.recovery.boot 的文件夹。然后移动下载的 basesystem 或 recoveryimage 文件。请确保将 .dmg 和 .chunklist 文件都复制到这个文件夹:\n\n\n\n现在获取之前下载的 opencorepkg 并打开它:\n\n\n\n这里我们看到 ia32(32位cpu) 和 x64(64位cpu) 文件夹，选择一个最适合你的硬件，并打开它。接下来，抓取里面的efi文件夹，并将其与 com.apple.recovery.boot 一起放在usb驱动器的根目录上。完成后，它看起来应该像这样:\n\n\n\n\n# diskpart 方法\n\ndiskpart 方法\n\n按 windows+r 并输入 diskpart 。\n\n现在运行以下命令:\n\n# list available disks\nlist disk\n# select your disk(ie. disk 1)\nselect disk 1\n# format the drive\nclean\n# convert to gpt\n# due to an odd bug with bootice and duetpkg, mbr disks will fail to boot\nconvert gpt\n# create a new partition\ncreate partition primary\n# select your partition\n# running clean ensures we only have 1 partition so it will be "partition 1"\nselect partition 1\n# format the drive as fat32\nformat fs=fat32 quick\n# assign a drive letter(ie. drive e, ensure it\'s not currently in use)\nassign letter=e\n\n\n接下来，在这个u盘的根目录下创建一个名为 com.apple.recovery.boot 的文件夹。然后移动下载的 basesystem 或 recoveryimage 文件。请确保将 .dmg 和 .chunklist 文件都复制到这个文件夹:\n\n\n\n现在获取之前下载的 opencorepkg 并打开它:\n\n\n\n这里我们看到 ia32(32位cpu) 和 x64(64位cpu) 文件夹，选择一个最适合你的硬件，并打开它。接下来，抓取其中的efi文件夹，并将其与 com.apple.recovery.boot 放在usb驱动器的根目录下。完成后，它看起来应该像这样:\n\n\n\n传统安装设置\n\n如果您的固件不支持uefi，请参阅以下说明:\n\n首先，你需要以下东西:\n\n * 7-zip\n * bootice\n * opencorepkg\n\n接下来，打开 bootice 并确保选择了正确的驱动器。\n\n\n\n接下来，输入“process mbr”，然后选择“restore mbr”，并在 opencorepkg 中从 utilities/legacyboot/ 中选择 boot0 文件:\n\nrestore mbr   restore boot0 file\n              \n\n返回主界面，选择 "process pbr" 然后选择 "restore pbr". 从 opencorepkg 的 utilities/legacyboot/ 中选择 boot1f32 文件:\n\nrestore pbr   restore boot1f32 file\n              \n\n一旦完成，回到你的usb，做最后一件事。从 utilities/legacyboot/ 中获取 bootx64 (64位cpu)或 bootia32 (32位cpu)文件，并将其放在驱动器的根目录下。 将这个文件重命名为boot 以确保duetpkg可以正常运行:\n\n\n\n\n# 现在所有这些都完成了，前往设置efi来完成你的工作',charsets:{cjk:!0}},{title:"收集文件",frontmatter:{},regularPath:"/ktext.html",relativePath:"ktext.md",key:"v-2d36c3cd",path:"/ktext.html",headers:[{level:2,title:"固件驱动",slug:"固件驱动",normalizedTitle:"固件驱动",charIndex:205},{level:3,title:"通用",slug:"通用",normalizedTitle:"通用",charIndex:215},{level:3,title:"传统用户",slug:"传统用户",normalizedTitle:"传统用户",charIndex:223},{level:2,title:"Kexts",slug:"kexts",normalizedTitle:"kexts",charIndex:231},{level:3,title:"必须拥有",slug:"必须拥有",normalizedTitle:"必须拥有",charIndex:242},{level:3,title:"VirtualSMC插件",slug:"virtualsmc插件",normalizedTitle:"virtualsmc插件",charIndex:252},{level:3,title:"显示",slug:"显示",normalizedTitle:"显示",charIndex:270},{level:3,title:"声音",slug:"声音",normalizedTitle:"声音",charIndex:278},{level:3,title:"网络适配器",slug:"网络适配器",normalizedTitle:"网络适配器",charIndex:286},{level:3,title:"USB",slug:"usb",normalizedTitle:"usb",charIndex:297},{level:3,title:"WiFi 和 蓝牙",slug:"wifi-和-蓝牙",normalizedTitle:"wifi 和 蓝牙",charIndex:306},{level:3,title:"AMD CPU 专用 kexts",slug:"amd-cpu-专用-kexts",normalizedTitle:"amd cpu 专用 kexts",charIndex:321},{level:3,title:"额外",slug:"额外",normalizedTitle:"额外",charIndex:343},{level:3,title:"笔记本电脑输入",slug:"笔记本电脑输入",normalizedTitle:"笔记本电脑输入",charIndex:351},{level:2,title:"SSDTs",slug:"ssdts",normalizedTitle:"ssdts",charIndex:362},{level:3,title:"台式电脑",slug:"台式电脑",normalizedTitle:"台式电脑",charIndex:373},{level:3,title:"高端台式电脑",slug:"高端台式电脑",normalizedTitle:"高端台式电脑",charIndex:383},{level:3,title:"笔记本电脑",slug:"笔记本电脑",normalizedTitle:"笔记本电脑",charIndex:351}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"固件驱动 通用 传统用户 Kexts 必须拥有 VirtualSMC插件 显示 声音 网络适配器 USB WiFi 和 蓝牙 AMD CPU 专用 kexts 额外 笔记本电脑输入 SSDTs 台式电脑 高端台式电脑 笔记本电脑",content:"# 收集文件\n\n本节是为引导macOS收集杂项文件，我们希望你在开始之前很好地了解你的硬件，并希望在此之前制作一个Hackintosh，因为我们不会在这里深入探讨。\n\n> 知道我的硬件是否被支持的最好的方法是什么?\n\n请参阅 硬件限制页面 ，以更好地了解macOS启动需要什么，Clover和OpenCore之间的硬件支持非常相似。\n\n> 有什么方法可以找出我有什么硬件?\n\n参见前一页:查找硬件\n\n\n\n * 固件驱动\n   * 通用\n   * 传统用户\n * Kexts\n   * 必须拥有\n   * VirtualSMC插件\n   * 显示\n   * 声音\n   * 网络适配器\n   * USB\n   * WiFi 和 蓝牙\n   * AMD CPU 专用 kexts\n   * 额外\n   * 笔记本电脑输入\n * SSDTs\n   * 台式电脑\n   * 高端台式电脑\n   * 笔记本电脑\n\n\n\n\n# 固件驱动\n\n固件驱动程序是OpenCore在UEFI环境中使用的驱动程序。它们主要是通过扩展OpenCore的补丁功能或在OpenCore选择器(例如HFS驱动器)中向您显示不同类型的驱动器来启动机器。\n\n * 位置说明: 这些文件 必须 放在 EFI/OC/Drivers/目录下\n\n\n# 通用\n\n必需的驱动程序\n\n对于大多数系统，你只需要 2个 .efi 的驱动程序启动和运行:\n\n * HfsPlus.efi(必需)\n   * 需要查看HFS卷(例如:macOS安装程序和恢复分区/映像). 不要混合使用其他HFS驱动\n   * 对于Sandy Bridge和更老的(以及低端Ivy Bridge(i3和Celerons))，请参阅下面的传统部分\n * OpenRuntime.efi(必需)\n   * 替代 AptioMemoryFix.efi, 用作OpenCore的扩展，以帮助修补boot.efi用于NVRAM修复和更好的内存管理。\n   * 提醒，这是捆绑在我们之前下载的OpenCorePkg中\n\n\n# 传统用户\n\n除上述外，如果您的硬件不支持UEFI(2011年和更早的时代)，那么您将需要以下内容。请密切关注每一个条目，因为你可能不需要全部使用这4个条目:\n\n * OpenUsbKbDxe.efi\n   * 用于在 行DuetPkg的传统系统,上的OpenCore picker， 不推荐，甚至在UEFI(Ivy Bridge和更新的)上有害)\n * HfsPlusLegacy.efi\n   * HfsPlus的传统变体，用于缺乏RDRAND指令支持的系统。这通常见于Sandy Bridge和更老的(以及低端的Ivy Bridge(i3和Celerons))\n   * 不要将其与HfsPlus.efi混合使用，根据您的硬件选择其中之一\n * OpenPartitionDxe\n   * 需要在OS X 10.7到10.9上引导恢复\n     * 此文件与OpenCorePkg捆绑在EFI/OC/Drivers下\n     * 注意:OpenDuet用户(例如:没有UEFI)将内置此驱动程序，不需要它\n\n这些文件将放在EFI的Drivers文件夹中\n\n32位的详细信息\n\n对于那些使用32位cpu的处理器，您也需要获取这些驱动程序\n\n * HfsPlus32\n   * 替代HfsPlusLegacy，但用于32位cpu，不要将其与其他HFS.efi驱动程序混合\n\n\n# Kexts\n\nkext是kernelextension,你可以把它想象成macOS的驱动程序，这些文件将进入你EFI中的Kexts文件夹。\n\n * Windows和Linux注意: kext看起来就像操作系统中的普通文件夹，仔细检查 你正在安装的文件夹是否有可见的.kext扩展名(如果缺少，不要手动添加)。\n   * 如果任何kext还包含一个 .dSYM 文件，你可以简单地删除它。它们只用于调试目的。\n * 位置注意: 这些文件 必须 放在 EFI/OC/Kexts/ 目录下。\n\n下面列出的大多数kext都可以在build repo中预编译。这里的kext在每次有新的提交时都被编译。\n\n\n# 必须拥有\n\n必需的kext\n\n如果没有下面的2个，系统就无法启动:\n\n * Lilu(必需)\n   * 一个为许多进程打补丁的kext，这是AppleALC、WhateverGreen、VirtualSMC和许多其他kext所必需的。没有Lilu，他们就无法工作。\n   * 请注意，虽然Lilu早在Mac OS X 10.4版本就支持，但许多插件只能在较新的版本上使用。\n * VirtualSMC(必需)\n   * 模拟真实mac上的SMC芯片，没有这个macOS将无法启动\n   * 要求Mac OS x10.4或更新版本\n\n\n# VirtualSMC插件\n\n以下插件不需要引导,仅仅添加额外的硬件监控等系统功能。除非另有说明，这些插件都是随VirtualSMC附带的\n\nTIP\n\n虽然VirtualSMC支持10.4，但插件可能需要更新的版本。\n\n * SMCProcessor.kext\n   * 用于监控Intel CPU温度\n   * 不适用于AMD CPU系统\n   * 要求Mac OS X 10.7或更新版本\n * SMCAMDProcessor\n   * 用于监控AMD zen系统的CPU温度\n   * 正在积极开发中，可能不稳定\n   * 需要 AMDRyzenCPUPowerManagement (参见 AMD CPU 专用的 Kexts)\n   * 需要macOS 10.13或更新版本\n * SMCRadeonGPU\n   * 用于监控AMD GPU系统上的GPU温度\n   * 需要来自相同存储库的RadeonSensor\n   * 需要macOS 11或更新版本\n * SMCSuperIO.kext\n   * 用于监控风扇转速\n   * 不适用于基于AMD CPU的系统\n   * 需要Mac OS X 10.6或更新的版本\n * SMCLightSensor.kext\n   * 用于笔记本电脑的环境光传感器\n   * 如果你没有环境光传感器，请不要使用。 (例如台式电脑), 否则会导致问题\n   * 需要Mac OS X 10.6或更新的版本\n * SMCBatteryManager.kext\n   * 用于测量笔记本电脑的电池读数\n   * 不要在台式机上使用\n   * 需要Mac OS X 10.4或更新的版本\n * SMCDellSensors.kext\n   * 允许对支持系统管理模式(SMM)的戴尔机器的风扇进行更精细的监控和控制\n   * 如果你没有支持的Dell机器，请不要使用, 主要是Dell笔记本电脑可以从这个kext中受益\n   * 需要Mac OS X 10.7或更新的版本\n\n\n# 显示\n\n * WhateverGreen(必需)\n   * 用于图形补丁、DRM修复、板号检查、帧缓冲区修复等;所有gpu都受益于这个kext。\n   * 注意SSDT-PNLF.dsl文件只适用于笔记本电脑和AIOs，请参阅开始使用ACPI 以获取更多信息\n   * 需要Mac OS X 10.6或更新的版本\n\n\n# 声音\n\n * AppleALC\n   * 用于AppleHDA补丁，允许支持大多数集成的声音控制器\n   * AppleALCU.kext 是AppleALC的精简版，只支持数字音频，但你仍然可以使用 AppleALC.kext 在数字音频系统上\n   * AMD 15h/16h 可能使用AppleALC有问题。而 Ryzen/Threadripper 系统很少支持mic\n   * 需要OS X 10.4或更新版本\n\n传统声音 Kext\n\n对于那些计划引导10.7或更老版本的用户，可以选择这些kext:\n\n * VoodooHDA\n   \n   * 需要OS X 10.6或更新版本\n\n * VoodooHDA-FAT\n   \n   * 与上述类似，但是支持32位和64位内核，因此非常适合OS X 10.4-5引导和32位的cpu\n\n\n# 网络适配器\n\n在这里，我们假设您知道系统有什么网卡，提醒您产品规格页面很可能会列出网卡的类型。\n\n * IntelMausi\n   * 对于大多数Intel网卡，基于I211的芯片组将需要SmallTreeIntel82576 kext\n   * Intel的82578、82579、I217、I218和I219网卡得到官方支持\n   * 需要OS X 10.9或更新版本，10.6-10.8旧的操作系统用户可以使用IntelSnowMausi代替\n * AppleIGB\n   * 需要在macOS Monterey及以上版本上运行I211网卡\n   * 可能在一些网卡上有不稳定的问题，建议留在Big Sur上并使用SmallTree\n   * 大多数运行Intel网卡的AMD主板都需要\n   * 需要macOS 12及以上版本\n * SmallTreeIntel82576\n   * 在macOS版本上运行到Big Sur的I211网卡需要，基于SmallTree kext，但补丁支持I211(在macOS 12 Monterey 或以上不起作用)\n   * 大多数运行Intel网卡的AMD主板都需要\n   * 需要OS X 10.9-12(v1.0.6)， macOS 10.13-14(v1.2.5)， macOS 10.15+(v1.3.0)\n * AtherosE2200Ethernet\n   * 需要Atheros和Killer NICs\n   * 需要OS X 10.8或更新的版本\n   * 注意:Atheros Killer E2500模型实际上是基于Realtek的，对于这些系统，请使用RealtekRTL8111 代替\n * RealtekRTL8111\n   * 用于Realtek的千兆以太网\n   * v2.2.0及以下版本需要OS X 10.8及以上，v2.2.2版本需要macOS 10.12及以上，v2.3.0及以上版本需要macOS 10.14及以上\n   * 注意: 有时最新版本的kext可能无法在让您的以太网正常工作。如果你看到这个问题，请尝试旧版本。\n * LucyRTL8125Ethernet\n   * 用于Realtek的2.5Gb以太网\n   * 需要macOS 10.15或更新的版本\n * 对于英特尔的I225-V网卡，补丁在桌面 Comet Lake DeviceProperties 部分中提到，不需要kext。\n   * 需要macOS 10.15或更新的版本\n * 对于英特尔的I350网卡，补丁在HEDT Sandy and Ivy Bridge-E DeviceProperties 部分中提到，不需要kext。\n   * 需要OS X 10.10或更新的版本\n\n传统网络适配器的Kexts\n\n无论是传统的macOS安装还是旧的PC硬件。\n\n * AppleIntele1000e\n   * 主要用于基于10/100MBe的Intel以太网控制器\n   * 需要10.6或更新的版本\n * RealtekRTL8100\n   * 主要用于基于10/100MBe的Realtek以太网控制器\n   * 需要macOS 10.12或更新的v2.0.0+\n * BCM5722D\n   * 主要适用于基于BCM5722的Broadcom以太网控制器\n   * 需要OS X 10.6或更新的版本\n\n还请记住，某些网卡实际上在macOS中是原生支持的:\n\n原生网络适配器\n\n# Aquantia 系列\n\n# AppleEthernetAquantiaAqtion.kext\npci1d6a,1    = Aquantia AQC107\npci1d6a,d107 = Aquantia AQC107\npci1d6a,7b1  = Aquantia AQC107\npci1d6a,80b1 = Aquantia AQC107\npci1d6a,87b1 = Aquantia AQC107\npci1d6a,88b1 = Aquantia AQC107\npci1d6a,89b1 = Aquantia AQC107\npci1d6a,91b1 = Aquantia AQC107\npci1d6a,92b1 = Aquantia AQC107\npci1d6a,c0   = Aquantia AQC113\npci1d6a,4c0  = Aquantia AQC113\n\n\n注意: 由于许多aquania NICs上有一些过时的固件，您可能需要在Linux/Windows中更新固件，以确保它与macos兼容。\n\n# Intel 系列\n\n# AppleIntel8254XEthernet.kext\npci8086,1096 = Intel 80003ES2LAN\npci8086,100f = Intel 82545EM\npci8086,105e = Intel 82571EB/82571GB\n\n# AppleIntelI210Ethernet.kext\npci8086,1533 = Intel I210\npci8086,15f2 = Intel I225LM (macOS 10.15新增)\n\n# Intel82574L.kext\npci8086,104b = Intel 82566DC\npci8086,10f6 = Intel 82574L\n\n\n\n# Broadcom 系列\n\n# AppleBCM5701Ethernet.kext\npci14e4,1684 = Broadcom BCM5764M\npci14e4,16b0 = Broadcom BCM57761\npci14e4,16b4 = Broadcom BCM57765\npci14e4,1682 = Broadcom BCM57762\npci14e4,1686 = Broadcom BCM57766\n\n\n\n# USB\n\n * USBToolBox (tool 和 kext)\n   \n   * 用于Windows和macOS的USB映射工具。\n   * 强烈建议在安装macOS之前映射你的USB端口，以避免任何端口限制问题\n   * 功能\n     * 支持从Windows和macOS映射(Linux支持正在进行中)\n     * 可以使用USBToolBox kext或本地Apple kext构建一个地图(AppleUSBHostMergeProperties)\n     * 支持多种匹配方式\n     * 支持配套端口(Windows)\n\n * XHCI-unsupported\n   \n   * 非原生USB控制器需要\n   * 基于AMD CPU的系统不需要这个\n   * 需要这些的常见芯片组:\n     * H370\n     * B360\n     * H310\n     * Z390 (Mojave和更新版本不需要)\n     * X79\n     * X99\n     * ASRock Intel 主板 (B460/Z490+板不需要)\n\n\n# WiFi 和 蓝牙\n\n# 非原生蓝牙卡\n\n * BlueToolFixup\n   * 为macOS 12+蓝牙协议栈打补丁以支持第三方卡\n   * 所有非原生(非苹果博通、英特尔等)蓝牙卡都需要\n   * 包含在BrcmPatchRAM zip文件中\n   * 不要在macOS 11和更早的版本使用\n\n# Intel\n\n * AirportItlwm\n   * 增加了对多种英特尔无线卡的支持，并通过IO80211Family集成在恢复中原生工作\n   * 需要macOS 10.13或更新版本，并且需要Apple的安全引导才能正常运行\n * Itlwm\n   * 对于无法启用苹果安全引导的系统，可选择AirportItlwm\n   * 需要 Heliport\n   * 它将被视为以太网卡，你必须通过Heliport连接Wi-Fi\n   * 在macOS恢复中不起作用\n * IntelBluetoothFirmware\n   * 当与英特尔无线网卡配对时，为macOS添加蓝牙支持\n   * 除了修补macOS中的bug之外，还可以使用IntelBTPatcher(包含)\n   * 需要macOS 10.13或更新的版本\n   * 在macOS 10.13到11中，你还需要intelbluetooth oothinjector(包含)\n\n更多关于启用airportlwm的信息\n\n要使用OpenCore启用AirportItlwm支持，你需要:\n\n * 启用 Misc -> Security -> SecureBootModel 将其设置为 Default 或其他有效值\n   * 这将在本指南后面和安装后指南中讨论: Apple Secure Boot\n * 如果你不能启用SecureBootModel，你仍然可以强制注入IO80211Family(非常不建议)\n   * 在config.plist文件的 Kernel -> Force 下设置以下内容。 (本指南稍后将讨论):\n\n\n\n# Broadcom\n\n * AirportBrcmFixup\n   * 用于为非apple /非fenvi Broadcom卡打补丁 不能在Intel, Killer, Realtek等上工作\n   * 需要OS X 10.10或更新的版本\n   * 关于Big Sur参见Big Sur 已知问题 了解关于AirPortBrcm4360驱动器的额外步骤。\n * BrcmPatchRAM\n   * 用于在Broadcom蓝牙芯片组上上传固件，所有非apple /非fenvi机场卡都需要。\n   * 与BrcmFirmwareData.kext配对\n     * BrcmPatchRAM3用于10.15+(必须与BrcmBluetoothInjector配对)\n     * BrcmPatchRAM2为10.11-10.14\n     * BrcmPatchRAM为10.8-10.10\n   * 在macOS 10.11到macOS 11中，你还需要brcmbluetooth oothinjector(包含)\n\nBrcmPatchRAM加载顺序\n\nKernel -> Add中的顺序应该是:\n\n 1. BrcmBluetoothInjector (如果需要)\n 2. BrcmFirmwareData\n 3. BrcmPatchRAM3 (或 BrcmPatchRAM2/BrcmPatchRAM)\n\nBlueToolFixup可以在Lilu之后的任何地方使用。\n\n然而，ProperTree将为您处理此问题，因此您无需担心\n\n\n# AMD CPU 专用 kexts\n\n * XLNCUSBFIX\n   * AMD FX系统的USB修复，不建议Ryzen使用\n   * 需要macOS 10.13或更新的版本\n * VoodooHDA\n   * 用于FX系统和前面板Mic+ Ryzen系统的音频支持，不要与AppleALC混合。音频质量明显比Zen cpu上的AppleALC差\n   * 需要OS X 10.6或更新的版本\n   * 不建议在macOS 11.3或更高版本上使用此kext，因为您需要修改macOS文件系统并禁用SIP\n * AMDRyzenCPUPowerManagement\n   * Ryzen系统的CPU电源管理\n   * 正在积极开发中，可能不稳定\n   * 需要macOS 10.13或更新的版本\n\n\n# 额外\n\n * AppleMCEReporterDisabler\n   * 在macOS 12.3和更高版本的AMD系统上，以及macOS 10.15和更高版本的双插槽Intel系统上都需要安装。\n   * 受影响的smbios:\n     * MacPro6,1\n     * MacPro7,1\n     * iMacPro1,1\n * CpuTscSync\n   * 需要同步TSC的英特尔HEDT和服务器主板,没有这个macOS可能非常慢甚至无法开机。\n   * 不能在AMD cpu上工作\n   * 需要OS X 10.8或更新的版本\n * NVMeFix\n   * 用于修复非apple NVMe上的电源管理和初始化\n   * 需要macOS 10.14或更新的版本\n * SATA-Unsupported\n   * 增加了对大量SATA控制器的支持，主要适用于在macOS中遇到SATA驱动器问题的笔记本电脑。我们建议首先进行测试。\n   * Big Sur+ 注: CtlnaAHCIPort 将需要使用，因为许多控制器被从二进制本身删除\n     * Catalina 和更老的则不必担心\n * CPUTopologyRebuild\n   * 一个实验性的Lilu插件，用于优化Alder Lake的异构核心配置。 只适用于Alder Lake cpu\n * RestrictEvents\n   * 为macOS的各种功能打补丁，请参阅这个说明 了解更多信息\n\n传统SATA kext\n * AHCIPortInjector\n   * 传统的SATA/AHCI注入器，主要适用于Penryn时代的老旧机器\n * ATAPortInjector\n   * 传统的ATA注入器，主要与IDE和ATA设备相关(例如:当BIOS中没有AHCI选项时)\n\n\n# 笔记本电脑输入\n\n要弄清楚你使用的是什么样的键盘和触控板，请检查Windows中的设备管理器或Linux中的 dmesg | grep -i input\n\nWARNING\n\n大多数笔记本电脑的键盘是PS2 !即使你有I2C、USB或SMBus触控板，你也会想要使用VoodooPS2。\n\n# PS2键盘/触摸板\n\n * VoodooPS2\n   * 适用于各种PS2键盘，鼠标和触摸板\n   * 需要macOS 10.11或更新的MT2 (Magic Trackpad 2)功能\n * RehabMan's VoodooPS2\n   * 适用于带有PS2键盘、鼠标和触控板的旧系统，或者当你不想使用VoodooInput时\n   * 支持macOS 10.6 +\n\n# SMBus 触摸板\n\n * VoodooRMI\n   * 用于带有Synaptics SMBus触控板的系统\n   * 需要macOS 10.11或更新版本的MT2功能\n   * 依赖于Acidanthera的VoodooPS2\n * VoodooSMBus\n   * 适用于带有ELAN SMBus触控板的系统\n   * 目前支持macOS 10.14或更新版本\n\n# I2C/USB HID 设备\n\n * VoodooI2C\n   * 支持macOS 10.11 +\n   * 连接到I2C控制器，允许插件与I2C触摸板交谈\n   * 使用以下插件仍然需要VoodooI2C USB设备\n   * 必须与一个或多个插件配对，如下所示:\n\nVoodooI2C 插件\n\n连接类型                        插件                  说明\nMultitouch HID              VoodooI2CHID        可以与I2C/USB触摸屏和触摸板一起使用\nELAN Proprietary            VoodooI2CElan       ELAN1200+需要VoodooI2CHID代替\nFTE1001 touchpad            VoodooI2CFTE        \nAtmel Multitouch Protocol   VoodooI2CAtmelMXT   \nSynaptics HID               VoodooRMI           I2C Synaptic触控板(只在I2C模式下需要VoodooI2C)\nAlps HID                    AlpsHID             可与USB或I2C Alps触控板使用。主要出现在戴尔(Dell)笔记本电脑和惠普(HP)的一些EliteBook机型上\n\n# 杂项\n\n * ECEnabler\n   * 修复在许多设备上读取电池状态(允许读取超过8位的EC字段)\n   * 支持OS X 10.7及以上版本(10.4 - 10.6版本不需要)\n * BrightnessKeys\n   * 自动修复亮度快捷键\n\n请参考 Kexts.md 获得支持的kext的完整列表\n\n\n# SSDTs\n\n你在AcpiSamples文件夹中看到所有的ssdt，想知道你是否需要它们。对于我们来说，我们将介绍您在配置的特定ACPI部分中需要的ssdt.plist，因为您需要的ssd是特定于平台的。有些甚至是特定于系统的，需要配置它们，如果我现在给您一个可供选择的ssd列表，您很容易就会迷失方向。\n\nACPI入门 有一个关于ssdt的扩展部分，包括在不同的平台上编译它们。\n\nA quick TL;DR of needed SSDTs(这是源代码，你必须将它们编译到.aml文件中):\n\n\n# 台式电脑\n\nPLATFORMS                 CPU                            EC             AWAC        NVRAM      USB\nPenryn                    N/A                            SSDT-EC        N/A         N/A        N/A\nLynnfield and Clarkdale\nSandyBridge               CPU-PM (Run in Post-Install)\nIvy Bridge\nHaswell                   SSDT-PLUG\nBroadwell\nSkylake                                                  SSDT-EC-USBX\nKaby Lake\nCoffee Lake                                                             SSDT-AWAC   SSDT-PMC\nComet Lake                                                                          N/A        SSDT-RHUB\nAMD (15/16h)              N/A                                           N/A                    N/A\nAMD (17/19h)              SSDT-CPUR for B550 and A520\n\n\n# 高端台式电脑\n\nPLATFORMS              CPU         EC             RTC               PCI\nNehalem and Westmere   N/A         SSDT-EC        N/A               N/A\nSandy Bridge-E                                                      SSDT-UNC\nIvy Bridge-E\nHaswell-E              SSDT-PLUG   SSDT-EC-USBX   SSDT-RTC0-RANGE\nBroadwell-E\nSkylake-X                                                           N/A\n\n\n# 笔记本电脑\n\nPLATFORMS                                CPU                            EC             BACKLIGHT   I2C TRACKPAD   AWAC        USB         IRQ\nClarksfield and Arrandale                N/A                            SSDT-EC        SSDT-PNLF   N/A            N/A         N/A         IRQ SSDT\nSandyBridge                              CPU-PM (Run in Post-Install)\nIvy Bridge\nHaswell                                  SSDT-PLUG                                                 SSDT-GPI0\nBroadwell\nSkylake                                                                 SSDT-EC-USBX                                                      N/A\nKaby Lake\nCoffee Lake (8th Gen) and Whiskey Lake                                                 SSDT-PNLF                  SSDT-AWAC\nCoffee Lake (9th Gen)\nComet Lake\nIce Lake                                                                                                                      SSDT-RHUB\n\n继续:\n\nPLATFORMS                                NVRAM      IMEI\nClarksfield and Arrandale                N/A        N/A\nSandy Bridge                                        SSDT-IMEI\nIvy Bridge\nHaswell                                             N/A\nBroadwell\nSkylake\nKaby Lake\nCoffee Lake (8th Gen) and Whiskey Lake\nCoffee Lake (9th Gen)                    SSDT-PMC\nComet Lake                               N/A\nIce Lake\n\n\n# 现在，所有这些都完成了，前往 ACPI入门",normalizedContent:"# 收集文件\n\n本节是为引导macos收集杂项文件，我们希望你在开始之前很好地了解你的硬件，并希望在此之前制作一个hackintosh，因为我们不会在这里深入探讨。\n\n> 知道我的硬件是否被支持的最好的方法是什么?\n\n请参阅 硬件限制页面 ，以更好地了解macos启动需要什么，clover和opencore之间的硬件支持非常相似。\n\n> 有什么方法可以找出我有什么硬件?\n\n参见前一页:查找硬件\n\n\n\n * 固件驱动\n   * 通用\n   * 传统用户\n * kexts\n   * 必须拥有\n   * virtualsmc插件\n   * 显示\n   * 声音\n   * 网络适配器\n   * usb\n   * wifi 和 蓝牙\n   * amd cpu 专用 kexts\n   * 额外\n   * 笔记本电脑输入\n * ssdts\n   * 台式电脑\n   * 高端台式电脑\n   * 笔记本电脑\n\n\n\n\n# 固件驱动\n\n固件驱动程序是opencore在uefi环境中使用的驱动程序。它们主要是通过扩展opencore的补丁功能或在opencore选择器(例如hfs驱动器)中向您显示不同类型的驱动器来启动机器。\n\n * 位置说明: 这些文件 必须 放在 efi/oc/drivers/目录下\n\n\n# 通用\n\n必需的驱动程序\n\n对于大多数系统，你只需要 2个 .efi 的驱动程序启动和运行:\n\n * hfsplus.efi(必需)\n   * 需要查看hfs卷(例如:macos安装程序和恢复分区/映像). 不要混合使用其他hfs驱动\n   * 对于sandy bridge和更老的(以及低端ivy bridge(i3和celerons))，请参阅下面的传统部分\n * openruntime.efi(必需)\n   * 替代 aptiomemoryfix.efi, 用作opencore的扩展，以帮助修补boot.efi用于nvram修复和更好的内存管理。\n   * 提醒，这是捆绑在我们之前下载的opencorepkg中\n\n\n# 传统用户\n\n除上述外，如果您的硬件不支持uefi(2011年和更早的时代)，那么您将需要以下内容。请密切关注每一个条目，因为你可能不需要全部使用这4个条目:\n\n * openusbkbdxe.efi\n   * 用于在 行duetpkg的传统系统,上的opencore picker， 不推荐，甚至在uefi(ivy bridge和更新的)上有害)\n * hfspluslegacy.efi\n   * hfsplus的传统变体，用于缺乏rdrand指令支持的系统。这通常见于sandy bridge和更老的(以及低端的ivy bridge(i3和celerons))\n   * 不要将其与hfsplus.efi混合使用，根据您的硬件选择其中之一\n * openpartitiondxe\n   * 需要在os x 10.7到10.9上引导恢复\n     * 此文件与opencorepkg捆绑在efi/oc/drivers下\n     * 注意:openduet用户(例如:没有uefi)将内置此驱动程序，不需要它\n\n这些文件将放在efi的drivers文件夹中\n\n32位的详细信息\n\n对于那些使用32位cpu的处理器，您也需要获取这些驱动程序\n\n * hfsplus32\n   * 替代hfspluslegacy，但用于32位cpu，不要将其与其他hfs.efi驱动程序混合\n\n\n# kexts\n\nkext是kernelextension,你可以把它想象成macos的驱动程序，这些文件将进入你efi中的kexts文件夹。\n\n * windows和linux注意: kext看起来就像操作系统中的普通文件夹，仔细检查 你正在安装的文件夹是否有可见的.kext扩展名(如果缺少，不要手动添加)。\n   * 如果任何kext还包含一个 .dsym 文件，你可以简单地删除它。它们只用于调试目的。\n * 位置注意: 这些文件 必须 放在 efi/oc/kexts/ 目录下。\n\n下面列出的大多数kext都可以在build repo中预编译。这里的kext在每次有新的提交时都被编译。\n\n\n# 必须拥有\n\n必需的kext\n\n如果没有下面的2个，系统就无法启动:\n\n * lilu(必需)\n   * 一个为许多进程打补丁的kext，这是applealc、whatevergreen、virtualsmc和许多其他kext所必需的。没有lilu，他们就无法工作。\n   * 请注意，虽然lilu早在mac os x 10.4版本就支持，但许多插件只能在较新的版本上使用。\n * virtualsmc(必需)\n   * 模拟真实mac上的smc芯片，没有这个macos将无法启动\n   * 要求mac os x10.4或更新版本\n\n\n# virtualsmc插件\n\n以下插件不需要引导,仅仅添加额外的硬件监控等系统功能。除非另有说明，这些插件都是随virtualsmc附带的\n\ntip\n\n虽然virtualsmc支持10.4，但插件可能需要更新的版本。\n\n * smcprocessor.kext\n   * 用于监控intel cpu温度\n   * 不适用于amd cpu系统\n   * 要求mac os x 10.7或更新版本\n * smcamdprocessor\n   * 用于监控amd zen系统的cpu温度\n   * 正在积极开发中，可能不稳定\n   * 需要 amdryzencpupowermanagement (参见 amd cpu 专用的 kexts)\n   * 需要macos 10.13或更新版本\n * smcradeongpu\n   * 用于监控amd gpu系统上的gpu温度\n   * 需要来自相同存储库的radeonsensor\n   * 需要macos 11或更新版本\n * smcsuperio.kext\n   * 用于监控风扇转速\n   * 不适用于基于amd cpu的系统\n   * 需要mac os x 10.6或更新的版本\n * smclightsensor.kext\n   * 用于笔记本电脑的环境光传感器\n   * 如果你没有环境光传感器，请不要使用。 (例如台式电脑), 否则会导致问题\n   * 需要mac os x 10.6或更新的版本\n * smcbatterymanager.kext\n   * 用于测量笔记本电脑的电池读数\n   * 不要在台式机上使用\n   * 需要mac os x 10.4或更新的版本\n * smcdellsensors.kext\n   * 允许对支持系统管理模式(smm)的戴尔机器的风扇进行更精细的监控和控制\n   * 如果你没有支持的dell机器，请不要使用, 主要是dell笔记本电脑可以从这个kext中受益\n   * 需要mac os x 10.7或更新的版本\n\n\n# 显示\n\n * whatevergreen(必需)\n   * 用于图形补丁、drm修复、板号检查、帧缓冲区修复等;所有gpu都受益于这个kext。\n   * 注意ssdt-pnlf.dsl文件只适用于笔记本电脑和aios，请参阅开始使用acpi 以获取更多信息\n   * 需要mac os x 10.6或更新的版本\n\n\n# 声音\n\n * applealc\n   * 用于applehda补丁，允许支持大多数集成的声音控制器\n   * applealcu.kext 是applealc的精简版，只支持数字音频，但你仍然可以使用 applealc.kext 在数字音频系统上\n   * amd 15h/16h 可能使用applealc有问题。而 ryzen/threadripper 系统很少支持mic\n   * 需要os x 10.4或更新版本\n\n传统声音 kext\n\n对于那些计划引导10.7或更老版本的用户，可以选择这些kext:\n\n * voodoohda\n   \n   * 需要os x 10.6或更新版本\n\n * voodoohda-fat\n   \n   * 与上述类似，但是支持32位和64位内核，因此非常适合os x 10.4-5引导和32位的cpu\n\n\n# 网络适配器\n\n在这里，我们假设您知道系统有什么网卡，提醒您产品规格页面很可能会列出网卡的类型。\n\n * intelmausi\n   * 对于大多数intel网卡，基于i211的芯片组将需要smalltreeintel82576 kext\n   * intel的82578、82579、i217、i218和i219网卡得到官方支持\n   * 需要os x 10.9或更新版本，10.6-10.8旧的操作系统用户可以使用intelsnowmausi代替\n * appleigb\n   * 需要在macos monterey及以上版本上运行i211网卡\n   * 可能在一些网卡上有不稳定的问题，建议留在big sur上并使用smalltree\n   * 大多数运行intel网卡的amd主板都需要\n   * 需要macos 12及以上版本\n * smalltreeintel82576\n   * 在macos版本上运行到big sur的i211网卡需要，基于smalltree kext，但补丁支持i211(在macos 12 monterey 或以上不起作用)\n   * 大多数运行intel网卡的amd主板都需要\n   * 需要os x 10.9-12(v1.0.6)， macos 10.13-14(v1.2.5)， macos 10.15+(v1.3.0)\n * atherose2200ethernet\n   * 需要atheros和killer nics\n   * 需要os x 10.8或更新的版本\n   * 注意:atheros killer e2500模型实际上是基于realtek的，对于这些系统，请使用realtekrtl8111 代替\n * realtekrtl8111\n   * 用于realtek的千兆以太网\n   * v2.2.0及以下版本需要os x 10.8及以上，v2.2.2版本需要macos 10.12及以上，v2.3.0及以上版本需要macos 10.14及以上\n   * 注意: 有时最新版本的kext可能无法在让您的以太网正常工作。如果你看到这个问题，请尝试旧版本。\n * lucyrtl8125ethernet\n   * 用于realtek的2.5gb以太网\n   * 需要macos 10.15或更新的版本\n * 对于英特尔的i225-v网卡，补丁在桌面 comet lake deviceproperties 部分中提到，不需要kext。\n   * 需要macos 10.15或更新的版本\n * 对于英特尔的i350网卡，补丁在hedt sandy and ivy bridge-e deviceproperties 部分中提到，不需要kext。\n   * 需要os x 10.10或更新的版本\n\n传统网络适配器的kexts\n\n无论是传统的macos安装还是旧的pc硬件。\n\n * appleintele1000e\n   * 主要用于基于10/100mbe的intel以太网控制器\n   * 需要10.6或更新的版本\n * realtekrtl8100\n   * 主要用于基于10/100mbe的realtek以太网控制器\n   * 需要macos 10.12或更新的v2.0.0+\n * bcm5722d\n   * 主要适用于基于bcm5722的broadcom以太网控制器\n   * 需要os x 10.6或更新的版本\n\n还请记住，某些网卡实际上在macos中是原生支持的:\n\n原生网络适配器\n\n# aquantia 系列\n\n# appleethernetaquantiaaqtion.kext\npci1d6a,1    = aquantia aqc107\npci1d6a,d107 = aquantia aqc107\npci1d6a,7b1  = aquantia aqc107\npci1d6a,80b1 = aquantia aqc107\npci1d6a,87b1 = aquantia aqc107\npci1d6a,88b1 = aquantia aqc107\npci1d6a,89b1 = aquantia aqc107\npci1d6a,91b1 = aquantia aqc107\npci1d6a,92b1 = aquantia aqc107\npci1d6a,c0   = aquantia aqc113\npci1d6a,4c0  = aquantia aqc113\n\n\n注意: 由于许多aquania nics上有一些过时的固件，您可能需要在linux/windows中更新固件，以确保它与macos兼容。\n\n# intel 系列\n\n# appleintel8254xethernet.kext\npci8086,1096 = intel 80003es2lan\npci8086,100f = intel 82545em\npci8086,105e = intel 82571eb/82571gb\n\n# appleinteli210ethernet.kext\npci8086,1533 = intel i210\npci8086,15f2 = intel i225lm (macos 10.15新增)\n\n# intel82574l.kext\npci8086,104b = intel 82566dc\npci8086,10f6 = intel 82574l\n\n\n\n# broadcom 系列\n\n# applebcm5701ethernet.kext\npci14e4,1684 = broadcom bcm5764m\npci14e4,16b0 = broadcom bcm57761\npci14e4,16b4 = broadcom bcm57765\npci14e4,1682 = broadcom bcm57762\npci14e4,1686 = broadcom bcm57766\n\n\n\n# usb\n\n * usbtoolbox (tool 和 kext)\n   \n   * 用于windows和macos的usb映射工具。\n   * 强烈建议在安装macos之前映射你的usb端口，以避免任何端口限制问题\n   * 功能\n     * 支持从windows和macos映射(linux支持正在进行中)\n     * 可以使用usbtoolbox kext或本地apple kext构建一个地图(appleusbhostmergeproperties)\n     * 支持多种匹配方式\n     * 支持配套端口(windows)\n\n * xhci-unsupported\n   \n   * 非原生usb控制器需要\n   * 基于amd cpu的系统不需要这个\n   * 需要这些的常见芯片组:\n     * h370\n     * b360\n     * h310\n     * z390 (mojave和更新版本不需要)\n     * x79\n     * x99\n     * asrock intel 主板 (b460/z490+板不需要)\n\n\n# wifi 和 蓝牙\n\n# 非原生蓝牙卡\n\n * bluetoolfixup\n   * 为macos 12+蓝牙协议栈打补丁以支持第三方卡\n   * 所有非原生(非苹果博通、英特尔等)蓝牙卡都需要\n   * 包含在brcmpatchram zip文件中\n   * 不要在macos 11和更早的版本使用\n\n# intel\n\n * airportitlwm\n   * 增加了对多种英特尔无线卡的支持，并通过io80211family集成在恢复中原生工作\n   * 需要macos 10.13或更新版本，并且需要apple的安全引导才能正常运行\n * itlwm\n   * 对于无法启用苹果安全引导的系统，可选择airportitlwm\n   * 需要 heliport\n   * 它将被视为以太网卡，你必须通过heliport连接wi-fi\n   * 在macos恢复中不起作用\n * intelbluetoothfirmware\n   * 当与英特尔无线网卡配对时，为macos添加蓝牙支持\n   * 除了修补macos中的bug之外，还可以使用intelbtpatcher(包含)\n   * 需要macos 10.13或更新的版本\n   * 在macos 10.13到11中，你还需要intelbluetooth oothinjector(包含)\n\n更多关于启用airportlwm的信息\n\n要使用opencore启用airportitlwm支持，你需要:\n\n * 启用 misc -> security -> securebootmodel 将其设置为 default 或其他有效值\n   * 这将在本指南后面和安装后指南中讨论: apple secure boot\n * 如果你不能启用securebootmodel，你仍然可以强制注入io80211family(非常不建议)\n   * 在config.plist文件的 kernel -> force 下设置以下内容。 (本指南稍后将讨论):\n\n\n\n# broadcom\n\n * airportbrcmfixup\n   * 用于为非apple /非fenvi broadcom卡打补丁 不能在intel, killer, realtek等上工作\n   * 需要os x 10.10或更新的版本\n   * 关于big sur参见big sur 已知问题 了解关于airportbrcm4360驱动器的额外步骤。\n * brcmpatchram\n   * 用于在broadcom蓝牙芯片组上上传固件，所有非apple /非fenvi机场卡都需要。\n   * 与brcmfirmwaredata.kext配对\n     * brcmpatchram3用于10.15+(必须与brcmbluetoothinjector配对)\n     * brcmpatchram2为10.11-10.14\n     * brcmpatchram为10.8-10.10\n   * 在macos 10.11到macos 11中，你还需要brcmbluetooth oothinjector(包含)\n\nbrcmpatchram加载顺序\n\nkernel -> add中的顺序应该是:\n\n 1. brcmbluetoothinjector (如果需要)\n 2. brcmfirmwaredata\n 3. brcmpatchram3 (或 brcmpatchram2/brcmpatchram)\n\nbluetoolfixup可以在lilu之后的任何地方使用。\n\n然而，propertree将为您处理此问题，因此您无需担心\n\n\n# amd cpu 专用 kexts\n\n * xlncusbfix\n   * amd fx系统的usb修复，不建议ryzen使用\n   * 需要macos 10.13或更新的版本\n * voodoohda\n   * 用于fx系统和前面板mic+ ryzen系统的音频支持，不要与applealc混合。音频质量明显比zen cpu上的applealc差\n   * 需要os x 10.6或更新的版本\n   * 不建议在macos 11.3或更高版本上使用此kext，因为您需要修改macos文件系统并禁用sip\n * amdryzencpupowermanagement\n   * ryzen系统的cpu电源管理\n   * 正在积极开发中，可能不稳定\n   * 需要macos 10.13或更新的版本\n\n\n# 额外\n\n * applemcereporterdisabler\n   * 在macos 12.3和更高版本的amd系统上，以及macos 10.15和更高版本的双插槽intel系统上都需要安装。\n   * 受影响的smbios:\n     * macpro6,1\n     * macpro7,1\n     * imacpro1,1\n * cputscsync\n   * 需要同步tsc的英特尔hedt和服务器主板,没有这个macos可能非常慢甚至无法开机。\n   * 不能在amd cpu上工作\n   * 需要os x 10.8或更新的版本\n * nvmefix\n   * 用于修复非apple nvme上的电源管理和初始化\n   * 需要macos 10.14或更新的版本\n * sata-unsupported\n   * 增加了对大量sata控制器的支持，主要适用于在macos中遇到sata驱动器问题的笔记本电脑。我们建议首先进行测试。\n   * big sur+ 注: ctlnaahciport 将需要使用，因为许多控制器被从二进制本身删除\n     * catalina 和更老的则不必担心\n * cputopologyrebuild\n   * 一个实验性的lilu插件，用于优化alder lake的异构核心配置。 只适用于alder lake cpu\n * restrictevents\n   * 为macos的各种功能打补丁，请参阅这个说明 了解更多信息\n\n传统sata kext\n * ahciportinjector\n   * 传统的sata/ahci注入器，主要适用于penryn时代的老旧机器\n * ataportinjector\n   * 传统的ata注入器，主要与ide和ata设备相关(例如:当bios中没有ahci选项时)\n\n\n# 笔记本电脑输入\n\n要弄清楚你使用的是什么样的键盘和触控板，请检查windows中的设备管理器或linux中的 dmesg | grep -i input\n\nwarning\n\n大多数笔记本电脑的键盘是ps2 !即使你有i2c、usb或smbus触控板，你也会想要使用voodoops2。\n\n# ps2键盘/触摸板\n\n * voodoops2\n   * 适用于各种ps2键盘，鼠标和触摸板\n   * 需要macos 10.11或更新的mt2 (magic trackpad 2)功能\n * rehabman's voodoops2\n   * 适用于带有ps2键盘、鼠标和触控板的旧系统，或者当你不想使用voodooinput时\n   * 支持macos 10.6 +\n\n# smbus 触摸板\n\n * voodoormi\n   * 用于带有synaptics smbus触控板的系统\n   * 需要macos 10.11或更新版本的mt2功能\n   * 依赖于acidanthera的voodoops2\n * voodoosmbus\n   * 适用于带有elan smbus触控板的系统\n   * 目前支持macos 10.14或更新版本\n\n# i2c/usb hid 设备\n\n * voodooi2c\n   * 支持macos 10.11 +\n   * 连接到i2c控制器，允许插件与i2c触摸板交谈\n   * 使用以下插件仍然需要voodooi2c usb设备\n   * 必须与一个或多个插件配对，如下所示:\n\nvoodooi2c 插件\n\n连接类型                        插件                  说明\nmultitouch hid              voodooi2chid        可以与i2c/usb触摸屏和触摸板一起使用\nelan proprietary            voodooi2celan       elan1200+需要voodooi2chid代替\nfte1001 touchpad            voodooi2cfte        \natmel multitouch protocol   voodooi2catmelmxt   \nsynaptics hid               voodoormi           i2c synaptic触控板(只在i2c模式下需要voodooi2c)\nalps hid                    alpshid             可与usb或i2c alps触控板使用。主要出现在戴尔(dell)笔记本电脑和惠普(hp)的一些elitebook机型上\n\n# 杂项\n\n * ecenabler\n   * 修复在许多设备上读取电池状态(允许读取超过8位的ec字段)\n   * 支持os x 10.7及以上版本(10.4 - 10.6版本不需要)\n * brightnesskeys\n   * 自动修复亮度快捷键\n\n请参考 kexts.md 获得支持的kext的完整列表\n\n\n# ssdts\n\n你在acpisamples文件夹中看到所有的ssdt，想知道你是否需要它们。对于我们来说，我们将介绍您在配置的特定acpi部分中需要的ssdt.plist，因为您需要的ssd是特定于平台的。有些甚至是特定于系统的，需要配置它们，如果我现在给您一个可供选择的ssd列表，您很容易就会迷失方向。\n\nacpi入门 有一个关于ssdt的扩展部分，包括在不同的平台上编译它们。\n\na quick tl;dr of needed ssdts(这是源代码，你必须将它们编译到.aml文件中):\n\n\n# 台式电脑\n\nplatforms                 cpu                            ec             awac        nvram      usb\npenryn                    n/a                            ssdt-ec        n/a         n/a        n/a\nlynnfield and clarkdale\nsandybridge               cpu-pm (run in post-install)\nivy bridge\nhaswell                   ssdt-plug\nbroadwell\nskylake                                                  ssdt-ec-usbx\nkaby lake\ncoffee lake                                                             ssdt-awac   ssdt-pmc\ncomet lake                                                                          n/a        ssdt-rhub\namd (15/16h)              n/a                                           n/a                    n/a\namd (17/19h)              ssdt-cpur for b550 and a520\n\n\n# 高端台式电脑\n\nplatforms              cpu         ec             rtc               pci\nnehalem and westmere   n/a         ssdt-ec        n/a               n/a\nsandy bridge-e                                                      ssdt-unc\nivy bridge-e\nhaswell-e              ssdt-plug   ssdt-ec-usbx   ssdt-rtc0-range\nbroadwell-e\nskylake-x                                                           n/a\n\n\n# 笔记本电脑\n\nplatforms                                cpu                            ec             backlight   i2c trackpad   awac        usb         irq\nclarksfield and arrandale                n/a                            ssdt-ec        ssdt-pnlf   n/a            n/a         n/a         irq ssdt\nsandybridge                              cpu-pm (run in post-install)\nivy bridge\nhaswell                                  ssdt-plug                                                 ssdt-gpi0\nbroadwell\nskylake                                                                 ssdt-ec-usbx                                                      n/a\nkaby lake\ncoffee lake (8th gen) and whiskey lake                                                 ssdt-pnlf                  ssdt-awac\ncoffee lake (9th gen)\ncomet lake\nice lake                                                                                                                      ssdt-rhub\n\n继续:\n\nplatforms                                nvram      imei\nclarksfield and arrandale                n/a        n/a\nsandy bridge                                        ssdt-imei\nivy bridge\nhaswell                                             n/a\nbroadwell\nskylake\nkaby lake\ncoffee lake (8th gen) and whiskey lake\ncoffee lake (9th gen)                    ssdt-pmc\ncomet lake                               n/a\nice lake\n\n\n# 现在，所有这些都完成了，前往 acpi入门",charsets:{cjk:!0}},{title:"硬件限制",frontmatter:{},regularPath:"/macos-limits.html",relativePath:"macos-limits.md",key:"v-5a9fa515",path:"/macos-limits.html",headers:[{level:2,title:"CPU 支持",slug:"cpu-支持",normalizedTitle:"cpu 支持",charIndex:100},{level:2,title:"GPU 支持",slug:"gpu-支持",normalizedTitle:"gpu 支持",charIndex:110},{level:2,title:"主板支持",slug:"主板支持",normalizedTitle:"主板支持",charIndex:120},{level:2,title:"存储支持",slug:"存储支持",normalizedTitle:"存储支持",charIndex:128},{level:2,title:"有线网络",slug:"有线网络",normalizedTitle:"有线网络",charIndex:136},{level:2,title:"无线网络",slug:"无线网络",normalizedTitle:"无线网络",charIndex:144},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:152}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"CPU 支持 GPU 支持 主板支持 存储支持 有线网络 无线网络 其他",content:"# 硬件限制\n\n在开始安装macOS之前，你需要了解许多硬件限制。这是因为苹果支持的硬件数量有限，所以我们要么受到苹果的限制，要么受到社区创建的补丁的限制。\n\n需要验证的主要硬件部分有:\n\n\n\n * CPU 支持\n * GPU 支持\n * 主板支持\n * 存储支持\n * 有线网络\n * 无线网络\n * 其他\n\n\n\n有关该主题的更详细指南，请参见此处：\n\n * 显卡购买指南\n   * 检查您的GPU是否得到支持，以及您可以运行哪个版本的macOS。\n * 无线网卡购买指南\n   * 检查是否支持你的WiFi卡。\n * 避免购买指南\n   * 关于应该避免什么以及你的硬件可能会遇到什么陷阱的总体指南。（BTW. 这里是告诉你哪些硬件不被macOS支持且没有补丁可以被驱动）\n\n\n# CPU 支持\n\n对于CPU支持，我们有以下细分:\n\n * 32和64位cpu都支持\n   * 但这需要操作系统支持你的架构，请参阅下面的CPU要求部分\n * 支持 Intel 的桌面cpu。\n   * Yonah 到 Comet Lake 得到了本指南的支持。\n * Intel 高端台式机和服务器的cpu\n   * Nehalem到Cascade Lake X得到了本指南的支持。\n * Intel Core “i” 和至强系列的笔记本电脑cpu\n   * Arrandale 到 Ice Lake 得到了本指南的支持。\n   * 请注意，不支持Mobile Atoms Celelron和 Pentum CPU\n * AMD的桌面Bulldozer(15H)，Jaguar（16H）和Ryzen(17h) CPU\n   * 笔记本电脑cpu 不支持\n   * 注意，AMD并不支持macOS的所有功能，请参见下文\n\n欲了解更多深入信息，请参阅这里: 避免购买指南\n\n详细的CPU要求\n\n架构需求\n\n * 32位cpu支持10.4.1至10.6.8\n   * 注意10.7.x需要64位用户空间，将32位cpu限制为10.6\n * 从10.4.1到当前支持64位cpu\n\nSSE要求:\n\n * 所有Intel版本的OS X/macOS都需要SSE3\n * 所有64位版本的OS X/macOS都需要SSSE3\n   * F对于缺少SSSE3的cpu(例如某些64位奔腾)，我们建议运行32位用户空间 (i386-user32)\n * macOS 10.12及更新版本需要SSE4\n * macOS 10.14和更新版本需要SSE4.2\n   * SSE4.1 cpu支持 telemetrap.kext\n   * 较新的AMD驱动程序也需要SSE4.2的金属支持。要解决这个问题，请参阅这里:MouSSE: SSE4.2 emulation\n\n固件要求:\n\n * OS X 10.4.1到10.4.7需要EFI32(即IA32(32位)版本的OpenCore)\n   * OS X 10.4.8到10.7.5支持EFI32和EFI64\n * OS X 10.8及更新版本需要EFI64(即x64(64位)版本的OpenCore)\n * OS X 10.7到10.9需要OpenPartitionDxe.efi启动恢复分区\n\n内核要求:\n\n * 由于只支持32位内核空间，OS X 10.4和10.5需要32位kext\n   * OS X 10.6和10.7同时支持32位和64位内核空间\n * OS X 10.8及更新版本由于只支持64位内核空间，因此需要64位kext\n   * 运行lipo -archs 以了解您的kext支持的体系结构(请记住在二进制文件本身而不是.kext包上运行)\n\n核心/线程数限制:\n\n * OS X 10.10及以下版本可能无法以超过24个线程启动 (明显表现为mp_cpus_call_wait() timeout panic)\n * OS X 10.11及更新版本有64线程限制\n * cpus= 引导参数可以作为一个解决方案，或者禁用超线程\n\n特别注意事项:\n\n * Lilu和插件需要10.8或更新才能运行\n   * 我们建议在OS X的老版本中运行FakeSMC\n * OS X 10.6及更早版本要求启用RebuildAppleMemoryMap\n   * 这是为了解决早期内核问题\n\n详细的Intel CPU支持图表\n\n基于普通内核的支持(即没有修改):\n\nCPU GENERATION                   初始支持      最后支持版本    NOTES                       CPUID\nPentium 4                        10.4.1    10.5.8    Only used in dev kits       0x0F41\nYonah                            10.4.4    10.6.8    32-Bit                      0x0006E6\nConroe, Merom                    10.4.7    10.11.6   No SSE4                     0x0006F2\nPenryn                           10.4.10   10.13.6   No SSE4.2                   0x010676\nNehalem                          10.5.6    Current   N/A                         0x0106A2\nLynnfield, Clarksfield           10.6.3              No iGPU support 10.14+      0x0106E0\nWestmere, Clarkdale, Arrandale   10.6.4                                          0x0206C0\nSandy Bridge                     10.6.7                                          0x0206A0(M/H)\nIvy Bridge                       10.7.3              No iGPU support 12+         0x0306A0(M/H/G)\nIvy Bridge-E5                    10.9.2              N/A                         0x0306E0\nHaswell                          10.8.5                                          0x0306C0(S)\nBroadwell                        10.10.0                                         0x0306D4(U/Y)\nSkylake                          10.11.0                                         0x0506e3(H/S) 0x0406E3(U/Y)\nKaby Lake                        10.12.4                                         0x0906E9(H/S/G) 0x0806E9(U/Y)\nCoffee Lake                      10.12.6                                         0x0906EA(S/H/E) 0x0806EA(U)\nAmber, Whiskey, Comet Lake       10.14.1                                         0x0806E0(U/Y)\nComet Lake                       10.15.4                                         0x0906E0(S/H)\nIce Lake                                                                         0x0706E5(U)\nRocket Lake                                          Requires Comet Lake CPUID   0x0A0671\nTiger Lake                       N/A       N/A       Untested                    0x0806C0(U)\n\n详细说明macOS中AMD CPU的限制\n\n不幸的是，AMD完全不支持macOS中的许多功能，还有许多功能是部分损坏的。这些包括:\n\n * 依赖AppleHV的虚拟机\n   * 这包括VMWare、Parallels、Docker、Android Studio等\n   * VirtualBox是唯一的例外，因为它们有自己的虚拟机管理程序\n   * VMware 10和Parallels 13.1.0确实支持自己的虚拟机管理程序，但是使用这种过时的虚拟机软件会带来很大的安全威胁\n * Adobe支持\n   * 大多数Adobe套件依赖于英特尔的Memfast指令集，在使用AMD cpu时会导致崩溃\n   * 你可以禁用功能，如RAW支持，以避免崩溃:Adobe 修复\n * 32位支持\n   * 对于那些仍然依赖于32位软件在Mojave和以下，注意香草补丁不支持32位指令 *解决方法是安装一个 自定义内核, 但是你失去了iMessage支持，这些内核没有提供支持\n * 许多应用程序的稳定性问题\n   * 基于音频的应用程序最容易出现问题，例如Logic Pro\n   * DaVinci Resolve也有零星的问题\n\n\n# GPU 支持\n\n由于市场上GPU的数量几乎是无限的，GPU支持变得更加复杂，但总体划分如下:\n\n * AMD基于GCN的gpu支持最新版本的macOS\n   * 但是不支持AMD apu\n   * AMD的基于Lexa的核心 从北极星系列也不支持\n   * 特别提醒MSI Navi用户:安装程序不能与5700XT 一起工作 #901\n     * 此问题在macOS 11 (Big Sur)中不再存在。\n * NVIDIA的GPU支持很复杂:\n   * Maxwell(9XX) 和 Pascal(10XX) gpu仅限于macOS 10.13: High Sierra\n   * 英伟达的Turing(20XX,16XX) gpu在任何版本的macOS中都不支持\n   * 英伟达的Ampere(30XX) gpu 在任何版本的macOS中都不支持\n   * 英伟达的Kepler(6XX,7XX) gpu支持到macOS 11: Big Sur\n * 英特尔的 GT2+ tier 系列igpu\n   * 本指南涵盖了Ivy Bridge through Ice Lake iGPU support *关于GMA系列iGPUs的信息可以在这里找到:GMA Patching\n   * 注意:GT2指iGPU层，Pentiums、Celerons和Atoms上的低端GT1 iGPU在macOS中不支持\n\n对于使用离散gpu的笔记本电脑，有一个重要的注意事项:\n\n * 90%的离散gpu无法工作，因为它们连接在macOS不支持的配置中(可切换图形)。使用NVIDIA离散gpu，这通常被称为Optimus。由于无法使用这些离散的gpu进行内部显示，因此通常建议禁用它们并关闭它们(将在本指南的后面介绍)。\n * 然而，在某些情况下，离散GPU为任何外部输出(HDMI、mini DisplayPort等)供电，这些输出可能工作，也可能不工作;如果它会工作,你将不得不让卡运行。\n * 然而，有些笔记本电脑很少没有可切换的图形，因此可以使用离散卡(如果macOS支持)，但连接和设置通常会导致问题。\n\nFor a full list of supported GPUs, see the GPU Buyers Guide\n\n详细的Intel GPU支持图表\n\nGPU GENERATION           初始版本      最后支持版本    备注\n3rd Gen GMA              10.4.1    10.7.5    Requires 32-bit kernel and patches\n4th Gen GMA              10.5.0\nArrandale(HD Graphics)   10.6.4    10.13.6   Only LVDS is supported, eDP and external outputs are not\nSandy Bridge(HD 3000)    10.6.7              N/A\nIvy Bridge(HD 4000)      10.7.3    11.7.x\nHaswell(HD 4XXX, 5XXX)   10.8.5    12.6.x\nBroadwell(5XXX, 6XXX)    10.10.0\nSkylake(HD 5XX)          10.11.0\nKaby Lake(HD 6XX)        10.12.4   Current\nCoffee Lake(UHD 6XX)     10.13.6\nComet Lake(UHD 6XX)      10.15.4\nIce Lake(Gx)             10.15.4             Requires -igfxcdc and -igfxdvmt in boot-args\nTiger Lake(Xe)           N/A       N/A       No drivers available\nRocket Lake              N/A       N/A       No drivers available\n\n详细的AMD GPU支持图表\n\nGPU GENERATION   初始支持      最后支持版本    备注\nX800             10.3.x    10.7.5    Requires 32 bit kernel\nX1000            10.4.x              N/A\nTeraScale        10.4.x    10.13.6\nTeraScale 2/3    10.6.x\nGCN 1            10.8.3    12.6.x\nGCN 2/3          10.10.x\nPolaris 10, 20   10.12.1   Current\nVega 10          10.12.6\nVega 20          10.14.5\nNavi 10          10.15.1             Requires agdpmod=pikera in boot-args\nNavi 20          11.4                Currently only some Navi 21 models are working\n\n详细的NVIDIA GPU支持图表\n\nGPU GENERATION   初始支持      最后支持版本    备注\nGeForce 6        10.2.x    10.7.5    Requires 32 bit kernel and NVCAP patching\nGeForce 7        10.4.x              Requires NVCAP patching\nTesla            10.4.x    10.13.6\nTesla v2         10.5.x\nFermi            10.7.x\nKepler           10.7.x    11.7.x    N/A\nKepler v2        10.8.x\nMaxwell          10.10.x   10.13.6   Requires NVIDIA Web Drivers\nPascal           10.12.4\nTuring           N/A       N/A       No drivers available\nAmpere\n\n\n# 主板支持\n\n在大多数情况下，只要CPU支持，所有主板都支持。\n\nMSI AMD 500 -系列主板注意细节\n\nMSI 500系列AMD主板(A520, B550和X570)是个例外。这些主板与macOS Monterey和以上有问题:\n\n * PCIe设备不总是正确枚举\n * Zen 3支持的BIOS更新中断引导\n\n这些主板推荐使用macOS Big Sur或更早的.\n\n感谢CaseySJ，这已经在最新版本的AMD香草补丁中修复了!\n\n\n# 存储支持\n\n在大多数情况下，它支持所有SATA驱动器和大多数NVMe驱动器。只有少数例外:\n\n * 三星 PM981, PM991 和 美光 2200S NVMe SSDs\n   \n   * 这些ssd不兼容(导致内核恐慌)，因此需要NVMeFix.kext 来修复这些内核恐慌。注意，即使使用NVMeFix.kext，这些驱动器仍然可能导致引导问题。\n   * 一个相关的说明，三星970 EVO Plus NVMe ssd也有同样的问题，但它在固件更新中得到了修复;获得更新(Windows通过三星魔术师或启动ISO) 这里.\n   * 还要注意，在macOS中不支持使用Intel Optane Memory 或 Micron 3D XPoint 进行硬盘加速的笔记本电脑。一些用户报告说，Catalina在读写支持方面取得了成功，但我们强烈建议删除驱动器，以防止任何潜在的引导问题。\n     * 请注意，如果在macOS中禁用了Optane部分，则英特尔Optane内存H10/H20型号是兼容的。更多信息可以在这里 (中文原文)找到.\n\n * Intel 600p\n   \n   * 虽然不是不可启动的，但请注意此模型可能会导致许多问题。 Intel 600p NVMe硬盘有修复吗? #1286\n   * 660p的型号很好\n\n\n# 有线网络\n\n在macOS中，几乎所有有线网络适配器都有某种形式的支持，要么是内置驱动程序，要么是社区制作的kext。主要的例外:\n\n * Intel I225 2.5Gb NIC\n   * 在高端桌面彗星湖板上发现\n   * 有可能的解决方法: 来源 和 示例\n * Intel I350 1Gb server NIC\n   * 通常在Intel和Supermicro不同年代的服务器板上找到\n   * 方法\n * Intel 10Gb server NICs\n   * 解决方案是 X520 and X540 chipsets\n * Mellanox和Qlogic server网卡\n\n\n# 无线网络\n\n大多数笔记本电脑自带的WiFi卡不支持，因为它们通常是英特尔/高通的。如果你幸运，你可能有一个支持Atheros卡，但支持只运行到 High Sierra.\n\n最好的选择是获得支持的博通卡;请参阅WiFi购买指南 获得建议。\n\n注意:在macOS上英特尔WiFi是非官方的(第三方驱动)支持，请查看WiFi购买指南 了解更多关于驱动程序和支持卡的信息。\n\n\n# 其他\n\n * 指纹传感器\n   * 目前还没有办法模拟Touch ID传感器，因此指纹传感器将无法工作。\n * Windows Hello人脸识别\n   * 一些笔记本电脑自带的WHFR是I2C连接的(并通过iGPU使用)，这些将不起作用。\n   * 一些笔记本电脑配备了USB连接的WHFR，如果你幸运的话，你可能会有相机功能，但没有其他功能。\n * 英特尔智能声音技术\n   * 使用英特尔SST的笔记本电脑将不会有任何通过它们(通常是内部麦克风)连接的工作，因为它不支持。你可以在Windows的设备管理器中查看。\n * 耳机接口组合\n   * 一些带有combo耳机插孔的笔记本电脑可能无法通过它们进行音频输入，必须使用内置麦克风或通过USB接口的外部音频输入设备。\n * Thunderbolt USB-C 接口\n   * (Hackintosh)目前在macOS中对Thunderbolt的支持仍然不确定，尤其是在Alpine Ridge控制器上，这是目前大多数笔记本电脑都拥有的。有人试图保持控制器上电，这允许Thunderbolt和USB-C热插拔工作，但代价是内核崩溃 和/或 USB-C在睡眠后中断。如果你想使用端口的USB-C端并能够休眠，你必须在启动时插入它并保持插入状态。\n   * 注意:这不适用于仅USB-C端口-仅Thunderbolt 3和USB-C组合端口。\n   * 在BIOS中禁用Thunderbolt也会解决这个问题。",normalizedContent:"# 硬件限制\n\n在开始安装macos之前，你需要了解许多硬件限制。这是因为苹果支持的硬件数量有限，所以我们要么受到苹果的限制，要么受到社区创建的补丁的限制。\n\n需要验证的主要硬件部分有:\n\n\n\n * cpu 支持\n * gpu 支持\n * 主板支持\n * 存储支持\n * 有线网络\n * 无线网络\n * 其他\n\n\n\n有关该主题的更详细指南，请参见此处：\n\n * 显卡购买指南\n   * 检查您的gpu是否得到支持，以及您可以运行哪个版本的macos。\n * 无线网卡购买指南\n   * 检查是否支持你的wifi卡。\n * 避免购买指南\n   * 关于应该避免什么以及你的硬件可能会遇到什么陷阱的总体指南。（btw. 这里是告诉你哪些硬件不被macos支持且没有补丁可以被驱动）\n\n\n# cpu 支持\n\n对于cpu支持，我们有以下细分:\n\n * 32和64位cpu都支持\n   * 但这需要操作系统支持你的架构，请参阅下面的cpu要求部分\n * 支持 intel 的桌面cpu。\n   * yonah 到 comet lake 得到了本指南的支持。\n * intel 高端台式机和服务器的cpu\n   * nehalem到cascade lake x得到了本指南的支持。\n * intel core “i” 和至强系列的笔记本电脑cpu\n   * arrandale 到 ice lake 得到了本指南的支持。\n   * 请注意，不支持mobile atoms celelron和 pentum cpu\n * amd的桌面bulldozer(15h)，jaguar（16h）和ryzen(17h) cpu\n   * 笔记本电脑cpu 不支持\n   * 注意，amd并不支持macos的所有功能，请参见下文\n\n欲了解更多深入信息，请参阅这里: 避免购买指南\n\n详细的cpu要求\n\n架构需求\n\n * 32位cpu支持10.4.1至10.6.8\n   * 注意10.7.x需要64位用户空间，将32位cpu限制为10.6\n * 从10.4.1到当前支持64位cpu\n\nsse要求:\n\n * 所有intel版本的os x/macos都需要sse3\n * 所有64位版本的os x/macos都需要ssse3\n   * f对于缺少ssse3的cpu(例如某些64位奔腾)，我们建议运行32位用户空间 (i386-user32)\n * macos 10.12及更新版本需要sse4\n * macos 10.14和更新版本需要sse4.2\n   * sse4.1 cpu支持 telemetrap.kext\n   * 较新的amd驱动程序也需要sse4.2的金属支持。要解决这个问题，请参阅这里:mousse: sse4.2 emulation\n\n固件要求:\n\n * os x 10.4.1到10.4.7需要efi32(即ia32(32位)版本的opencore)\n   * os x 10.4.8到10.7.5支持efi32和efi64\n * os x 10.8及更新版本需要efi64(即x64(64位)版本的opencore)\n * os x 10.7到10.9需要openpartitiondxe.efi启动恢复分区\n\n内核要求:\n\n * 由于只支持32位内核空间，os x 10.4和10.5需要32位kext\n   * os x 10.6和10.7同时支持32位和64位内核空间\n * os x 10.8及更新版本由于只支持64位内核空间，因此需要64位kext\n   * 运行lipo -archs 以了解您的kext支持的体系结构(请记住在二进制文件本身而不是.kext包上运行)\n\n核心/线程数限制:\n\n * os x 10.10及以下版本可能无法以超过24个线程启动 (明显表现为mp_cpus_call_wait() timeout panic)\n * os x 10.11及更新版本有64线程限制\n * cpus= 引导参数可以作为一个解决方案，或者禁用超线程\n\n特别注意事项:\n\n * lilu和插件需要10.8或更新才能运行\n   * 我们建议在os x的老版本中运行fakesmc\n * os x 10.6及更早版本要求启用rebuildapplememorymap\n   * 这是为了解决早期内核问题\n\n详细的intel cpu支持图表\n\n基于普通内核的支持(即没有修改):\n\ncpu generation                   初始支持      最后支持版本    notes                       cpuid\npentium 4                        10.4.1    10.5.8    only used in dev kits       0x0f41\nyonah                            10.4.4    10.6.8    32-bit                      0x0006e6\nconroe, merom                    10.4.7    10.11.6   no sse4                     0x0006f2\npenryn                           10.4.10   10.13.6   no sse4.2                   0x010676\nnehalem                          10.5.6    current   n/a                         0x0106a2\nlynnfield, clarksfield           10.6.3              no igpu support 10.14+      0x0106e0\nwestmere, clarkdale, arrandale   10.6.4                                          0x0206c0\nsandy bridge                     10.6.7                                          0x0206a0(m/h)\nivy bridge                       10.7.3              no igpu support 12+         0x0306a0(m/h/g)\nivy bridge-e5                    10.9.2              n/a                         0x0306e0\nhaswell                          10.8.5                                          0x0306c0(s)\nbroadwell                        10.10.0                                         0x0306d4(u/y)\nskylake                          10.11.0                                         0x0506e3(h/s) 0x0406e3(u/y)\nkaby lake                        10.12.4                                         0x0906e9(h/s/g) 0x0806e9(u/y)\ncoffee lake                      10.12.6                                         0x0906ea(s/h/e) 0x0806ea(u)\namber, whiskey, comet lake       10.14.1                                         0x0806e0(u/y)\ncomet lake                       10.15.4                                         0x0906e0(s/h)\nice lake                                                                         0x0706e5(u)\nrocket lake                                          requires comet lake cpuid   0x0a0671\ntiger lake                       n/a       n/a       untested                    0x0806c0(u)\n\n详细说明macos中amd cpu的限制\n\n不幸的是，amd完全不支持macos中的许多功能，还有许多功能是部分损坏的。这些包括:\n\n * 依赖applehv的虚拟机\n   * 这包括vmware、parallels、docker、android studio等\n   * virtualbox是唯一的例外，因为它们有自己的虚拟机管理程序\n   * vmware 10和parallels 13.1.0确实支持自己的虚拟机管理程序，但是使用这种过时的虚拟机软件会带来很大的安全威胁\n * adobe支持\n   * 大多数adobe套件依赖于英特尔的memfast指令集，在使用amd cpu时会导致崩溃\n   * 你可以禁用功能，如raw支持，以避免崩溃:adobe 修复\n * 32位支持\n   * 对于那些仍然依赖于32位软件在mojave和以下，注意香草补丁不支持32位指令 *解决方法是安装一个 自定义内核, 但是你失去了imessage支持，这些内核没有提供支持\n * 许多应用程序的稳定性问题\n   * 基于音频的应用程序最容易出现问题，例如logic pro\n   * davinci resolve也有零星的问题\n\n\n# gpu 支持\n\n由于市场上gpu的数量几乎是无限的，gpu支持变得更加复杂，但总体划分如下:\n\n * amd基于gcn的gpu支持最新版本的macos\n   * 但是不支持amd apu\n   * amd的基于lexa的核心 从北极星系列也不支持\n   * 特别提醒msi navi用户:安装程序不能与5700xt 一起工作 #901\n     * 此问题在macos 11 (big sur)中不再存在。\n * nvidia的gpu支持很复杂:\n   * maxwell(9xx) 和 pascal(10xx) gpu仅限于macos 10.13: high sierra\n   * 英伟达的turing(20xx,16xx) gpu在任何版本的macos中都不支持\n   * 英伟达的ampere(30xx) gpu 在任何版本的macos中都不支持\n   * 英伟达的kepler(6xx,7xx) gpu支持到macos 11: big sur\n * 英特尔的 gt2+ tier 系列igpu\n   * 本指南涵盖了ivy bridge through ice lake igpu support *关于gma系列igpus的信息可以在这里找到:gma patching\n   * 注意:gt2指igpu层，pentiums、celerons和atoms上的低端gt1 igpu在macos中不支持\n\n对于使用离散gpu的笔记本电脑，有一个重要的注意事项:\n\n * 90%的离散gpu无法工作，因为它们连接在macos不支持的配置中(可切换图形)。使用nvidia离散gpu，这通常被称为optimus。由于无法使用这些离散的gpu进行内部显示，因此通常建议禁用它们并关闭它们(将在本指南的后面介绍)。\n * 然而，在某些情况下，离散gpu为任何外部输出(hdmi、mini displayport等)供电，这些输出可能工作，也可能不工作;如果它会工作,你将不得不让卡运行。\n * 然而，有些笔记本电脑很少没有可切换的图形，因此可以使用离散卡(如果macos支持)，但连接和设置通常会导致问题。\n\nfor a full list of supported gpus, see the gpu buyers guide\n\n详细的intel gpu支持图表\n\ngpu generation           初始版本      最后支持版本    备注\n3rd gen gma              10.4.1    10.7.5    requires 32-bit kernel and patches\n4th gen gma              10.5.0\narrandale(hd graphics)   10.6.4    10.13.6   only lvds is supported, edp and external outputs are not\nsandy bridge(hd 3000)    10.6.7              n/a\nivy bridge(hd 4000)      10.7.3    11.7.x\nhaswell(hd 4xxx, 5xxx)   10.8.5    12.6.x\nbroadwell(5xxx, 6xxx)    10.10.0\nskylake(hd 5xx)          10.11.0\nkaby lake(hd 6xx)        10.12.4   current\ncoffee lake(uhd 6xx)     10.13.6\ncomet lake(uhd 6xx)      10.15.4\nice lake(gx)             10.15.4             requires -igfxcdc and -igfxdvmt in boot-args\ntiger lake(xe)           n/a       n/a       no drivers available\nrocket lake              n/a       n/a       no drivers available\n\n详细的amd gpu支持图表\n\ngpu generation   初始支持      最后支持版本    备注\nx800             10.3.x    10.7.5    requires 32 bit kernel\nx1000            10.4.x              n/a\nterascale        10.4.x    10.13.6\nterascale 2/3    10.6.x\ngcn 1            10.8.3    12.6.x\ngcn 2/3          10.10.x\npolaris 10, 20   10.12.1   current\nvega 10          10.12.6\nvega 20          10.14.5\nnavi 10          10.15.1             requires agdpmod=pikera in boot-args\nnavi 20          11.4                currently only some navi 21 models are working\n\n详细的nvidia gpu支持图表\n\ngpu generation   初始支持      最后支持版本    备注\ngeforce 6        10.2.x    10.7.5    requires 32 bit kernel and nvcap patching\ngeforce 7        10.4.x              requires nvcap patching\ntesla            10.4.x    10.13.6\ntesla v2         10.5.x\nfermi            10.7.x\nkepler           10.7.x    11.7.x    n/a\nkepler v2        10.8.x\nmaxwell          10.10.x   10.13.6   requires nvidia web drivers\npascal           10.12.4\nturing           n/a       n/a       no drivers available\nampere\n\n\n# 主板支持\n\n在大多数情况下，只要cpu支持，所有主板都支持。\n\nmsi amd 500 -系列主板注意细节\n\nmsi 500系列amd主板(a520, b550和x570)是个例外。这些主板与macos monterey和以上有问题:\n\n * pcie设备不总是正确枚举\n * zen 3支持的bios更新中断引导\n\n这些主板推荐使用macos big sur或更早的.\n\n感谢caseysj，这已经在最新版本的amd香草补丁中修复了!\n\n\n# 存储支持\n\n在大多数情况下，它支持所有sata驱动器和大多数nvme驱动器。只有少数例外:\n\n * 三星 pm981, pm991 和 美光 2200s nvme ssds\n   \n   * 这些ssd不兼容(导致内核恐慌)，因此需要nvmefix.kext 来修复这些内核恐慌。注意，即使使用nvmefix.kext，这些驱动器仍然可能导致引导问题。\n   * 一个相关的说明，三星970 evo plus nvme ssd也有同样的问题，但它在固件更新中得到了修复;获得更新(windows通过三星魔术师或启动iso) 这里.\n   * 还要注意，在macos中不支持使用intel optane memory 或 micron 3d xpoint 进行硬盘加速的笔记本电脑。一些用户报告说，catalina在读写支持方面取得了成功，但我们强烈建议删除驱动器，以防止任何潜在的引导问题。\n     * 请注意，如果在macos中禁用了optane部分，则英特尔optane内存h10/h20型号是兼容的。更多信息可以在这里 (中文原文)找到.\n\n * intel 600p\n   \n   * 虽然不是不可启动的，但请注意此模型可能会导致许多问题。 intel 600p nvme硬盘有修复吗? #1286\n   * 660p的型号很好\n\n\n# 有线网络\n\n在macos中，几乎所有有线网络适配器都有某种形式的支持，要么是内置驱动程序，要么是社区制作的kext。主要的例外:\n\n * intel i225 2.5gb nic\n   * 在高端桌面彗星湖板上发现\n   * 有可能的解决方法: 来源 和 示例\n * intel i350 1gb server nic\n   * 通常在intel和supermicro不同年代的服务器板上找到\n   * 方法\n * intel 10gb server nics\n   * 解决方案是 x520 and x540 chipsets\n * mellanox和qlogic server网卡\n\n\n# 无线网络\n\n大多数笔记本电脑自带的wifi卡不支持，因为它们通常是英特尔/高通的。如果你幸运，你可能有一个支持atheros卡，但支持只运行到 high sierra.\n\n最好的选择是获得支持的博通卡;请参阅wifi购买指南 获得建议。\n\n注意:在macos上英特尔wifi是非官方的(第三方驱动)支持，请查看wifi购买指南 了解更多关于驱动程序和支持卡的信息。\n\n\n# 其他\n\n * 指纹传感器\n   * 目前还没有办法模拟touch id传感器，因此指纹传感器将无法工作。\n * windows hello人脸识别\n   * 一些笔记本电脑自带的whfr是i2c连接的(并通过igpu使用)，这些将不起作用。\n   * 一些笔记本电脑配备了usb连接的whfr，如果你幸运的话，你可能会有相机功能，但没有其他功能。\n * 英特尔智能声音技术\n   * 使用英特尔sst的笔记本电脑将不会有任何通过它们(通常是内部麦克风)连接的工作，因为它不支持。你可以在windows的设备管理器中查看。\n * 耳机接口组合\n   * 一些带有combo耳机插孔的笔记本电脑可能无法通过它们进行音频输入，必须使用内置麦克风或通过usb接口的外部音频输入设备。\n * thunderbolt usb-c 接口\n   * (hackintosh)目前在macos中对thunderbolt的支持仍然不确定，尤其是在alpine ridge控制器上，这是目前大多数笔记本电脑都拥有的。有人试图保持控制器上电，这允许thunderbolt和usb-c热插拔工作，但代价是内核崩溃 和/或 usb-c在睡眠后中断。如果你想使用端口的usb-c端并能够休眠，你必须在启动时插入它并保持插入状态。\n   * 注意:这不适用于仅usb-c端口-仅thunderbolt 3和usb-c组合端口。\n   * 在bios中禁用thunderbolt也会解决这个问题。",charsets:{cjk:!0}},{title:"感谢名单",frontmatter:{},regularPath:"/misc/credit.html",relativePath:"misc/credit.md",key:"v-fb5f9066",path:"/misc/credit.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# 感谢名单\n\n没有一个好的指南是由一个人完成的，这里要感谢那些帮助过我们的人:\n\n * vit9696\n   * OpenCore众多开发者之一\n   * 对原指南的更正\n   * 本指南的更正…(说真的，这个人值得一枚奖章)\n * CorpNewt\n   * 极大地启发了本指南(如果不是抄袭的话)，并总体上帮助提出问题和建议\n   * 欺骗的SSDT源\n   * 创建ProperTree和GenSMBIOS\n * Midi\n   * 本指南的更正和建议\n * AlGrey#9303\n   * AMD内核补丁\n * NoOne/IOIIIO\n   * 原始的AMD香草指南\n   * 修正AMD部分的指南\n * DhinakG\n   * 随机指导相关的东西和维护指南\n * 1Revenger1\n   * 维护指南\n * Khronokernel\n   * 对编写和维护指南\n * kernel\n   * 对于OCSysInfo\n * 所有GitHub贡献者\n * 以及dortania团队的其他成员 for helping out\n\n还有那些帮助过我的人，谢谢你们!\n\nOpenCore开发人员:\n\n * al3xtjames\n * Andrey1970AppleLife\n * mhaeuser (formerly Download-Fritz)\n * Goldfish64\n * nms42\n * PMHeart\n * savvamitrofanov\n * vit9696\n\n相关指南或启发本指南的指南:\n\n * r/Hackintosh Vanilla Desktop Guide\n * All-in-one Vanilla AMD Hackintosh Guide\n * USB Map Guide\n * Intel Framebuffer Patching\n * AppleALC Supported Codecs\n * gfxutil\n\n对于那些对本指南有建议或问题的人，你可以在 这里找到这个网站的GitHub仓库。\n\n资料来源:\n\n * OpenCore 文档\n * KASLR slide:\n   * vit9696 的解释\n   * Apianti 的解释\n   * KASLR 解释\n   * 更多KASLR解释\n * 清理RC脚本:\n   * Clover模拟NVRAM卸载程序\n * ACPI转储:\n   * acpica\n * 服务指引:\n   * Как завести сервисы Apple - iMessage, FaceTime, iCloud\n * iGPU和DRM配置:\n   * WhateverGreen的手册\n   * WhateverGreen的DRM图表\n   * DRM 测试\n * rEFInd指南:\n   * rEFInd 手册\n * USB映射指南:\n   * XHCI唤醒问题\n   * CorpNewt的USB地图指南\n   * AppleLife USB地图指南",normalizedContent:"# 感谢名单\n\n没有一个好的指南是由一个人完成的，这里要感谢那些帮助过我们的人:\n\n * vit9696\n   * opencore众多开发者之一\n   * 对原指南的更正\n   * 本指南的更正…(说真的，这个人值得一枚奖章)\n * corpnewt\n   * 极大地启发了本指南(如果不是抄袭的话)，并总体上帮助提出问题和建议\n   * 欺骗的ssdt源\n   * 创建propertree和gensmbios\n * midi\n   * 本指南的更正和建议\n * algrey#9303\n   * amd内核补丁\n * noone/ioiiio\n   * 原始的amd香草指南\n   * 修正amd部分的指南\n * dhinakg\n   * 随机指导相关的东西和维护指南\n * 1revenger1\n   * 维护指南\n * khronokernel\n   * 对编写和维护指南\n * kernel\n   * 对于ocsysinfo\n * 所有github贡献者\n * 以及dortania团队的其他成员 for helping out\n\n还有那些帮助过我的人，谢谢你们!\n\nopencore开发人员:\n\n * al3xtjames\n * andrey1970applelife\n * mhaeuser (formerly download-fritz)\n * goldfish64\n * nms42\n * pmheart\n * savvamitrofanov\n * vit9696\n\n相关指南或启发本指南的指南:\n\n * r/hackintosh vanilla desktop guide\n * all-in-one vanilla amd hackintosh guide\n * usb map guide\n * intel framebuffer patching\n * applealc supported codecs\n * gfxutil\n\n对于那些对本指南有建议或问题的人，你可以在 这里找到这个网站的github仓库。\n\n资料来源:\n\n * opencore 文档\n * kaslr slide:\n   * vit9696 的解释\n   * apianti 的解释\n   * kaslr 解释\n   * 更多kaslr解释\n * 清理rc脚本:\n   * clover模拟nvram卸载程序\n * acpi转储:\n   * acpica\n * 服务指引:\n   * как завести сервисы apple - imessage, facetime, icloud\n * igpu和drm配置:\n   * whatevergreen的手册\n   * whatevergreen的drm图表\n   * drm 测试\n * refind指南:\n   * refind 手册\n * usb映射指南:\n   * xhci唤醒问题\n   * corpnewt的usb地图指南\n   * applelife usb地图指南",charsets:{cyrillic:!0,cjk:!0}},{title:"OpenCore入门",frontmatter:{},regularPath:"/prerequisites.html",relativePath:"prerequisites.md",key:"v-800849a6",path:"/prerequisites.html",headers:[{level:2,title:"前提条件",slug:"前提条件",normalizedTitle:"前提条件",charIndex:58}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"前提条件",content:"# OpenCore入门\n\n在我们可以一头扎进制作一个基于OpenCore的系统之前，我们需要确认一些事。\n\n\n# 前提条件\n\n 1. [关键] 时间和耐心。\n    * 如果你有需要限期结束的重要的工作，请不要开始黑苹果，黑苹果不是你的首要工作。。\n 2. [关键] 了解你的硬件\n    * 你的CPU型号和代数\n    * 你的GPU\n    * 你的存储设备（硬盘/固态硬盘、NVME/AHCI/RAID/IDE配置，PS：这里是指的南桥上的硬盘的工作模式）\n    * 你的笔记本/台式机的OEM型号(如果来自OEM)\n    * 你的 有线网卡芯片组\n    * 你的无线/蓝牙芯片组\n 3. [关键] 命令行的基本知识以及如何使用终端/命令提示符\n    * 这不仅仅是[关键]，也是整个指南的基础。如果你不知道如何' cd '到一个目录或删除一个文件，我们无法给予你任何帮助。\n 4. [关键] 在_兼容性部分中可以看到一台兼容的机器。\n    * 硬件限制页面\n 5. [关键] 最低要求:\n    * 16GB的U盘，如果你打算使用macOS制作引导优盘\n    * 4GB的U盘，如果你打算使用windows或linux来制作引导优盘\n 6. [关键] 有线网络连接 (没有WiFi发射器，USB的有线网卡是否能工作取决于macOS的支持) ，并且你必须知道你的网卡的型号。\n    * 你必须有物理网卡端口或者兼容macOS的有线网卡/无线网卡。如果你有 兼容的无线网卡, 你也可以使用它。\n      * 请注意，macOS不支持大多数无线网卡\n    * 对于不能使用网络但有Android手机的人来说，你可以将你的Android手机连接到WiFi，然后使用 HoRNDIS功能共享它。\n 7. [关键] 正确的操作系统安装方式:\n    * 是:\n      * macOS(较新的版本会更好)\n      * Windows (Windows 10、1703或更新版本)\n      * Linux(纯净且功能正常，使用Python 2.7或更高版本)\n    * 对于Windows或Linux用户，你正在使用的驱动器上应至少有15GB的可用空间。在Windows上，你的系统盘(C:)必须至少有15GB的可用空间。\n    * 对于macOS用户来说，系统驱动器上至少有30GB的可用空间。\n    * 本指南手册中使用的大多数工具还需要 安装Python\n 8. [关键] 安装了最新版本的BIOS\n    * 在大多数情况下，更新你的BIOS将为macOS提供最好的支持\n    * MSI 500系列AMD主板是个例外，更多信息请访问 主板支持。",normalizedContent:"# opencore入门\n\n在我们可以一头扎进制作一个基于opencore的系统之前，我们需要确认一些事。\n\n\n# 前提条件\n\n 1. [关键] 时间和耐心。\n    * 如果你有需要限期结束的重要的工作，请不要开始黑苹果，黑苹果不是你的首要工作。。\n 2. [关键] 了解你的硬件\n    * 你的cpu型号和代数\n    * 你的gpu\n    * 你的存储设备（硬盘/固态硬盘、nvme/ahci/raid/ide配置，ps：这里是指的南桥上的硬盘的工作模式）\n    * 你的笔记本/台式机的oem型号(如果来自oem)\n    * 你的 有线网卡芯片组\n    * 你的无线/蓝牙芯片组\n 3. [关键] 命令行的基本知识以及如何使用终端/命令提示符\n    * 这不仅仅是[关键]，也是整个指南的基础。如果你不知道如何' cd '到一个目录或删除一个文件，我们无法给予你任何帮助。\n 4. [关键] 在_兼容性部分中可以看到一台兼容的机器。\n    * 硬件限制页面\n 5. [关键] 最低要求:\n    * 16gb的u盘，如果你打算使用macos制作引导优盘\n    * 4gb的u盘，如果你打算使用windows或linux来制作引导优盘\n 6. [关键] 有线网络连接 (没有wifi发射器，usb的有线网卡是否能工作取决于macos的支持) ，并且你必须知道你的网卡的型号。\n    * 你必须有物理网卡端口或者兼容macos的有线网卡/无线网卡。如果你有 兼容的无线网卡, 你也可以使用它。\n      * 请注意，macos不支持大多数无线网卡\n    * 对于不能使用网络但有android手机的人来说，你可以将你的android手机连接到wifi，然后使用 horndis功能共享它。\n 7. [关键] 正确的操作系统安装方式:\n    * 是:\n      * macos(较新的版本会更好)\n      * windows (windows 10、1703或更新版本)\n      * linux(纯净且功能正常，使用python 2.7或更高版本)\n    * 对于windows或linux用户，你正在使用的驱动器上应至少有15gb的可用空间。在windows上，你的系统盘(c:)必须至少有15gb的可用空间。\n    * 对于macos用户来说，系统驱动器上至少有30gb的可用空间。\n    * 本指南手册中使用的大多数工具还需要 安装python\n 8. [关键] 安装了最新版本的bios\n    * 在大多数情况下，更新你的bios将为macos提供最好的支持\n    * msi 500系列amd主板是个例外，更多信息请访问 主板支持。",charsets:{cjk:!0}},{title:"术语",frontmatter:{},regularPath:"/terminology.html",relativePath:"terminology.md",key:"v-8f35bea6",path:"/terminology.html",lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# 术语\n\n术语             描述\nmacOS          苹果公司自己的基于UNIX的操作系统，用于Mac机器和“什么使Mac成为Mac”。\nWindows        微软的专有操作系统，在各种设备上使用和支持(如果你不想头疼，就继续使用这个操作系统)\nLinux          基于Linux内核的开源类unix操作系统家族，1991年9月17日由Linus\n               Torvalds首次发布的操作系统内核。Linux通常打包在Linux发行版中。注意，虽然macOS和Linux可能是基于unix的，但它们有很大的不同。\nDistros        发行版的缩写。Linux发行版是Linux的发行方式。然而，当涉及到macOS时，发行版混合了macOS安装程序和一堆非苹果公司的工具\n               不要使用macOS发行版\nHackintosh     将macOS安装到PC上的过程，请注意Hackintosh不是操作系统，它也可以指被”黑客”攻击的机器，以使macOS在其上运行。例如：我在这台Windows机器上安装了macOS，因此我有一个Hackintosh。但是我没有安装“Hackintosh”。\nBootloader     加载操作系统的软件，通常由操作系统创建者制作。从技术上讲，OpenCore本身并不是一个引导加载程序(请参阅下面的引导管理器解释)。苹果的boot.efi将是Mac或Hackintosh中实际的启动加载程序。\nBoot Manager   管理引导加载程序的软件-我们有很多这些:Clover, systemd-boot, OpenCore, rEFInd,\n               rEFIt…这些通常被视为为实际的引导加载程序准备系统。\n\n----------------------------------------\n\n术语             描述\nOpenCore       Hackintosh现场的新热点，由 Acidanthera\n               team在考虑安全性的情况下制作，比Clover启动更快，重量更轻。它需要更多的工作来设置，但也比Clover支持更多原生的东西(如休眠，FileVault\n               2，热键…)。\nClover         现在被认为是OpenCore发布时遗留的引导管理器。本指南将不涉及该软件的使用。\nACPI           高级配置和电源接口(Advanced Configuration and Power Interface,\n               ACPI)提供了一个开放的标准，操作系统可以使用它来发现和配置计算机硬件组件，更多内容将在本指南的后面讨论。\nDSDT/SSDT      ACPI中的表格描述了设备以及操作系统应该如何与它们进行交互，例如使计算机休眠，唤醒，切换gpu, USB端口。\n.AML           编译后的ACPI文件格式，以及您的PC将执行的内容。.DAT是另一个具有完全相同用途的扩展。\n.DSL           ACPI的源代码-这是您为计算机编辑和编译的内容。不要 将这种文件格式与.asl混淆。\nKexts          也称为Kernel\n               Ext版本，是macOS的驱动程序。它们用于执行不同的任务，如设备驱动程序，或用于不同的目的(在黑客编程中)，如为操作系统打补丁，注入信息或运行任务。kext并不是优秀Hackintosh的唯一组成部分，因为它们通常与ACPI补丁和修复一起使用。\nBIOS           基本输入/输出系统是用于在启动过程(上电启动)中执行硬件初始化的固件，并为操作系统和程序提供运行时服务。BIOS固件预先安装在个人计算机的系统板上，它是第一个在上电时运行的软件(来源:Wikipedia)。这是一个70年\nUEFI           统一可扩展固件接口UEFI (Unified Extensible Firmware\n               Interface)是定义操作系统与平台固件之间软件接口的规范。UEFI取代了最初出现在所有IBM\n               pc兼容的个人电脑上的传统BIOS (Basic Input/Output\n               System)固件接口，大部分UEFI固件实现都支持传统BIOS服务。UEFI可以支持远程诊断和修复计算机，即使没有安装操作系统。(资料来源:维基百科)\nUEFI Drivers   与其他操作系统一样，UEFI也有驱动程序，由Clover或OpenCore加载。它们还可以加载设备或执行其他任务，比如用HfsPlus加载苹果的HfsPlus.efi,\n               修补macOS的boot.efi 等等. 你可能会发现它们是 Clover Drivers 或 OpenCore\n               Drivers, 它们都是UEFI驱动程序。 (注意:只使用针对特定引导管理器的驱动程序。 更多信息可以在\n               Clover转换页面上找到).\n\n----------------------------------------\n\n术语    描述\nEFI   它可以表示两件事:\n      - Mac的固件，与UEFI相同，但只针对Mac进行了相当大的修改，所以不那么”通用”\n      -\n      硬盘上的分区，存储由UEFI读取的软件来加载操作系统(如Windows引导加载程序)或UEFI应用程序(如OpenCore)，它是FAT32格式的，ID类型为\n      EF00 (十六进制)。它可以被命名为ESP或SYSTEM，通常大小在100MB到400MB之间，但大小不影响任何东西。\nMBR   主引导记录是分区计算机大容量存储设备(如固定磁盘或可移动驱动器)最开始时的一种特殊类型的引导扇区，用于IBM\n      pc兼容系统和其他系统。MBR在1983年的PC DOS\n      2.0中首次引入。MBR保存了有关包含文件系统的逻辑分区在该介质上如何组织的信息。MBR还包含可执行代码，作为安装的操作系统的加载器，通常通过将控制权移交给加载器的第二阶段，或与每个分区的卷引导记录(volume\n      boot record,\n      VBR)结合使用。这段MBR代码通常被称为引导加载程序(来源:Wikipedia)。这种格式在BIOS/Legacy设置中使用。MBR格式最多支持2\n      TiB的大小，最多支持4个主分区。\nGPT   GUID分区表GPT (GUID Partition\n      Table)是计算机物理存储设备(如硬盘、固态硬盘等)分区表布局的标准，使用了通用唯一标识符(universally\n      unique\n      identifier)，也称为全球唯一标识符(GUIDs)。形成一个统一的可扩展固件接口的一部分(UEFI)标准(统一EFI论坛提议替代PC\n      BIOS),不过也用于一些BIOS系统,由于主引导记录(MBR)分区表的局限性,使用32位的逻辑块寻址(LBA)传统的512字节的磁盘扇区(来源:维基百科)。通常，这是你想在UEFI系统上使用的磁盘格式。\n\n----------------------------------------\n\n术语          描述\nEC          嵌入式控制器。主板和嵌入式外设(如热键、端口或电池)之间的通信。\nPLUG        允许XCPM，苹果XNU (OS内核)电源管理，允许附加更好的整体CPU控制。仅在Haswell和更新版本上支持。\nAWAC        ACPI唤醒闹钟计数器，董事会的内部时钟。与实时时钟(RTC)形成对比。macOS无法与AWAC时钟进行通信，因此必须进行补丁。\nPMC         电源管理控制器，在B360, B365, H310, H370,\n            Z390主板上，oem忘记映射此区域，因此需要SSDT-PMC来避免页面错误\nPNLF        内部背光显示，macOS使用此PNLF设备发送和接收亮度控制信息\nXOSI/_OSI   _OSI 用于确定正在引导的是哪个操作系统，将其重命名为XOSI可以让硬件认为我们正在引导一个不同的操作系统\nHPET        高精度事件定时器，操作系统使用它来决定如何与设备(IRQ)通信。macOS对设备的设置可能非常挑剔，因此我们有时需要为HPET打补丁。\nRHUB        根USB集线器，其中定义了USB端口。如果这里缺少某些定义，USB端口可能无法在macOS中工作\nIMEI        英特尔管理引擎接口，处理杂项任务。在macOS中，苹果公司依靠IMEI来实现英特尔GPU的加速。如果使用未知ID，比如使用Sandy\n            Bridge的7系列芯片组，macOS将无法找到它用于GPU加速。\nUNC         Uncore Bridge，类似于North\n            Bridge，它处理许多与缓存相关的函数。很多时候，oem会定义这个设备，但没有功能，macOS无法处理这些情况。\nSMBus       系统管理总线，用于允许设备之间轻松地进行通信。",normalizedContent:"# 术语\n\n术语             描述\nmacos          苹果公司自己的基于unix的操作系统，用于mac机器和“什么使mac成为mac”。\nwindows        微软的专有操作系统，在各种设备上使用和支持(如果你不想头疼，就继续使用这个操作系统)\nlinux          基于linux内核的开源类unix操作系统家族，1991年9月17日由linus\n               torvalds首次发布的操作系统内核。linux通常打包在linux发行版中。注意，虽然macos和linux可能是基于unix的，但它们有很大的不同。\ndistros        发行版的缩写。linux发行版是linux的发行方式。然而，当涉及到macos时，发行版混合了macos安装程序和一堆非苹果公司的工具\n               不要使用macos发行版\nhackintosh     将macos安装到pc上的过程，请注意hackintosh不是操作系统，它也可以指被”黑客”攻击的机器，以使macos在其上运行。例如：我在这台windows机器上安装了macos，因此我有一个hackintosh。但是我没有安装“hackintosh”。\nbootloader     加载操作系统的软件，通常由操作系统创建者制作。从技术上讲，opencore本身并不是一个引导加载程序(请参阅下面的引导管理器解释)。苹果的boot.efi将是mac或hackintosh中实际的启动加载程序。\nboot manager   管理引导加载程序的软件-我们有很多这些:clover, systemd-boot, opencore, refind,\n               refit…这些通常被视为为实际的引导加载程序准备系统。\n\n----------------------------------------\n\n术语             描述\nopencore       hackintosh现场的新热点，由 acidanthera\n               team在考虑安全性的情况下制作，比clover启动更快，重量更轻。它需要更多的工作来设置，但也比clover支持更多原生的东西(如休眠，filevault\n               2，热键…)。\nclover         现在被认为是opencore发布时遗留的引导管理器。本指南将不涉及该软件的使用。\nacpi           高级配置和电源接口(advanced configuration and power interface,\n               acpi)提供了一个开放的标准，操作系统可以使用它来发现和配置计算机硬件组件，更多内容将在本指南的后面讨论。\ndsdt/ssdt      acpi中的表格描述了设备以及操作系统应该如何与它们进行交互，例如使计算机休眠，唤醒，切换gpu, usb端口。\n.aml           编译后的acpi文件格式，以及您的pc将执行的内容。.dat是另一个具有完全相同用途的扩展。\n.dsl           acpi的源代码-这是您为计算机编辑和编译的内容。不要 将这种文件格式与.asl混淆。\nkexts          也称为kernel\n               ext版本，是macos的驱动程序。它们用于执行不同的任务，如设备驱动程序，或用于不同的目的(在黑客编程中)，如为操作系统打补丁，注入信息或运行任务。kext并不是优秀hackintosh的唯一组成部分，因为它们通常与acpi补丁和修复一起使用。\nbios           基本输入/输出系统是用于在启动过程(上电启动)中执行硬件初始化的固件，并为操作系统和程序提供运行时服务。bios固件预先安装在个人计算机的系统板上，它是第一个在上电时运行的软件(来源:wikipedia)。这是一个70年\nuefi           统一可扩展固件接口uefi (unified extensible firmware\n               interface)是定义操作系统与平台固件之间软件接口的规范。uefi取代了最初出现在所有ibm\n               pc兼容的个人电脑上的传统bios (basic input/output\n               system)固件接口，大部分uefi固件实现都支持传统bios服务。uefi可以支持远程诊断和修复计算机，即使没有安装操作系统。(资料来源:维基百科)\nuefi drivers   与其他操作系统一样，uefi也有驱动程序，由clover或opencore加载。它们还可以加载设备或执行其他任务，比如用hfsplus加载苹果的hfsplus.efi,\n               修补macos的boot.efi 等等. 你可能会发现它们是 clover drivers 或 opencore\n               drivers, 它们都是uefi驱动程序。 (注意:只使用针对特定引导管理器的驱动程序。 更多信息可以在\n               clover转换页面上找到).\n\n----------------------------------------\n\n术语    描述\nefi   它可以表示两件事:\n      - mac的固件，与uefi相同，但只针对mac进行了相当大的修改，所以不那么”通用”\n      -\n      硬盘上的分区，存储由uefi读取的软件来加载操作系统(如windows引导加载程序)或uefi应用程序(如opencore)，它是fat32格式的，id类型为\n      ef00 (十六进制)。它可以被命名为esp或system，通常大小在100mb到400mb之间，但大小不影响任何东西。\nmbr   主引导记录是分区计算机大容量存储设备(如固定磁盘或可移动驱动器)最开始时的一种特殊类型的引导扇区，用于ibm\n      pc兼容系统和其他系统。mbr在1983年的pc dos\n      2.0中首次引入。mbr保存了有关包含文件系统的逻辑分区在该介质上如何组织的信息。mbr还包含可执行代码，作为安装的操作系统的加载器，通常通过将控制权移交给加载器的第二阶段，或与每个分区的卷引导记录(volume\n      boot record,\n      vbr)结合使用。这段mbr代码通常被称为引导加载程序(来源:wikipedia)。这种格式在bios/legacy设置中使用。mbr格式最多支持2\n      tib的大小，最多支持4个主分区。\ngpt   guid分区表gpt (guid partition\n      table)是计算机物理存储设备(如硬盘、固态硬盘等)分区表布局的标准，使用了通用唯一标识符(universally\n      unique\n      identifier)，也称为全球唯一标识符(guids)。形成一个统一的可扩展固件接口的一部分(uefi)标准(统一efi论坛提议替代pc\n      bios),不过也用于一些bios系统,由于主引导记录(mbr)分区表的局限性,使用32位的逻辑块寻址(lba)传统的512字节的磁盘扇区(来源:维基百科)。通常，这是你想在uefi系统上使用的磁盘格式。\n\n----------------------------------------\n\n术语          描述\nec          嵌入式控制器。主板和嵌入式外设(如热键、端口或电池)之间的通信。\nplug        允许xcpm，苹果xnu (os内核)电源管理，允许附加更好的整体cpu控制。仅在haswell和更新版本上支持。\nawac        acpi唤醒闹钟计数器，董事会的内部时钟。与实时时钟(rtc)形成对比。macos无法与awac时钟进行通信，因此必须进行补丁。\npmc         电源管理控制器，在b360, b365, h310, h370,\n            z390主板上，oem忘记映射此区域，因此需要ssdt-pmc来避免页面错误\npnlf        内部背光显示，macos使用此pnlf设备发送和接收亮度控制信息\nxosi/_osi   _osi 用于确定正在引导的是哪个操作系统，将其重命名为xosi可以让硬件认为我们正在引导一个不同的操作系统\nhpet        高精度事件定时器，操作系统使用它来决定如何与设备(irq)通信。macos对设备的设置可能非常挑剔，因此我们有时需要为hpet打补丁。\nrhub        根usb集线器，其中定义了usb端口。如果这里缺少某些定义，usb端口可能无法在macos中工作\nimei        英特尔管理引擎接口，处理杂项任务。在macos中，苹果公司依靠imei来实现英特尔gpu的加速。如果使用未知id，比如使用sandy\n            bridge的7系列芯片组，macos将无法找到它用于gpu加速。\nunc         uncore bridge，类似于north\n            bridge，它处理许多与缓存相关的函数。很多时候，oem会定义这个设备，但没有功能，macos无法处理这些情况。\nsmbus       系统管理总线，用于允许设备之间轻松地进行通信。",charsets:{cjk:!0}},{title:"了解macOS引导过程",frontmatter:{},regularPath:"/troubleshooting/boot.html",relativePath:"troubleshooting/boot.md",key:"v-b6c24aaa",path:"/troubleshooting/boot.html",headers:[{level:2,title:"OpenCore启动",slug:"opencore启动",normalizedTitle:"opencore启动",charIndex:153},{level:2,title:"boot.efi 切换",slug:"boot-efi-切换",normalizedTitle:"boot.efi 切换",charIndex:597},{level:2,title:"XNU/内核切换",slug:"xnu-内核切换",normalizedTitle:"xnu/内核切换",charIndex:903},{level:2,title:"macOS切换",slug:"macos切换",normalizedTitle:"macos切换",charIndex:2174}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"OpenCore启动 boot.efi 切换 XNU/内核切换 macOS切换",content:'# 了解macOS引导过程\n\n在对hackintosh进行故障诊断时，要真正理解您在哪里遇到困难可能有点困难，因为您试图搜索的确切关键字可能与谷歌上的任何内容都不匹配。虽然这篇文章不会解决你所有的问题，但它至少可以帮助你更好地理解macOS启动过程中哪里卡住了，并希望能给你一些为什么卡住的想法。\n\n\n# OpenCore启动\n\n本节将会很简短，因为OpenCore引导问题相当罕见，通常是简单的用户错误:\n\n * 系统启动并搜索启动设备\n * 系统在您的 OpenCore USB 上的 efi/BOOT/ 下定位 BOOTx64.efi\n * 加载BOOT x64.efi，然后从 efi/OC/ 链式加载 OpenCore.efi\n * 应用NVRAM属性\n * EFI 驱动程序是从 EFI/OC/drivers 加载的\n * 安装了图形输出协议(GOP)\n * ACPI 表是从 EFI/OC/ACPI 加载的\n * SMBIOS数据应用\n * OpenCore 加载和显示所有可能的引导选项\n * 你现在启动你的macOS安装程序\n\n如果你在这一点上启动有问题，主要检查:\n\n * 卡在 no vault provided!\n * 看不到 macOS 分区\n * 引导 OpenCore 重启到 BIOS\n\n关于其他可能的问题，请参见:\n\n * OpenCore 启动问题\n\n\n# boot.efi 切换\n\n\n\n这是macOS的引导加载程序(boot.efi)出现的地方，具体来说，它所做的是为内核加载准备环境，以及OpenCore注入kext的地方。如果你在这一点上卡住了，很可能是加载内核有问题，主要的罪魁祸首是:\n\n * 卡在 EndRandomSeed\n * 卡在 [EB|#LOG:EXITBS:START]\n * 收到 Couldn\'t allocate runtime area errors\n\n关于其他可能的问题，请参见:\n\n * 内核问题\n\n注意:在macOS 10.15.4中，苹果更改了boot.efi调试协议，所以看起来与之前有很大的不同，但所有的规则仍然适用\n\n\n# XNU/内核切换\n\n现在启动efi已经为我们设置好了一切，我们现在可以观察内核的工作了。这部分通常被称为Rooting phase:\n\n\n\n本节是验证 SMBIOS 数据、加载 ACPI 表 /kext 以及 macOS 试图使一切正常的地方。这里的失败通常是以下原因造成的:\n\n * 损坏的ssdt\n * 损坏的kext(或配置文件plist -> Kernel -> Add下的设置不正确)\n * 混乱的内存映射\n\n查看此处获取更多故障诊断信息:\n\n * 卡在 Kernel Panic Cannot perform kext summary\n * 卡在 Kernel Panic on Invalid frame pointer\n\n\n\n现在我们有了[PCI configuration begin]，这一节可以看作是对我们的系统、注入的kext和ssdt的硬件测试，IOKit在这里启动硬件探测以查找要连接的设备。\n\n这里测试的主要内容是:\n\n * 嵌入式控制器\n * 存储(NVMe、SATA等)\n * PCI/e\n * NVRAM\n * RTC\n * PS2 和 I2C\n\n关于如何绕过这个区域的更多具体信息，请参阅这里:\n\n * 卡在 RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n\n\n\n这就是15端口限制和USB映射发挥作用的地方，也是臭名昭著的 "Waiting for Root Device" 错误弹出的地方，主要检查:\n\n * "Waiting for Root Device" 或禁止符号错误\n\n\n\n这就是我们的FakeSMC/VirtualSMC发挥作用的地方，DSMOS本身是一个kext，它验证您的系统是否有一个SMC，并将请求一个密钥。如果这个密钥缺失，那么DSMOS将无法解密其余的二进制文件，您将被卡在这里。你也可能在AppleACPICPU遇到同样的错误。\n\n * kextd stall[0]: AppleACPICPU\n\n你今天的业力检查:\n曾经有一个用户抱怨\n他现有的操作系统太盲目了,\n他会做得更好,盗版操作系统跑好了\n但他发现硬件拒绝。\n请不要偷Mac OS!\n真的，这太不酷了。\n(C) Apple Computer, Inc.\n\n\n来源:不要窃取Mac OS X.kext\n\n\n\n这就是苹果的音频驱动程序和AppleALC的亮点所在。通常很少在这里看到问题，但如果有，请尝试禁用AppleALC和任何其他与音频相关的kext。\n\n\n\n这里我们进入了GPU驱动程序初始化，WhateverGreen也在这里发挥了它的魔力。这里的错误通常是由于GPU，而不是WhateverGreen本身，主要的罪魁祸首:\n\n * 卡在或靠近 IOConsoleUsers: gIOScreenLock...\n * IOConsoleUsers: gIOScreenLock...后出现黑屏…\n\n\n# macOS切换\n\n\n\n你终于摆脱了所有的啰嗦!如果在啰嗦模式过去了这么多之后，你还在纠结于苹果的logo，那么有几件事需要检查:\n\n * macOS 在登录前冻结\n * IOConsoleUsers: gIOScreenLock... 后出现黑屏…\n * 在macOS安装程序30秒后冻结',normalizedContent:'# 了解macos引导过程\n\n在对hackintosh进行故障诊断时，要真正理解您在哪里遇到困难可能有点困难，因为您试图搜索的确切关键字可能与谷歌上的任何内容都不匹配。虽然这篇文章不会解决你所有的问题，但它至少可以帮助你更好地理解macos启动过程中哪里卡住了，并希望能给你一些为什么卡住的想法。\n\n\n# opencore启动\n\n本节将会很简短，因为opencore引导问题相当罕见，通常是简单的用户错误:\n\n * 系统启动并搜索启动设备\n * 系统在您的 opencore usb 上的 efi/boot/ 下定位 bootx64.efi\n * 加载boot x64.efi，然后从 efi/oc/ 链式加载 opencore.efi\n * 应用nvram属性\n * efi 驱动程序是从 efi/oc/drivers 加载的\n * 安装了图形输出协议(gop)\n * acpi 表是从 efi/oc/acpi 加载的\n * smbios数据应用\n * opencore 加载和显示所有可能的引导选项\n * 你现在启动你的macos安装程序\n\n如果你在这一点上启动有问题，主要检查:\n\n * 卡在 no vault provided!\n * 看不到 macos 分区\n * 引导 opencore 重启到 bios\n\n关于其他可能的问题，请参见:\n\n * opencore 启动问题\n\n\n# boot.efi 切换\n\n\n\n这是macos的引导加载程序(boot.efi)出现的地方，具体来说，它所做的是为内核加载准备环境，以及opencore注入kext的地方。如果你在这一点上卡住了，很可能是加载内核有问题，主要的罪魁祸首是:\n\n * 卡在 endrandomseed\n * 卡在 [eb|#log:exitbs:start]\n * 收到 couldn\'t allocate runtime area errors\n\n关于其他可能的问题，请参见:\n\n * 内核问题\n\n注意:在macos 10.15.4中，苹果更改了boot.efi调试协议，所以看起来与之前有很大的不同，但所有的规则仍然适用\n\n\n# xnu/内核切换\n\n现在启动efi已经为我们设置好了一切，我们现在可以观察内核的工作了。这部分通常被称为rooting phase:\n\n\n\n本节是验证 smbios 数据、加载 acpi 表 /kext 以及 macos 试图使一切正常的地方。这里的失败通常是以下原因造成的:\n\n * 损坏的ssdt\n * 损坏的kext(或配置文件plist -> kernel -> add下的设置不正确)\n * 混乱的内存映射\n\n查看此处获取更多故障诊断信息:\n\n * 卡在 kernel panic cannot perform kext summary\n * 卡在 kernel panic on invalid frame pointer\n\n\n\n现在我们有了[pci configuration begin]，这一节可以看作是对我们的系统、注入的kext和ssdt的硬件测试，iokit在这里启动硬件探测以查找要连接的设备。\n\n这里测试的主要内容是:\n\n * 嵌入式控制器\n * 存储(nvme、sata等)\n * pci/e\n * nvram\n * rtc\n * ps2 和 i2c\n\n关于如何绕过这个区域的更多具体信息，请参阅这里:\n\n * 卡在 rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n\n\n\n这就是15端口限制和usb映射发挥作用的地方，也是臭名昭著的 "waiting for root device" 错误弹出的地方，主要检查:\n\n * "waiting for root device" 或禁止符号错误\n\n\n\n这就是我们的fakesmc/virtualsmc发挥作用的地方，dsmos本身是一个kext，它验证您的系统是否有一个smc，并将请求一个密钥。如果这个密钥缺失，那么dsmos将无法解密其余的二进制文件，您将被卡在这里。你也可能在appleacpicpu遇到同样的错误。\n\n * kextd stall[0]: appleacpicpu\n\n你今天的业力检查:\n曾经有一个用户抱怨\n他现有的操作系统太盲目了,\n他会做得更好,盗版操作系统跑好了\n但他发现硬件拒绝。\n请不要偷mac os!\n真的，这太不酷了。\n(c) apple computer, inc.\n\n\n来源:不要窃取mac os x.kext\n\n\n\n这就是苹果的音频驱动程序和applealc的亮点所在。通常很少在这里看到问题，但如果有，请尝试禁用applealc和任何其他与音频相关的kext。\n\n\n\n这里我们进入了gpu驱动程序初始化，whatevergreen也在这里发挥了它的魔力。这里的错误通常是由于gpu，而不是whatevergreen本身，主要的罪魁祸首:\n\n * 卡在或靠近 ioconsoleusers: gioscreenlock...\n * ioconsoleusers: gioscreenlock...后出现黑屏…\n\n\n# macos切换\n\n\n\n你终于摆脱了所有的啰嗦!如果在啰嗦模式过去了这么多之后，你还在纠结于苹果的logo，那么有几件事需要检查:\n\n * macos 在登录前冻结\n * ioconsoleusers: gioscreenlock... 后出现黑屏…\n * 在macos安装程序30秒后冻结',charsets:{cjk:!0}},{title:"OpenCore调试",frontmatter:{},regularPath:"/troubleshooting/debug.html",relativePath:"troubleshooting/debug.md",key:"v-dca255e6",path:"/troubleshooting/debug.html",headers:[{level:2,title:"文件交换",slug:"文件交换",normalizedTitle:"文件交换",charIndex:50},{level:2,title:"配置更改",slug:"配置更改",normalizedTitle:"配置更改",charIndex:58},{level:3,title:"Misc > Debug",slug:"misc-debug",normalizedTitle:"misc &gt; debug",charIndex:null},{level:2,title:"禁用所有的日志",slug:"禁用所有的日志",normalizedTitle:"禁用所有的日志",charIndex:84}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"文件交换 配置更改 Misc > Debug 禁用所有的日志",content:"# OpenCore调试\n\n需要弄清楚为什么你会遇到问题或停滞不前?嗯，你来对地方了:\n\n\n\n * 文件交换\n * 配置更改\n   * Misc > Debug\n * 禁用所有的日志\n\n\n\n\n# 文件交换\n\n首先，确保你使用的是DEBUG或NOOPT版本的OpenCore。这将提供比RELEASE版本更多的信息，需要交换的特定文件:\n\n * EFI/BOOT/\n   * BOOTx64.efi\n * EFI/OC/Drivers/\n   * OpenRuntime.efi\n   * OpenCanopy.efi(如果你正在使用它)\n * EFI/OC/\n   * OpenCore.efi\n\n\n\n * 注意:通常最好调试没有OpenCanopy的系统，如果需要，确保这个文件来自debug，否则几乎没有调试信息。\n\n\n# 配置更改\n\n接下来，转到你的config plist并找到Misc > Debug部分，我们有几个条目需要使用:\n\n\n# Misc > Debug\n\n这里我们需要启用以下功能:\n\n * AppleDebug: 是\n   \n   * 提供更多调试信息，特别是与 boot.efi 相关的信息，并将日志存储到磁盘。\n\n * ApplePanic: 是\n   \n   * 这将允许内核错误被存储到磁盘，强烈建议在boot-args中保持keepsyms=1以尽可能多地保存信息。\n\n * DisableWatchdog: 是\n   \n   * 禁用UEFI看门狗，用于OpenCore在一些非关键的东西上停滞。\n\n * Target: 67 (或者在下面计算一个)\n   \n   * 用于开启不同级别的调试\n\n值      说明\n0x01   启用日志记录\n0x02   启用屏幕调试\n0x04   启用记录到数据中心\n0x08   启用串口日志功能.\n0x10   启用UEFI变量日志记录.\n0x20   启用非易失性UEFI变量日志记录.\n0x40   启用文件记录功能.\n\n要计算目标，可以使用十六进制计算器，然后将其转换为小数。对于我们来说，我们希望将我们的值存储到一个.txt文件中，以便以后查看:\n\n * 0x01 — 启用日志记录\n * 0x02 — 启用屏幕调试\n   * 请注意，对于GOP实现不佳的固件，这可能会严重增加启动时间\n * 0x40 — 将日志写入文件\n\n0x01 + 0x02 + 0x40 = 0x43\n\n0x43 转换成小数后变成 67\n\n我们可以设置 Misc -> Debug -> Target -> 67\n\n * DisplayLevel: 2147483714 (或者在下面计算一个)\n   * 用于设置记录的内容\n\n值            说明\n0x00000002   在DEBUG, NOOPT, RELEASE中发出警告\n0x00000040   DEBUG, NOOPT 中的调试信息。\n0x00400000   自定义构建中的调试详细信息。\n0x80000000   在DEBUG, NOOPT, RELEASE中出现的错误。\n\n完整的列表可以在 DebugLib.h中找到。\n\n对于我们来说，我们只需要以下内容:\n\n * 0x00000002 — 在DEBUG, NOOPT, RELEASE中发出警告\n * 0x00000040 — DEBUG, NOOPT 中的调试信息。\n * 0x80000000 — 在DEBUG, NOOPT, RELEASE中出现的错误。\n\n就像Target一样，我们使用十六进制计算器，然后转换为十进制:\n\n0x80000042 转换为小数变成 2147483714\n\nMisc -> Debug -> DisplayLevel -> 2147483714\n\n一旦完成，你的config.plist应该是这样的:\n\n\n\n\n# 禁用所有的日志\n\n要删除所有文件日志和调试消息，只需将所有OpenCore文件替换为发布中的文件，就像我们之前在file swap部分所做的那样。\n\n最后，要删除写入磁盘的操作，设置如下:\n\n * AppleDebug = NO\n * ApplePanic = NO\n * Target = 0",normalizedContent:"# opencore调试\n\n需要弄清楚为什么你会遇到问题或停滞不前?嗯，你来对地方了:\n\n\n\n * 文件交换\n * 配置更改\n   * misc > debug\n * 禁用所有的日志\n\n\n\n\n# 文件交换\n\n首先，确保你使用的是debug或noopt版本的opencore。这将提供比release版本更多的信息，需要交换的特定文件:\n\n * efi/boot/\n   * bootx64.efi\n * efi/oc/drivers/\n   * openruntime.efi\n   * opencanopy.efi(如果你正在使用它)\n * efi/oc/\n   * opencore.efi\n\n\n\n * 注意:通常最好调试没有opencanopy的系统，如果需要，确保这个文件来自debug，否则几乎没有调试信息。\n\n\n# 配置更改\n\n接下来，转到你的config plist并找到misc > debug部分，我们有几个条目需要使用:\n\n\n# misc > debug\n\n这里我们需要启用以下功能:\n\n * appledebug: 是\n   \n   * 提供更多调试信息，特别是与 boot.efi 相关的信息，并将日志存储到磁盘。\n\n * applepanic: 是\n   \n   * 这将允许内核错误被存储到磁盘，强烈建议在boot-args中保持keepsyms=1以尽可能多地保存信息。\n\n * disablewatchdog: 是\n   \n   * 禁用uefi看门狗，用于opencore在一些非关键的东西上停滞。\n\n * target: 67 (或者在下面计算一个)\n   \n   * 用于开启不同级别的调试\n\n值      说明\n0x01   启用日志记录\n0x02   启用屏幕调试\n0x04   启用记录到数据中心\n0x08   启用串口日志功能.\n0x10   启用uefi变量日志记录.\n0x20   启用非易失性uefi变量日志记录.\n0x40   启用文件记录功能.\n\n要计算目标，可以使用十六进制计算器，然后将其转换为小数。对于我们来说，我们希望将我们的值存储到一个.txt文件中，以便以后查看:\n\n * 0x01 — 启用日志记录\n * 0x02 — 启用屏幕调试\n   * 请注意，对于gop实现不佳的固件，这可能会严重增加启动时间\n * 0x40 — 将日志写入文件\n\n0x01 + 0x02 + 0x40 = 0x43\n\n0x43 转换成小数后变成 67\n\n我们可以设置 misc -> debug -> target -> 67\n\n * displaylevel: 2147483714 (或者在下面计算一个)\n   * 用于设置记录的内容\n\n值            说明\n0x00000002   在debug, noopt, release中发出警告\n0x00000040   debug, noopt 中的调试信息。\n0x00400000   自定义构建中的调试详细信息。\n0x80000000   在debug, noopt, release中出现的错误。\n\n完整的列表可以在 debuglib.h中找到。\n\n对于我们来说，我们只需要以下内容:\n\n * 0x00000002 — 在debug, noopt, release中发出警告\n * 0x00000040 — debug, noopt 中的调试信息。\n * 0x80000000 — 在debug, noopt, release中出现的错误。\n\n就像target一样，我们使用十六进制计算器，然后转换为十进制:\n\n0x80000042 转换为小数变成 2147483714\n\nmisc -> debug -> displaylevel -> 2147483714\n\n一旦完成，你的config.plist应该是这样的:\n\n\n\n\n# 禁用所有的日志\n\n要删除所有文件日志和调试消息，只需将所有opencore文件替换为发布中的文件，就像我们之前在file swap部分所做的那样。\n\n最后，要删除写入磁盘的操作，设置如下:\n\n * appledebug = no\n * applepanic = no\n * target = 0",charsets:{cjk:!0}},{title:"内核空间问题",frontmatter:{},regularPath:"/troubleshooting/extended/kernel-issues.html",relativePath:"troubleshooting/extended/kernel-issues.md",key:"v-0be25d32",path:"/troubleshooting/extended/kernel-issues.html",headers:[{level:2,title:"卡在 [EB|#LOG:EXITBS:START]",slug:"卡在-eb-log-exitbs-start",normalizedTitle:"卡在 [eb|#log:exitbs:start]",charIndex:45},{level:3,title:"启动器问题",slug:"启动器问题",normalizedTitle:"启动器问题",charIndex:76},{level:3,title:"内核补丁问题",slug:"内核补丁问题",normalizedTitle:"内核补丁问题",charIndex:87},{level:3,title:"UEFI 问题",slug:"uefi-问题",normalizedTitle:"uefi 问题",charIndex:99},{level:2,title:"卡在 EndRandomSeed",slug:"卡在-endrandomseed",normalizedTitle:"卡在 endrandomseed",charIndex:110},{level:2,title:"在OpenCore中选择macOS分区后卡住",slug:"在opencore中选择macos分区后卡住",normalizedTitle:"在opencore中选择macos分区后卡住",charIndex:130},{level:2,title:"Getting the error X64 Exception Type... 有关AMD FX系统",slug:"getting-the-error-x64-exception-type-有关amd-fx系统",normalizedTitle:"getting the error x64 exception type... 有关amd fx系统",charIndex:156},{level:2,title:"内核崩溃 Invalid frame pointer",slug:"内核崩溃-invalid-frame-pointer",normalizedTitle:"内核崩溃 invalid frame pointer",charIndex:210},{level:2,title:"启动预引导卷时卡在 [EB|LD:OFS] Err(0xE)",slug:"启动预引导卷时卡在-eb-ld-ofs-err-0xe",normalizedTitle:"启动预引导卷时卡在 [eb|ld:ofs] err(0xe)",charIndex:240},{level:2,title:"卡在 OCB: LoadImage failed - Security Violation",slug:"卡在-ocb-loadimage-failed-security-violation",normalizedTitle:"卡在 ocb: loadimage failed - security violation",charIndex:274},{level:2,title:"卡在 OCABC: Memory pool allocation failure - Not Found",slug:"卡在-ocabc-memory-pool-allocation-failure-not-found",normalizedTitle:"卡在 ocabc: memory pool allocation failure - not found",charIndex:323},{level:2,title:"卡在 Buffer Too Small",slug:"卡在-buffer-too-small",normalizedTitle:"卡在 buffer too small",charIndex:379},{level:2,title:"卡在 Plist only kext has CFBundleExecutable key",slug:"卡在-plist-only-kext-has-cfbundleexecutable-key",normalizedTitle:"卡在 plist only kext has cfbundleexecutable key",charIndex:402},{level:2,title:"卡在 This version of Mac OS X is not supported: Reason Mac...",slug:"卡在-this-version-of-mac-os-x-is-not-supported-reason-mac",normalizedTitle:"卡在 this version of mac os x is not supported: reason mac...",charIndex:451},{level:2,title:"Couldn't allocate runtime area 错误",slug:"couldn-t-allocate-runtime-area-错误",normalizedTitle:"couldn't allocate runtime area 错误",charIndex:514},{level:2,title:"卡在 RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...",slug:"卡在-rtc-pci-configuration-begins-previous-shutdown-hpet-hid-legacy",normalizedTitle:"卡在 rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...",charIndex:551},{level:2,title:"卡在 ACPI table loading on B550",slug:"卡在-acpi-table-loading-on-b550",normalizedTitle:"卡在 acpi table loading on b550",charIndex:634},{level:2,title:'"Waiting for Root Device" 或 Prohibited Sign 错误',slug:"waiting-for-root-device-或-prohibited-sign-错误",normalizedTitle:"&quot;waiting for root device&quot; 或 prohibited sign 错误",charIndex:null},{level:3,title:"USB 的问题",slug:"usb-的问题",normalizedTitle:"usb 的问题",charIndex:719},{level:3,title:"SATA 问题",slug:"sata-问题",normalizedTitle:"sata 问题",charIndex:732},{level:2,title:"X99 上的 IOPCIFamily 内核崩溃",slug:"x99-上的-iopcifamily-内核崩溃",normalizedTitle:"x99 上的 iopcifamily 内核崩溃",charIndex:743},{level:2,title:"卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3...",slug:"卡在或靠近-ioconsoleusers-gioscreenlock-giolockstate-3",normalizedTitle:"卡在或靠近 ioconsoleusers: gioscreenlock.../giolockstate (3...",charIndex:770},{level:2,title:"笔记本电脑上的乱码屏幕",slug:"笔记本电脑上的乱码屏幕",normalizedTitle:"笔记本电脑上的乱码屏幕",charIndex:831},{level:2,title:"在Navi上 IOConsoleUsers: gIOScreenLock...之后出现黑屏",slug:"在navi上-ioconsoleusers-gioscreenlock-之后出现黑屏",normalizedTitle:"在navi上 ioconsoleusers: gioscreenlock...之后出现黑屏",charIndex:846},{level:2,title:"内核崩溃 Cannot perform kext summary",slug:"内核崩溃-cannot-perform-kext-summary",normalizedTitle:"内核崩溃 cannot perform kext summary",charIndex:895},{level:2,title:"内核崩溃 AppleIntelMCEReporter",slug:"内核崩溃-appleintelmcereporter",normalizedTitle:"内核崩溃 appleintelmcereporter",charIndex:931},{level:2,title:"内核崩溃 AppleIntelCPUPowerManagement",slug:"内核崩溃-appleintelcpupowermanagement",normalizedTitle:"内核崩溃 appleintelcpupowermanagement",charIndex:961},{level:2,title:"10.13中的内核崩溃 AppleACPIPlatform",slug:"_10-13中的内核崩溃-appleacpiplatform",normalizedTitle:"10.13中的内核崩溃 appleacpiplatform",charIndex:998},{level:2,title:"macOS在登录前就冻结了",slug:"macos在登录前就冻结了",normalizedTitle:"macos在登录前就冻结了",charIndex:1031},{level:2,title:"键盘可以用，但触控板不行",slug:"键盘可以用-但触控板不行",normalizedTitle:"键盘可以用，但触控板不行",charIndex:1048},{level:2,title:"kextd stall[0]: AppleACPICPU",slug:"kextd-stall-0-appleacpicpu",normalizedTitle:"kextd stall[0]: appleacpicpu",charIndex:1064},{level:2,title:"内核崩溃在 AppleIntelI210Ethernet",slug:"内核崩溃在-appleinteli210ethernet",normalizedTitle:"内核崩溃在 appleinteli210ethernet",charIndex:1096},{level:2,title:'用Icelake的用户，内核崩溃在 "Wrong CD Clock Frequency"',slug:"用icelake的用户-内核崩溃在-wrong-cd-clock-frequency",normalizedTitle:"用icelake的用户，内核崩溃在 &quot;wrong cd clock frequency&quot;",charIndex:null},{level:2,title:'内核崩溃在 "cckprngintgen"',slug:"内核崩溃在-cckprng-int-gen",normalizedTitle:"内核崩溃在 &quot;cckprngintgen&quot;",charIndex:null},{level:2,title:"在Big Sur中被卡在 Forcing CS_RUNTIME for entitlement",slug:"在big-sur中被卡在-forcing-cs-runtime-for-entitlement",normalizedTitle:"在big sur中被卡在 forcing cs_runtime for entitlement",charIndex:1201},{level:2,title:"卡在 ramrod(^^^^^^^^^^^^^)",slug:"卡在-ramrod",normalizedTitle:"卡在 ramrod(^^^^^^^^^^^^^)",charIndex:1252},{level:2,title:"虚拟机问题",slug:"虚拟机问题",normalizedTitle:"虚拟机问题",charIndex:1280},{level:2,title:'重启在 "AppleUSBHostPort::createDevice: failed to create device" 在 macOS 11.3+ 上',slug:"重启在-appleusbhostport-createdevice-failed-to-create-device-在-macos-11-3-上",normalizedTitle:"重启在 &quot;appleusbhostport::createdevice: failed to create device&quot; 在 macos 11.3+ 上",charIndex:null}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:'卡在 [EB|#LOG:EXITBS:START] 启动器问题 内核补丁问题 UEFI 问题 卡在 EndRandomSeed 在OpenCore中选择macOS分区后卡住 Getting the error X64 Exception Type... 有关AMD FX系统 内核崩溃 Invalid frame pointer 启动预引导卷时卡在 [EB|LD:OFS] Err(0xE) 卡在 OCB: LoadImage failed - Security Violation 卡在 OCABC: Memory pool allocation failure - Not Found 卡在 Buffer Too Small 卡在 Plist only kext has CFBundleExecutable key 卡在 This version of Mac OS X is not supported: Reason Mac... Couldn\'t allocate runtime area 错误 卡在 RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy... 卡在 ACPI table loading on B550 "Waiting for Root Device" 或 Prohibited Sign 错误 USB 的问题 SATA 问题 X99 上的 IOPCIFamily 内核崩溃 卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3... 笔记本电脑上的乱码屏幕 在Navi上 IOConsoleUsers: gIOScreenLock...之后出现黑屏 内核崩溃 Cannot perform kext summary 内核崩溃 AppleIntelMCEReporter 内核崩溃 AppleIntelCPUPowerManagement 10.13中的内核崩溃 AppleACPIPlatform macOS在登录前就冻结了 键盘可以用，但触控板不行 kextd stall[0]: AppleACPICPU 内核崩溃在 AppleIntelI210Ethernet 用Icelake的用户，内核崩溃在 "Wrong CD Clock Frequency" 内核崩溃在 "cckprngintgen" 在Big Sur中被卡在 Forcing CS_RUNTIME for entitlement 卡在 ramrod(^^^^^^^^^^^^^) 虚拟机问题 重启在 "AppleUSBHostPort::createDevice: failed to create device" 在 macOS 11.3+ 上',content:'# 内核空间问题\n\n从最初启动macOS安装程序到弹出安装GUI之前的问题。\n\n\n\n * 卡在 [EB|#LOG:EXITBS:START]\n   * 启动器问题\n   * 内核补丁问题\n   * UEFI 问题\n * 卡在 EndRandomSeed\n * 在OpenCore中选择macOS分区后卡住\n * Getting the error X64 Exception Type... 有关AMD FX系统\n * 内核崩溃 Invalid frame pointer\n * 启动预引导卷时卡在 [EB|LD:OFS] Err(0xE)\n * 卡在 OCB: LoadImage failed - Security Violation\n * 卡在 OCABC: Memory pool allocation failure - Not Found\n * 卡在 Buffer Too Small\n * 卡在 Plist only kext has CFBundleExecutable key\n * 卡在 This version of Mac OS X is not supported: Reason Mac...\n * Couldn\'t allocate runtime area 错误\n * 卡在 RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n * 卡在 ACPI table loading on B550\n * "Waiting for Root Device" 或 Prohibited Sign 错误\n   * USB 的问题\n   * SATA 问题\n * X99 上的 IOPCIFamily 内核崩溃\n * 卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n * 笔记本电脑上的乱码屏幕\n * 在Navi上 IOConsoleUsers: gIOScreenLock...之后出现黑屏\n * 内核崩溃 Cannot perform kext summary\n * 内核崩溃 AppleIntelMCEReporter\n * 内核崩溃 AppleIntelCPUPowerManagement\n * 10.13中的内核崩溃 AppleACPIPlatform\n * macOS在登录前就冻结了\n * 键盘可以用，但触控板不行\n * kextd stall[0]: AppleACPICPU\n * 内核崩溃在 AppleIntelI210Ethernet\n * 用Icelake的用户，内核崩溃在 "Wrong CD Clock Frequency"\n * 内核崩溃在 "cckprngintgen"\n * 在Big Sur中被卡在 Forcing CS_RUNTIME for entitlement\n * 卡在 ramrod(^^^^^^^^^^^^^)\n * 虚拟机问题\n * 重启在 "AppleUSBHostPort::createDevice: failed to create device" 在 macOS 11.3+ 上\n\n\n\n\n# 卡在 [EB|#LOG:EXITBS:START]\n\n本节将分为3部分，请仔细阅读。\n\n * 启动器问题\n * 内核补丁问题\n * UEFI 问题\n * 虚拟机问题\n\n\n# 启动器问题\n\n在Booter部分需要注意的主要问题有:\n\n * DevirtualiseMmio\n   \n   * 某些MMIO空间仍然需要正常工作，所以你需要在 Booter -> MmioWhitelist 中排除这些区域或完全禁用此选项。 更多信息在这里: Using DevirtualiseMmio\n   * 对于TRx40用户，启用此功能\n   * 对于X99的用户，禁用这种功能，因为它会被某些固件破坏\n\n * SetupVirtualMap\n   \n   * 大多数固件都需要这个功能，如果没有这个功能，内核崩溃就很常见，所以如果还没有启用它的话就启用它\n     * 主要是Z390和更老的版本需要启用这个功能\n     * 但是，某些固件(主要是2020年以上)不能使用这种特性，因此实际上可能会导致这种内核崩溃:\n       * 英特尔(Intel)的Ice Lake系列\n       * 英特尔Comet Lake系列(B460, H470, Z490等)\n       * 英特尔Comet Lake系列(B460, H470, Z490等)\n         * 许多B450和X470板2020年底BIOS更新也包括在内\n       * AMD的TRx40\n       * QEMU等虚拟机\n       * X299 2020+ BIOS更新(这适用于2019年底或2020+发布的最新BIOS上的其他X299板)\n\n * EnableWriteUnprotector\n   \n   * 另一个问题可能是macOS与CR0寄存器的写保护冲突，为了解决这个问题，我们有两个选择:\n     * 如果您的固件支持MATs(2018+固件):\n       * EnableWriteUnprotector -> False\n       * RebuildAppleMemoryMap -> True\n       * SyncRuntimePermissions -> True\n     * 对于旧的固件:\n       * EnableWriteUnprotector -> True\n       * RebuildAppleMemoryMap -> False\n       * SyncRuntimePermissions -> False\n     * 注意:一些笔记本电脑(例如：Dell Inspiron 5370)即使有MATs支持也会在启动时停止，在这种情况下你有两个选择:\n       * 启动与旧固件功能组合(即：使用EnableWriteUnprotector 并禁用 RebuildAppleMemoryMap + SyncRuntimePermissions)\n       * 启用 DevirtualiseMmio 并遵循MmioWhitelist指南\n\n关于对MATs的支持，针对EDK 2018构建的固件将支持这一点，许多oem甚至已经增加了对Skylake笔记本电脑的支持。问题是它不是总是明显的，如果一个OEM已经更新固件，你可以检查OpenCore日志是否支持它(查看这里如何获取日志):\n\nOCABC: MAT support is 1\n\n\n * 注意:1表示支持MATs，而0表示不支持。\n\n\n# 内核补丁问题\n\n本节将分为英特尔和AMD用户两部分:\n\n# AMD 用户\n\n * 缺少内核补丁(only适用于AMD cpu，确保它们是OpenCore补丁而不是Clover。Clover使用“MatchOS”，而OpenCore有 MinKernel 和 Maxkernel)\n   * 请注意，过时的内核补丁也会有同样的效果，请确保您使用的是AMD OS X的最新补丁\n\n# Intel 用户\n\n * AppleXcpmCfgLock 和 AppleCpuPmCfgLock\n   * 缺少CFG或XCPM补丁，请启用 AppleXcpmCfgLock 和 AppleCpuPmCfgLock\n     * Haswell和更新版本只需要AppleXcpmCfgLock\n     * Ivy Bridge和更老的只需要AppleCpuPmCfgLock\n       * 如果运行10.10或更高版本，Broadwell及更老版本需要AppleCpuPmCfgLock\n   * 或者你可以正确地禁用CFG-Lock:修复CFG锁\n * AppleXcpmExtraMsrs\n   * 也可能需要，这通常指的是Pentiums, HEDT和其他macOS原生不支持的特定系统。\n\n# Intel 老用户\n\n对于macOS Big Sur，许多固件在确定CPU核心数时都存在问题，因此会过早出现内核崩溃，无法进行啰嗦模式的错误显示。通过serial命令，你会看到如下提示:\n\nmax_cpus_from_firmware not yet initialized\n\n\n解决:\n\n * 在Booter -> Quirks下启用 AvoidRuntimeDefrag\n   * 这应该适用于大多数固件\n\n然而，在某些机器上，如HP Compaq DC 7900，固件仍然会出现问题，因此我们需要强制设置CPU核心数。只有在AvoidRuntimeDefrag不起作用时，才使用下面的补丁:\n\n旧CPU核心补丁\n\n为此，添加以下补丁(用硬件支持的CPU线程数量替换B8 04 00 00 C3中的04):\n\nKEY           TYPE      VALUE\nBase          String    _acpi_count_enabled_logical_processors\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    Kernel\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B804000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\n\n# UEFI 问题\n\n * ProvideConsoleGop\n   * 需要过渡到下一个屏幕，这最初是AptioMemoryFix的一部分，但现在在OpenCore中以这个功能提供。可以在UEFI -> Output下找到\n   * 注意，从0.5.6开始，sample.plist默认启用了这个功能\n * IgnoreInvalidFlexRatio\n   * 这是Broadwell和更老的所需要的。AMD和Skylake或更新版本不支持\n\n\n# 卡在 EndRandomSeed\n\n与上面相同的问题，请参阅此处了解更多详细信息: 卡在 [EB|#LOG:EXITBS:START]\n\n\n# 在OpenCore中选择macOS分区后卡住\n\n与上面相同的问题，请参阅此处了解更多详细信息: 卡在 [EB|#LOG:EXITBS:START]\n\n * 注意:启用DEBUG OpenCore 也可以帮助揭示一些信息\n\n\n# Getting the error X64 Exception Type... 有关AMD FX系统\n\n此错误可能有多种原因:\n\n * 此错误可能有多种原因:\n   \n   也可以称为遗留引导支持，加载遗留选项rom /OPROMs\n\n * ProvideCurrentCpuInfo功能(统一补丁所需)与您的固件不兼容:\n   \n   这意味着您需要使用旧版本的补丁 和Big Sur或更早的版本。下载上面链接的旧补丁后，将它们合并到config.plist 中(确保先删除旧补丁)。\n\n一个例子:\n\n\n\n\n# 内核崩溃 Invalid frame pointer\n\n这是由于您设置的Booter -> Quirks的一些问题，主要检查:\n\n * DevirtualiseMmio\n   \n   * 某些MMIO空间仍然需要正确运行，因此您需要在Booter -> MmioWhitelist中排除这些区域或完全禁用此功能\n   * 更多信息:使用 DevirtualiseMmio\n\n * SetupVirtualMap\n   \n   * 大多数固件都需要这个功能，如果没有这个功能，内核崩溃就很常见，所以如果还没有启用它的话就启用它\n     * 但是，某些固件无法处理这种情况，因此实际上可能会导致这种内核错误:\n       * 英特尔(Intel)的Ice Lake系列\n       * 英特尔的Comet Lake系列\n       * AMD 的 B550\n       * AMD 的 A520\n       * AMD 的 TRx40\n       * QEMU等虚拟机\n\n另一个问题可能是macOS与CR0寄存器的写保护冲突，要解决这个问题，我们有两个选项:\n\n * 如果您的固件支持MATs(2018+固件):\n   * EnableWriteUnprotector -> False\n   * RebuildAppleMemoryMap -> True\n   * SyncRuntimePermissions -> True\n * 对于旧的固件:\n   * EnableWriteUnprotector -> True\n   * RebuildAppleMemoryMap -> False\n   * SyncRuntimePermissions -> False\n\n关于对MATs的支持，针对EDK 2018构建的固件将支持这一点，许多oem甚至已经增加了对Skylake笔记本电脑的支持。问题是它不是总是明显的，如果一个OEM已经更新了固件，你可以检查OpenCore日志查看你的是否支持:\n\nOCABC: MAT support is 1\n\n\n注意:“1”表示支持MATs，而“0”表示不支持。\n\n\n# 启动预引导卷时卡在 [EB|LD:OFS] Err(0xE)\n\n完整的错误:\n\n[EB|`LD:OFS] Err(0xE) @ OPEN (System\\\\Library\\\\PrelinkedKernels\\\\prelinkedkernel)\n\n\n当预引导卷没有正确更新时可能会发生这种情况，要修复这个问题，您需要启动到recovery并修复它:\n\n 1. 在UEFI -> APFS下启用JumpstartHotplug(没有这个选项，macOS Big Sur恢复可能无法启动)\n 2. 启动进入恢复\n 3. 打开终端并运行以下命令:\n\n# 首先，找到Preboot卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到Preboot卷是disk5s2\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# 现在挂载Preboot卷\ndiskutil mount disk5s2\n\n# 接下来在Preboot卷上运行update Preboot\ndiskutil apfs updatePreboot /volume/disk5s2\n\n\n最后重启\n\n\n# 卡在 OCB: LoadImage failed - Security Violation\n\nOCSB: No suitable signature - Security Violation\nOCB: Apple Secure Boot prohibits this boot entry, enforcing!\nOCB: LoadImage failed - Security Violation\n\n\n这是由于缺少预先引导卷上的过期苹果安全引导清单导致加载失败，如果您设置了SecureBootModel，则这些文件丢失的原因实际上是macOS中的一个bug。\n\n要解决这个问题，你可以采取以下方法之一:\n\n * 禁用 SecureBootModel\n   * 设置 Misc -> Security -> SecureBootModel -> Disabled\n * 重新安装最新版本的macOS\n * 或将安全启动清单从/usr/standalone/i386复制到/Volumes/Preboot/<UUID>/System/Library/CoreServices\n   * 注意，你很可能需要通过终端这样做，因为预引导卷不容易通过Finder编辑\n\n要通过终端来做到这一点:\n\n# 首先，找到Preboot卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到Preboot卷是disk5s2\n/dev/disk5 (synthesized):\n   #:                       类型名称                    大小       标识符\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# 现在挂载Preboot卷\ndiskutil mount disk5s2\n\n# CD到预引导卷中\n# 注意实际的卷在/System/Volumes/Preboot下面\ncd /System/Volumes/Preboot\n\n# 获取UUID\nls\n 46923F6E-968E-46E9-AC6D-9E6141DF52FD\n CD844C38-1A25-48D5-9388-5D62AA46CFB8\n\n# 如果显示了多个版本(即双启动多个版本的macOS)，则会显示\n# 需要确定哪个UUID是正确的。\n# 确定最简单的方法是打印.disk_label.contentDetails的值\n# 每个卷的\ncat ./46923F6E-968E-46E9-AC6D-9E6141DF52FD/System/Library/CoreServices/.disk_label.contentDetails\n Big Sur HD%\n\ncat ./CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices/.disk_label.contentDetails\n Catalina HD%\n\n# 接下来复制安全引导文件\n# 用UUID值替换CD844C38-1A25-48D5-9388-5D62AA46CFB8\ncd ~\nsudo cp -a /usr/standalone/i386/. /System/Volumes/Preboot/CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices\n\n\n\n# 卡在 OCABC: Memory pool allocation failure - Not Found\n\n这是由于不正确的BIOS设置:\n\n * 4g以上解码是启用的（Above4GDecoding）\n * CSM被禁用(在某些板上启用Windows8.1/10 WHQL模式可以执行相同的操作)\n   * 注意，在某些笔记本电脑上，必须启用CSM\n * BIOS是最新的(众所周知，Z390和HEDT的固件编写得很糟糕)\n\n\n# 卡在 Buffer Too Small\n\n * 在BIOS中启用4G以上解码（Above4GDecoding）\n\n\n# 卡在 Plist only kext has CFBundleExecutable key\n\n配置列表中缺少或不正确的可执行路径，应该通过重新运行ProperTree的快照工具(Cmd/Ctrl+R)来解决。\n\n\n# 卡在 This version of Mac OS X is not supported: Reason Mac...\n\n当该版本的macOS不再支持SMBIOS时发生此错误，请确保在PlatformInfo->Generic中设置了Automatic。有关支持的SMBIOS及其操作系统的完整列表，请参见这里:选择正确的SMBIOS\n\nmacOS 10.15、Catalina支持的SMBIOS\n * iMac13,x+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini6,x+\n * MacBook8,1+\n * MacBookAir5,x+\n * MacBookPro9,x+\n\nmacOS 11, Big Sur支持的SMBIOS\n * iMac14,4+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini7,1+\n * MacBook8,1+\n * MacBookAir6,x+\n * MacBookPro11,x+\n\nmacOS 12, Monterey支持的SMBIOS\n * iMac16,1+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini7,1+\n * MacBook9,1+\n * MacBookAir7,1+\n * MacBookPro11,3+\n\nmacOS 13、Ventura支持的SMBIOS\n * iMac18,x+\n * iMacPro1,1\n * MacPro7,1\n * Macmini8,1\n * MacBook10,1\n * MacBookAir8,1+\n * MacBookPro14,x+\n\n\n# Couldn\'t allocate runtime area 错误\n\n参见修正KASLR滑块值\n\n\n# 卡在 RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n\n这个区域是许多PCI设备第一次设置和配置的地方，也是大多数启动问题发生的地方。其他名称包括:\n\n * apfs_module_start...,\n * Waiting for Root device,\n * Waiting on...IOResources...,\n * previous shutdown cause...\n\n主要检查的地方:\n\n * 缺少 EC 补丁:\n   \n   * 确保在你的 EFI/OC/ACPI 和 ACPI->Add 中都有 EC SSDT， 再次检查它是否启用\n   * 如果你还没有ACPI，请点击这里: 开始使用ACPI\n\n * IRQ 冲突:\n   \n   * 最常见的是在旧的笔记本电脑和预构建，运行SSDTTime的FixHPET选项，并将产生的SSDT-hpet.aml和ACPI补丁添加到配置中(没有ACPI补丁，SSDT将无法工作)\n\n * PCI 分配问题:\n   \n   * 更新你的BIOS, 确保它是最新的。大多数oem在旧的固件上的PCI分配非常不稳定，特别是AMD\n   * 确保在BIOS中启用Above4G，如果没有可用选项，则添加npci=0x2000或npci=0x3000(一次尝试一个)引导参数。\n     * 一些X99和X299板(如GA-X299-UD4)可能需要npci引导参数和Above4G启用\n     * AMD CPU注意:在引导参数中不要同时启用Above4G设置和npci设置，它们会冲突\n     * 2020+ BIOS注意:当启用Above4G时，Resizable BAR支持可能成为可用的。如果启用，请确保Booter -> Quirks -> ResizeAppleGpuBars设置为0。\n   * 其他重要的BIOS设置:禁用CSM，启用Windows 8.1/10 UEFI模式\n\n * NVMe 或 SATA 问题:\n   \n   * 有时，如果使用了坏的SATA控制器或不支持的NVMe驱动器，你通常会被卡在这里。你可以检查的内容:\n     * 不使用三星PM981或Micron 2200S NVMe SSD\n     * 三星970 EVO Plus运行最新的固件(旧的固件以不稳定和停滞著称，查看更多信息)\n     * SATA热插拔在BIOS中被禁用(在基于AMD CPU的系统上通常会导致问题)\n     * 确保NVMe驱动器在BIOS中设置为NVMe模式(一些BIOS有一个bug，你可以将NVMe驱动器设置为SATA)\n\n * NVRAM 故障:\n   \n   * HEDT和300系列主板常见问题，你有几个路径可以走:\n     * 消费者英特尔300系列:看开始使用 ACPI制作SSDT-PMC.aml\n     * HEDT(ie X99):请参阅模拟NVRAM关于如何停止NVRAM写入，注意，安装时您不需要运行脚本。只需设置config.plist\n\n * RTC 缺失:\n   \n   * 通常在Intel的300+系列(即Z370, Z490)上发现，这是由默认禁用RTC时钟引起的。请参阅开始使用ACPI创建SSDT-AWAC.aml\n   * X99和X299的RTC设备坏了，所以需要用SSDT-RTC0-RANGE修复。请参阅开始使用ACPI创建上述文件\n   * 惠普的一些固件编写人员也禁用了HP 250g6上的RTC，但实际上没有办法重新启用它\n     * 已知受影响型号:HP 15-DA0014dx， HP 250 G6\n     * 对于被这样的硬件所困扰的用户，你需要创建一个假的RTC时钟供macOS使用。有关更多细节，请参阅开始使用ACPI，以及下面的图像示例:\n\n一个被禁用且无法启用的RTC是什么样子的示例(注意，没有像STAS那样的值来重新启用它):\n\n\n\n\n# 卡在 ACPI table loading on B550\n\n\n\n如果你在用AMD B550或A520主板加载ACPI表时遇到问题，请添加以下SSDT:\n\n * SSDT-CPUR.aml\n\n请记住将此SSDT添加到EFI/OC/ACPI 和 ACPI下的config plist -> add (ProperTree的快照函数可以为您完成此工作)\n\n\n# "Waiting for Root Device" 或 Prohibited Sign 错误\n\n * 其他名称: Stop Sign, Scrambled\n\n这通常被认为是USB或SATA的错误，有几种方法可以修复:\n\n\n# USB 的问题\n\n这假设你只是引导安装程序USB，而不是macOS本身。\n\n * 如果你达到了15个端口的限制，你需要做一个USB地图\n\n * 另一个问题可能是，某些固件不会将USB所有权传递给macOS\n   \n   * UEFI -> Quirks -> ReleaseUsbOwnership -> True\n   * 在BIOS中启用EHCI/XHCI切换也可以修复这个问题\n\n * 有时，如果USB插入3.x端口，将其插入2.0端口可以修复此错误，反之亦然。\n\n * 对于AMD的15h和16h cpu，您可能需要添加以下内容:\n   \n   * XLNCUSBFix.kext\n\n * 如果XLNCUSBFix仍然不起作用，那么在XLNCUSBFix旁边尝试以下操作:\n   \n   * AMD StopSign-fixv5\n\n * X299用户:启用Above4G解码\n   \n   * X299上的奇怪固件bug，否则USB会损坏\n\n * ACPI中缺少USB端口:\n   \n   * 对于英特尔的Coffee Lake及更老版本，我们推荐使用USBInjectAll\n   * 对于英特尔的 Ice Lake 和 Comet Lake, 我们推荐 SSDT-RHUB\n     * SSDTTime的 7. USB Reset USB复位的选项可以做同样的事情\n   * 对于AMD,运行SSDTTime的 7. USB Reset 选项，并将提供的SSDT-RHUB添加到您的EFI和config.plist\n\n\n# SATA 问题\n\n在极少数情况下(主要是笔记本电脑)，SATA控制器不受macOS的正式支持。为了解决这个问题，我们需要做以下几件事:\n\n * 在BIOS中设置“SATA”为“AHCI”模式\n   * macOS不支持硬件RAID或IDE模式。\n   * 注意已经使用英特尔快速存储技术(RST, Windows和Linux软RAID)的驱动器将无法在macOS中访问。\n * SATA-unsupported.kext\n   * 增加对模糊SATA控制器的支持，通常是笔记本电脑。\n   * 对于非常传统的SATA控制器， AHCIPortInjector.kext 可能更合适。\n * Catalina的补丁 AppleAHCIPort.kext\n   * 对于运行macOS 11、Big Sur和有问题的用户。这向后移植了已知的工作的Catalina kext，这个kext不需要SATA-unsupported\n\n注意，只有在将macOS安装到驱动器后，你才会遇到这个问题，启动macOS安装程序不会因为SATA问题而出错。\n\n\n# X99 上的 IOPCIFamily 内核崩溃\n\n对于那些从英特尔运行X99平台的人，请阅读以下内容:\n\n * 启用以下内核补丁:\n   * AppleCpuPmCfgLock\n   * AppleXcpmCfgLock\n   * AppleXcpmExtraMsrs\n * 你有以下ssd:\n   * SSDT-UNC(如果没有，请参阅开始使用ACPI 创建上述文件)\n\n\n# 卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n\n这是在GPU正确初始化之前，验证以下内容:\n\n * GPU支持UEFI (GTX 7XX/2013+)\n * BIOS中CSM是关闭的\n   * 可能需要在笔记本电脑上启用\n * 强制使用PCIe 3.0链路速度\n * 如果运行iGPU，请仔细检查ig-platform-id和device-id是否有效。\n   * 桌面UHD 630可能需要使用“00009B3E”代替\n * 尝试各种WhateverGreen修复\n   * -igfxmlr 引导参数。这也可以表现为 "Divide by Zero" 错误。\n * 在10.15.4及更新版本中，Coffee Lake iGPU用户可能还需要igfxonln=1\n\n\n# 笔记本电脑上的乱码屏幕\n\n在UEFI设置中启用CSM。这可能显示为 "Boot legacy ROMs" 或其他 legacy 设置。\n\n\n# 在Navi上 IOConsoleUsers: gIOScreenLock...之后出现黑屏\n\n * 在引导参数中添加 agdpmod=pikera\n * 切换不同的显示输出\n * 尝试运行MacPro7,1 SMBIOS引导参数 agdpmod=ignore\n\n对于MSI Navi用户，您需要应用这里提到的补丁:安装程序不能与5700xt# 901工作\n\n具体来说，在Kernel -> Patch下添加以下条目:\n\nMSI Navi 补丁\n\nBase:\nComment: Navi VBIOS Bug Patch\nCount: 1\nEnabled: YES\nFind: 4154592C526F6D2300\nIdentifier: com.apple.kext.AMDRadeonX6000Framebuffer\nLimit: 0\nMask:\nMinKernel: 19.00.00\nMaxKernel: 19.99.99\nReplace: 414D442C526F6D2300\nReplaceMask:\nSkip: 0\n\n\n注意:macOS 11，大苏尔不再需要这个补丁的MSI Navi。\n\n\n# 内核崩溃 Cannot perform kext summary\n\n通常被认为是围绕着预链接内核的问题，特别是macOS很难解释我们注入的内核。验证:\n\n * 你的kext顺序是正确的(master然后插件，Lilu总是在插件之前)\n * 带有可执行文件的kext有它们，而plist只有kext没有(即USBmap.kext, XHCI-unspported.kext等不包含可执行文件)\n * 不要在config.plist中包含多个相同的kext。包括来自多个kext的VoodooInput的多个副本，我们建议选择配置数组中的第一个kext，并禁用其他kext)\n\n注意:此错误可能看起来也非常类似于 内核崩溃在 Invalid frame pointer\n\n\n# 内核崩溃 AppleIntelMCEReporter\n\n在macOS Catalina中，双插槽支持被破坏了，关于AMD固件的一个有趣的事实是，一些主板实际上会报告多个插槽的cpu。为了解决这个问题，在EFI/OC/ kext和config中添加 AppleMCEReporterDisabler 到EFI/OC/kext 和 config plist -> Kernel -> add\n\n\n# 内核崩溃 AppleIntelCPUPowerManagement\n\n这可能是由于 NullCPUPowerManagement 错误或完全缺失。要解决这个问题，请从Kernel->Add和EFI/OC/kext中移除NullCPUPowerManagement，然后在Kernel->Emulate中启用DummyPowerManagement。\n\n * 注:在旧的英特尔cpu(即。Penryn或更老的版本)，可能是由于IRQ冲突或HPET设备被禁用。要解决这个问题，你有两个选择:\n   * SSDTTime的修复HPET选项\n   * 强制启用HPET设备\n\n强制启用HPET设备\n\n在 ACPI -> Patch:\n\nCOMMENT   STRING    FORCE HPET ONLINE\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      A010934F53464C00\nReplace   Data      A40A0FA3A3A3A3A3\n\n\n# 10.13中的内核崩溃 AppleACPIPlatform\n\n\n\n在macOS 10.13上，High Sierra操作系统对ACPI表更加严格，特别是关于头文件如何处理的bug. 要解决这个问题，请在config.plist的ACPI -> Quirks下启用 NormalizeHeaders\n\n\n# macOS在登录前就冻结了\n\n这是一个常见的TSC错误的例子，对于大多数系统添加CpuTscSync\n\n查看TSC问题的最常见方法:\n\n案例 1   案例 2\n       \n\n\n# 键盘可以用，但触控板不行\n\n确保VoodooInput在config.plist的voodooops2和VoodooI2C kext之前列出。\n\nVoodooI2C 故障处理\n\n检查你的kext加载的顺序-使它们与收集文件下显示的内容相匹配::\n\n 1. VoodooGPIO、VoodooInput和VoodooI2CServices，顺序不限(可以在VoodooI2C.kext/Contents/PlugIns目录下找到)\n 2. VoodooI2C\n 3. Satellite/Plugin Kext\n\n确保在EFI/OC/ACPI中有SSDT-GPIO，并且在ACPI ->的config.plist中添加SSDT-GPIO。如果仍然有问题，请参考ACPI GPIO入门页面.\n\n\n# kextd stall[0]: AppleACPICPU\n\n这是由于缺少SMC模拟器或损坏的模拟器造成的，请确保以下内容:\n\n * Lilu和VirtualSMC都在EFI/OC/kext和config.plist中\n * Lilu在kext列表中位于VirtualSMC之前\n * 最后的方法是尝试FakeSMC, 不要同时启用 VirtualSMC 和 FakeSMC\n\n\n# 内核崩溃在 AppleIntelI210Ethernet\n\n对于那些运行带有I225-V网卡的Comet lake主板，由于I210 kext，您可能会在启动时遇到内核panic。要解决这个问题，请确保您的以太网有正确的PciRoot。这通常是:\n\n * PciRoot(0x0)/Pci(0x1C,0x1)/Pci(0x0, 0x0)\n   * 默认情况下，这是华硕和Gigabyte主板使用的\n * PciRoot(0x0)/Pci(0x1C,0x4)/Pci(0x0,0x0)\n   * 一些oem厂商可能会使用这个代替\n\n对于那些可以手动连接到你的PciRoot的人，你需要完全安装macOS并使用gfxutil:\n\n/path/to/gfxutil | grep -i "8086:15f3"\n\n\n这应该会输出如下内容:\n\n00:1f.6 8086:15f3 /PC00@0/GBE1@1F,6 = PciRoot(0x0)/Pci(0x1F,0x6)\n\n\n最后的PciRoot(0x0)/Pci(0x1F,0x6)是你要添加到配置plist中的device-id为F2150000的内容。\n\n\n# 用Icelake的用户，内核崩溃在 "Wrong CD Clock Frequency"\n\n\n\nTo 要解决这个内核问题，请确保你的boot-args中有-igfxcdc。\n\n\n# 内核崩溃在 "cckprng_int_gen"\n\n完整的崩溃信息:\n\n"cckprng_int_gen: generator has already been sealed"\n\n\n这可能是以下两种情况之一:\n\n * 缺少SMC模拟器(即。没有VirtualSMC在你的 config.plist 或 EFI)\n   * 添加 VirtualSMC.kext 到你的 config.plist 和 EFI 中\n * SSDT-CPUR 的SSDT使用不正确\n\n对于后者，请确保您只使用B550和A520的ssdt - cpu。不要在X570或更老的硬件上使用(如B450或A320)\n\n\n# 在Big Sur中被卡在 Forcing CS_RUNTIME for entitlement\n\n\n\n这实际上是macOS将封闭系统容量的部分，这可能看起来是macOS卡住了。不要重启，并不是你卡住了，而是需要相当长的时间来完成。\n\n\n# 卡在 ramrod(^^^^^^^^^^^^^)\n\n\n\n如果您卡在ramrod部分(特别是，它启动，出现这个错误，并再次重新启动到这个错误，造成循环)，这暗示您的SMC模拟器是坏的。要解决这个问题，你有两个选择:\n\n * 确保你使用的是最新版本的VirtualSMC和Lilu，引导参数为vsmcgen=1\n * 切换到Rehabman的FakeSMC (你可以使用上面提到的MinKernel/MaxKernel技巧将 FakeSMC 限制为 Big Sur 及以上）\n\n当切换 kext 时，确保你的 config plist 中没有同时启用 FakeSMC 和 VirtualSMC ，因为这会导致冲突。\n\n\n# 虚拟机问题\n\n * 已知 VMWare 15 会卡在 [EB|#LOG:EXITBS:START]。 VMWare 16 解决了这个问题。\n\n\n# 重启在 "AppleUSBHostPort::createDevice: failed to create device" 在 macOS 11.3+ 上\n\n这是由于XhciPortLimit在macOS 11.3及更新版本中崩溃, 要解决此问题，您必须在 Kernel -> Quirks禁用XhciPortLimit。在这样做之前，请确保您已经正确地映射了USB端口。',normalizedContent:'# 内核空间问题\n\n从最初启动macos安装程序到弹出安装gui之前的问题。\n\n\n\n * 卡在 [eb|#log:exitbs:start]\n   * 启动器问题\n   * 内核补丁问题\n   * uefi 问题\n * 卡在 endrandomseed\n * 在opencore中选择macos分区后卡住\n * getting the error x64 exception type... 有关amd fx系统\n * 内核崩溃 invalid frame pointer\n * 启动预引导卷时卡在 [eb|ld:ofs] err(0xe)\n * 卡在 ocb: loadimage failed - security violation\n * 卡在 ocabc: memory pool allocation failure - not found\n * 卡在 buffer too small\n * 卡在 plist only kext has cfbundleexecutable key\n * 卡在 this version of mac os x is not supported: reason mac...\n * couldn\'t allocate runtime area 错误\n * 卡在 rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n * 卡在 acpi table loading on b550\n * "waiting for root device" 或 prohibited sign 错误\n   * usb 的问题\n   * sata 问题\n * x99 上的 iopcifamily 内核崩溃\n * 卡在或靠近 ioconsoleusers: gioscreenlock.../giolockstate (3...\n * 笔记本电脑上的乱码屏幕\n * 在navi上 ioconsoleusers: gioscreenlock...之后出现黑屏\n * 内核崩溃 cannot perform kext summary\n * 内核崩溃 appleintelmcereporter\n * 内核崩溃 appleintelcpupowermanagement\n * 10.13中的内核崩溃 appleacpiplatform\n * macos在登录前就冻结了\n * 键盘可以用，但触控板不行\n * kextd stall[0]: appleacpicpu\n * 内核崩溃在 appleinteli210ethernet\n * 用icelake的用户，内核崩溃在 "wrong cd clock frequency"\n * 内核崩溃在 "cckprngintgen"\n * 在big sur中被卡在 forcing cs_runtime for entitlement\n * 卡在 ramrod(^^^^^^^^^^^^^)\n * 虚拟机问题\n * 重启在 "appleusbhostport::createdevice: failed to create device" 在 macos 11.3+ 上\n\n\n\n\n# 卡在 [eb|#log:exitbs:start]\n\n本节将分为3部分，请仔细阅读。\n\n * 启动器问题\n * 内核补丁问题\n * uefi 问题\n * 虚拟机问题\n\n\n# 启动器问题\n\n在booter部分需要注意的主要问题有:\n\n * devirtualisemmio\n   \n   * 某些mmio空间仍然需要正常工作，所以你需要在 booter -> mmiowhitelist 中排除这些区域或完全禁用此选项。 更多信息在这里: using devirtualisemmio\n   * 对于trx40用户，启用此功能\n   * 对于x99的用户，禁用这种功能，因为它会被某些固件破坏\n\n * setupvirtualmap\n   \n   * 大多数固件都需要这个功能，如果没有这个功能，内核崩溃就很常见，所以如果还没有启用它的话就启用它\n     * 主要是z390和更老的版本需要启用这个功能\n     * 但是，某些固件(主要是2020年以上)不能使用这种特性，因此实际上可能会导致这种内核崩溃:\n       * 英特尔(intel)的ice lake系列\n       * 英特尔comet lake系列(b460, h470, z490等)\n       * 英特尔comet lake系列(b460, h470, z490等)\n         * 许多b450和x470板2020年底bios更新也包括在内\n       * amd的trx40\n       * qemu等虚拟机\n       * x299 2020+ bios更新(这适用于2019年底或2020+发布的最新bios上的其他x299板)\n\n * enablewriteunprotector\n   \n   * 另一个问题可能是macos与cr0寄存器的写保护冲突，为了解决这个问题，我们有两个选择:\n     * 如果您的固件支持mats(2018+固件):\n       * enablewriteunprotector -> false\n       * rebuildapplememorymap -> true\n       * syncruntimepermissions -> true\n     * 对于旧的固件:\n       * enablewriteunprotector -> true\n       * rebuildapplememorymap -> false\n       * syncruntimepermissions -> false\n     * 注意:一些笔记本电脑(例如：dell inspiron 5370)即使有mats支持也会在启动时停止，在这种情况下你有两个选择:\n       * 启动与旧固件功能组合(即：使用enablewriteunprotector 并禁用 rebuildapplememorymap + syncruntimepermissions)\n       * 启用 devirtualisemmio 并遵循mmiowhitelist指南\n\n关于对mats的支持，针对edk 2018构建的固件将支持这一点，许多oem甚至已经增加了对skylake笔记本电脑的支持。问题是它不是总是明显的，如果一个oem已经更新固件，你可以检查opencore日志是否支持它(查看这里如何获取日志):\n\nocabc: mat support is 1\n\n\n * 注意:1表示支持mats，而0表示不支持。\n\n\n# 内核补丁问题\n\n本节将分为英特尔和amd用户两部分:\n\n# amd 用户\n\n * 缺少内核补丁(only适用于amd cpu，确保它们是opencore补丁而不是clover。clover使用“matchos”，而opencore有 minkernel 和 maxkernel)\n   * 请注意，过时的内核补丁也会有同样的效果，请确保您使用的是amd os x的最新补丁\n\n# intel 用户\n\n * applexcpmcfglock 和 applecpupmcfglock\n   * 缺少cfg或xcpm补丁，请启用 applexcpmcfglock 和 applecpupmcfglock\n     * haswell和更新版本只需要applexcpmcfglock\n     * ivy bridge和更老的只需要applecpupmcfglock\n       * 如果运行10.10或更高版本，broadwell及更老版本需要applecpupmcfglock\n   * 或者你可以正确地禁用cfg-lock:修复cfg锁\n * applexcpmextramsrs\n   * 也可能需要，这通常指的是pentiums, hedt和其他macos原生不支持的特定系统。\n\n# intel 老用户\n\n对于macos big sur，许多固件在确定cpu核心数时都存在问题，因此会过早出现内核崩溃，无法进行啰嗦模式的错误显示。通过serial命令，你会看到如下提示:\n\nmax_cpus_from_firmware not yet initialized\n\n\n解决:\n\n * 在booter -> quirks下启用 avoidruntimedefrag\n   * 这应该适用于大多数固件\n\n然而，在某些机器上，如hp compaq dc 7900，固件仍然会出现问题，因此我们需要强制设置cpu核心数。只有在avoidruntimedefrag不起作用时，才使用下面的补丁:\n\n旧cpu核心补丁\n\n为此，添加以下补丁(用硬件支持的cpu线程数量替换b8 04 00 00 c3中的04):\n\nkey           type      value\nbase          string    _acpi_count_enabled_logical_processors\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    kernel\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b804000000c3\nreplacemask   data      \nskip          integer   0\n\n\n# uefi 问题\n\n * provideconsolegop\n   * 需要过渡到下一个屏幕，这最初是aptiomemoryfix的一部分，但现在在opencore中以这个功能提供。可以在uefi -> output下找到\n   * 注意，从0.5.6开始，sample.plist默认启用了这个功能\n * ignoreinvalidflexratio\n   * 这是broadwell和更老的所需要的。amd和skylake或更新版本不支持\n\n\n# 卡在 endrandomseed\n\n与上面相同的问题，请参阅此处了解更多详细信息: 卡在 [eb|#log:exitbs:start]\n\n\n# 在opencore中选择macos分区后卡住\n\n与上面相同的问题，请参阅此处了解更多详细信息: 卡在 [eb|#log:exitbs:start]\n\n * 注意:启用debug opencore 也可以帮助揭示一些信息\n\n\n# getting the error x64 exception type... 有关amd fx系统\n\n此错误可能有多种原因:\n\n * 此错误可能有多种原因:\n   \n   也可以称为遗留引导支持，加载遗留选项rom /oproms\n\n * providecurrentcpuinfo功能(统一补丁所需)与您的固件不兼容:\n   \n   这意味着您需要使用旧版本的补丁 和big sur或更早的版本。下载上面链接的旧补丁后，将它们合并到config.plist 中(确保先删除旧补丁)。\n\n一个例子:\n\n\n\n\n# 内核崩溃 invalid frame pointer\n\n这是由于您设置的booter -> quirks的一些问题，主要检查:\n\n * devirtualisemmio\n   \n   * 某些mmio空间仍然需要正确运行，因此您需要在booter -> mmiowhitelist中排除这些区域或完全禁用此功能\n   * 更多信息:使用 devirtualisemmio\n\n * setupvirtualmap\n   \n   * 大多数固件都需要这个功能，如果没有这个功能，内核崩溃就很常见，所以如果还没有启用它的话就启用它\n     * 但是，某些固件无法处理这种情况，因此实际上可能会导致这种内核错误:\n       * 英特尔(intel)的ice lake系列\n       * 英特尔的comet lake系列\n       * amd 的 b550\n       * amd 的 a520\n       * amd 的 trx40\n       * qemu等虚拟机\n\n另一个问题可能是macos与cr0寄存器的写保护冲突，要解决这个问题，我们有两个选项:\n\n * 如果您的固件支持mats(2018+固件):\n   * enablewriteunprotector -> false\n   * rebuildapplememorymap -> true\n   * syncruntimepermissions -> true\n * 对于旧的固件:\n   * enablewriteunprotector -> true\n   * rebuildapplememorymap -> false\n   * syncruntimepermissions -> false\n\n关于对mats的支持，针对edk 2018构建的固件将支持这一点，许多oem甚至已经增加了对skylake笔记本电脑的支持。问题是它不是总是明显的，如果一个oem已经更新了固件，你可以检查opencore日志查看你的是否支持:\n\nocabc: mat support is 1\n\n\n注意:“1”表示支持mats，而“0”表示不支持。\n\n\n# 启动预引导卷时卡在 [eb|ld:ofs] err(0xe)\n\n完整的错误:\n\n[eb|`ld:ofs] err(0xe) @ open (system\\\\library\\\\prelinkedkernels\\\\prelinkedkernel)\n\n\n当预引导卷没有正确更新时可能会发生这种情况，要修复这个问题，您需要启动到recovery并修复它:\n\n 1. 在uefi -> apfs下启用jumpstarthotplug(没有这个选项，macos big sur恢复可能无法启动)\n 2. 启动进入恢复\n 3. 打开终端并运行以下命令:\n\n# 首先，找到preboot卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到preboot卷是disk5s2\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# 现在挂载preboot卷\ndiskutil mount disk5s2\n\n# 接下来在preboot卷上运行update preboot\ndiskutil apfs updatepreboot /volume/disk5s2\n\n\n最后重启\n\n\n# 卡在 ocb: loadimage failed - security violation\n\nocsb: no suitable signature - security violation\nocb: apple secure boot prohibits this boot entry, enforcing!\nocb: loadimage failed - security violation\n\n\n这是由于缺少预先引导卷上的过期苹果安全引导清单导致加载失败，如果您设置了securebootmodel，则这些文件丢失的原因实际上是macos中的一个bug。\n\n要解决这个问题，你可以采取以下方法之一:\n\n * 禁用 securebootmodel\n   * 设置 misc -> security -> securebootmodel -> disabled\n * 重新安装最新版本的macos\n * 或将安全启动清单从/usr/standalone/i386复制到/volumes/preboot/<uuid>/system/library/coreservices\n   * 注意，你很可能需要通过终端这样做，因为预引导卷不容易通过finder编辑\n\n要通过终端来做到这一点:\n\n# 首先，找到preboot卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到preboot卷是disk5s2\n/dev/disk5 (synthesized):\n   #:                       类型名称                    大小       标识符\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# 现在挂载preboot卷\ndiskutil mount disk5s2\n\n# cd到预引导卷中\n# 注意实际的卷在/system/volumes/preboot下面\ncd /system/volumes/preboot\n\n# 获取uuid\nls\n 46923f6e-968e-46e9-ac6d-9e6141df52fd\n cd844c38-1a25-48d5-9388-5d62aa46cfb8\n\n# 如果显示了多个版本(即双启动多个版本的macos)，则会显示\n# 需要确定哪个uuid是正确的。\n# 确定最简单的方法是打印.disk_label.contentdetails的值\n# 每个卷的\ncat ./46923f6e-968e-46e9-ac6d-9e6141df52fd/system/library/coreservices/.disk_label.contentdetails\n big sur hd%\n\ncat ./cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices/.disk_label.contentdetails\n catalina hd%\n\n# 接下来复制安全引导文件\n# 用uuid值替换cd844c38-1a25-48d5-9388-5d62aa46cfb8\ncd ~\nsudo cp -a /usr/standalone/i386/. /system/volumes/preboot/cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices\n\n\n\n# 卡在 ocabc: memory pool allocation failure - not found\n\n这是由于不正确的bios设置:\n\n * 4g以上解码是启用的（above4gdecoding）\n * csm被禁用(在某些板上启用windows8.1/10 whql模式可以执行相同的操作)\n   * 注意，在某些笔记本电脑上，必须启用csm\n * bios是最新的(众所周知，z390和hedt的固件编写得很糟糕)\n\n\n# 卡在 buffer too small\n\n * 在bios中启用4g以上解码（above4gdecoding）\n\n\n# 卡在 plist only kext has cfbundleexecutable key\n\n配置列表中缺少或不正确的可执行路径，应该通过重新运行propertree的快照工具(cmd/ctrl+r)来解决。\n\n\n# 卡在 this version of mac os x is not supported: reason mac...\n\n当该版本的macos不再支持smbios时发生此错误，请确保在platforminfo->generic中设置了automatic。有关支持的smbios及其操作系统的完整列表，请参见这里:选择正确的smbios\n\nmacos 10.15、catalina支持的smbios\n * imac13,x+\n * imacpro1,1\n * macpro6,1+\n * macmini6,x+\n * macbook8,1+\n * macbookair5,x+\n * macbookpro9,x+\n\nmacos 11, big sur支持的smbios\n * imac14,4+\n * imacpro1,1\n * macpro6,1+\n * macmini7,1+\n * macbook8,1+\n * macbookair6,x+\n * macbookpro11,x+\n\nmacos 12, monterey支持的smbios\n * imac16,1+\n * imacpro1,1\n * macpro6,1+\n * macmini7,1+\n * macbook9,1+\n * macbookair7,1+\n * macbookpro11,3+\n\nmacos 13、ventura支持的smbios\n * imac18,x+\n * imacpro1,1\n * macpro7,1\n * macmini8,1\n * macbook10,1\n * macbookair8,1+\n * macbookpro14,x+\n\n\n# couldn\'t allocate runtime area 错误\n\n参见修正kaslr滑块值\n\n\n# 卡在 rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n\n这个区域是许多pci设备第一次设置和配置的地方，也是大多数启动问题发生的地方。其他名称包括:\n\n * apfs_module_start...,\n * waiting for root device,\n * waiting on...ioresources...,\n * previous shutdown cause...\n\n主要检查的地方:\n\n * 缺少 ec 补丁:\n   \n   * 确保在你的 efi/oc/acpi 和 acpi->add 中都有 ec ssdt， 再次检查它是否启用\n   * 如果你还没有acpi，请点击这里: 开始使用acpi\n\n * irq 冲突:\n   \n   * 最常见的是在旧的笔记本电脑和预构建，运行ssdttime的fixhpet选项，并将产生的ssdt-hpet.aml和acpi补丁添加到配置中(没有acpi补丁，ssdt将无法工作)\n\n * pci 分配问题:\n   \n   * 更新你的bios, 确保它是最新的。大多数oem在旧的固件上的pci分配非常不稳定，特别是amd\n   * 确保在bios中启用above4g，如果没有可用选项，则添加npci=0x2000或npci=0x3000(一次尝试一个)引导参数。\n     * 一些x99和x299板(如ga-x299-ud4)可能需要npci引导参数和above4g启用\n     * amd cpu注意:在引导参数中不要同时启用above4g设置和npci设置，它们会冲突\n     * 2020+ bios注意:当启用above4g时，resizable bar支持可能成为可用的。如果启用，请确保booter -> quirks -> resizeapplegpubars设置为0。\n   * 其他重要的bios设置:禁用csm，启用windows 8.1/10 uefi模式\n\n * nvme 或 sata 问题:\n   \n   * 有时，如果使用了坏的sata控制器或不支持的nvme驱动器，你通常会被卡在这里。你可以检查的内容:\n     * 不使用三星pm981或micron 2200s nvme ssd\n     * 三星970 evo plus运行最新的固件(旧的固件以不稳定和停滞著称，查看更多信息)\n     * sata热插拔在bios中被禁用(在基于amd cpu的系统上通常会导致问题)\n     * 确保nvme驱动器在bios中设置为nvme模式(一些bios有一个bug，你可以将nvme驱动器设置为sata)\n\n * nvram 故障:\n   \n   * hedt和300系列主板常见问题，你有几个路径可以走:\n     * 消费者英特尔300系列:看开始使用 acpi制作ssdt-pmc.aml\n     * hedt(ie x99):请参阅模拟nvram关于如何停止nvram写入，注意，安装时您不需要运行脚本。只需设置config.plist\n\n * rtc 缺失:\n   \n   * 通常在intel的300+系列(即z370, z490)上发现，这是由默认禁用rtc时钟引起的。请参阅开始使用acpi创建ssdt-awac.aml\n   * x99和x299的rtc设备坏了，所以需要用ssdt-rtc0-range修复。请参阅开始使用acpi创建上述文件\n   * 惠普的一些固件编写人员也禁用了hp 250g6上的rtc，但实际上没有办法重新启用它\n     * 已知受影响型号:hp 15-da0014dx， hp 250 g6\n     * 对于被这样的硬件所困扰的用户，你需要创建一个假的rtc时钟供macos使用。有关更多细节，请参阅开始使用acpi，以及下面的图像示例:\n\n一个被禁用且无法启用的rtc是什么样子的示例(注意，没有像stas那样的值来重新启用它):\n\n\n\n\n# 卡在 acpi table loading on b550\n\n\n\n如果你在用amd b550或a520主板加载acpi表时遇到问题，请添加以下ssdt:\n\n * ssdt-cpur.aml\n\n请记住将此ssdt添加到efi/oc/acpi 和 acpi下的config plist -> add (propertree的快照函数可以为您完成此工作)\n\n\n# "waiting for root device" 或 prohibited sign 错误\n\n * 其他名称: stop sign, scrambled\n\n这通常被认为是usb或sata的错误，有几种方法可以修复:\n\n\n# usb 的问题\n\n这假设你只是引导安装程序usb，而不是macos本身。\n\n * 如果你达到了15个端口的限制，你需要做一个usb地图\n\n * 另一个问题可能是，某些固件不会将usb所有权传递给macos\n   \n   * uefi -> quirks -> releaseusbownership -> true\n   * 在bios中启用ehci/xhci切换也可以修复这个问题\n\n * 有时，如果usb插入3.x端口，将其插入2.0端口可以修复此错误，反之亦然。\n\n * 对于amd的15h和16h cpu，您可能需要添加以下内容:\n   \n   * xlncusbfix.kext\n\n * 如果xlncusbfix仍然不起作用，那么在xlncusbfix旁边尝试以下操作:\n   \n   * amd stopsign-fixv5\n\n * x299用户:启用above4g解码\n   \n   * x299上的奇怪固件bug，否则usb会损坏\n\n * acpi中缺少usb端口:\n   \n   * 对于英特尔的coffee lake及更老版本，我们推荐使用usbinjectall\n   * 对于英特尔的 ice lake 和 comet lake, 我们推荐 ssdt-rhub\n     * ssdttime的 7. usb reset usb复位的选项可以做同样的事情\n   * 对于amd,运行ssdttime的 7. usb reset 选项，并将提供的ssdt-rhub添加到您的efi和config.plist\n\n\n# sata 问题\n\n在极少数情况下(主要是笔记本电脑)，sata控制器不受macos的正式支持。为了解决这个问题，我们需要做以下几件事:\n\n * 在bios中设置“sata”为“ahci”模式\n   * macos不支持硬件raid或ide模式。\n   * 注意已经使用英特尔快速存储技术(rst, windows和linux软raid)的驱动器将无法在macos中访问。\n * sata-unsupported.kext\n   * 增加对模糊sata控制器的支持，通常是笔记本电脑。\n   * 对于非常传统的sata控制器， ahciportinjector.kext 可能更合适。\n * catalina的补丁 appleahciport.kext\n   * 对于运行macos 11、big sur和有问题的用户。这向后移植了已知的工作的catalina kext，这个kext不需要sata-unsupported\n\n注意，只有在将macos安装到驱动器后，你才会遇到这个问题，启动macos安装程序不会因为sata问题而出错。\n\n\n# x99 上的 iopcifamily 内核崩溃\n\n对于那些从英特尔运行x99平台的人，请阅读以下内容:\n\n * 启用以下内核补丁:\n   * applecpupmcfglock\n   * applexcpmcfglock\n   * applexcpmextramsrs\n * 你有以下ssd:\n   * ssdt-unc(如果没有，请参阅开始使用acpi 创建上述文件)\n\n\n# 卡在或靠近 ioconsoleusers: gioscreenlock.../giolockstate (3...\n\n这是在gpu正确初始化之前，验证以下内容:\n\n * gpu支持uefi (gtx 7xx/2013+)\n * bios中csm是关闭的\n   * 可能需要在笔记本电脑上启用\n * 强制使用pcie 3.0链路速度\n * 如果运行igpu，请仔细检查ig-platform-id和device-id是否有效。\n   * 桌面uhd 630可能需要使用“00009b3e”代替\n * 尝试各种whatevergreen修复\n   * -igfxmlr 引导参数。这也可以表现为 "divide by zero" 错误。\n * 在10.15.4及更新版本中，coffee lake igpu用户可能还需要igfxonln=1\n\n\n# 笔记本电脑上的乱码屏幕\n\n在uefi设置中启用csm。这可能显示为 "boot legacy roms" 或其他 legacy 设置。\n\n\n# 在navi上 ioconsoleusers: gioscreenlock...之后出现黑屏\n\n * 在引导参数中添加 agdpmod=pikera\n * 切换不同的显示输出\n * 尝试运行macpro7,1 smbios引导参数 agdpmod=ignore\n\n对于msi navi用户，您需要应用这里提到的补丁:安装程序不能与5700xt# 901工作\n\n具体来说，在kernel -> patch下添加以下条目:\n\nmsi navi 补丁\n\nbase:\ncomment: navi vbios bug patch\ncount: 1\nenabled: yes\nfind: 4154592c526f6d2300\nidentifier: com.apple.kext.amdradeonx6000framebuffer\nlimit: 0\nmask:\nminkernel: 19.00.00\nmaxkernel: 19.99.99\nreplace: 414d442c526f6d2300\nreplacemask:\nskip: 0\n\n\n注意:macos 11，大苏尔不再需要这个补丁的msi navi。\n\n\n# 内核崩溃 cannot perform kext summary\n\n通常被认为是围绕着预链接内核的问题，特别是macos很难解释我们注入的内核。验证:\n\n * 你的kext顺序是正确的(master然后插件，lilu总是在插件之前)\n * 带有可执行文件的kext有它们，而plist只有kext没有(即usbmap.kext, xhci-unspported.kext等不包含可执行文件)\n * 不要在config.plist中包含多个相同的kext。包括来自多个kext的voodooinput的多个副本，我们建议选择配置数组中的第一个kext，并禁用其他kext)\n\n注意:此错误可能看起来也非常类似于 内核崩溃在 invalid frame pointer\n\n\n# 内核崩溃 appleintelmcereporter\n\n在macos catalina中，双插槽支持被破坏了，关于amd固件的一个有趣的事实是，一些主板实际上会报告多个插槽的cpu。为了解决这个问题，在efi/oc/ kext和config中添加 applemcereporterdisabler 到efi/oc/kext 和 config plist -> kernel -> add\n\n\n# 内核崩溃 appleintelcpupowermanagement\n\n这可能是由于 nullcpupowermanagement 错误或完全缺失。要解决这个问题，请从kernel->add和efi/oc/kext中移除nullcpupowermanagement，然后在kernel->emulate中启用dummypowermanagement。\n\n * 注:在旧的英特尔cpu(即。penryn或更老的版本)，可能是由于irq冲突或hpet设备被禁用。要解决这个问题，你有两个选择:\n   * ssdttime的修复hpet选项\n   * 强制启用hpet设备\n\n强制启用hpet设备\n\n在 acpi -> patch:\n\ncomment   string    force hpet online\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      a010934f53464c00\nreplace   data      a40a0fa3a3a3a3a3\n\n\n# 10.13中的内核崩溃 appleacpiplatform\n\n\n\n在macos 10.13上，high sierra操作系统对acpi表更加严格，特别是关于头文件如何处理的bug. 要解决这个问题，请在config.plist的acpi -> quirks下启用 normalizeheaders\n\n\n# macos在登录前就冻结了\n\n这是一个常见的tsc错误的例子，对于大多数系统添加cputscsync\n\n查看tsc问题的最常见方法:\n\n案例 1   案例 2\n       \n\n\n# 键盘可以用，但触控板不行\n\n确保voodooinput在config.plist的voodooops2和voodooi2c kext之前列出。\n\nvoodooi2c 故障处理\n\n检查你的kext加载的顺序-使它们与收集文件下显示的内容相匹配::\n\n 1. voodoogpio、voodooinput和voodooi2cservices，顺序不限(可以在voodooi2c.kext/contents/plugins目录下找到)\n 2. voodooi2c\n 3. satellite/plugin kext\n\n确保在efi/oc/acpi中有ssdt-gpio，并且在acpi ->的config.plist中添加ssdt-gpio。如果仍然有问题，请参考acpi gpio入门页面.\n\n\n# kextd stall[0]: appleacpicpu\n\n这是由于缺少smc模拟器或损坏的模拟器造成的，请确保以下内容:\n\n * lilu和virtualsmc都在efi/oc/kext和config.plist中\n * lilu在kext列表中位于virtualsmc之前\n * 最后的方法是尝试fakesmc, 不要同时启用 virtualsmc 和 fakesmc\n\n\n# 内核崩溃在 appleinteli210ethernet\n\n对于那些运行带有i225-v网卡的comet lake主板，由于i210 kext，您可能会在启动时遇到内核panic。要解决这个问题，请确保您的以太网有正确的pciroot。这通常是:\n\n * pciroot(0x0)/pci(0x1c,0x1)/pci(0x0, 0x0)\n   * 默认情况下，这是华硕和gigabyte主板使用的\n * pciroot(0x0)/pci(0x1c,0x4)/pci(0x0,0x0)\n   * 一些oem厂商可能会使用这个代替\n\n对于那些可以手动连接到你的pciroot的人，你需要完全安装macos并使用gfxutil:\n\n/path/to/gfxutil | grep -i "8086:15f3"\n\n\n这应该会输出如下内容:\n\n00:1f.6 8086:15f3 /pc00@0/gbe1@1f,6 = pciroot(0x0)/pci(0x1f,0x6)\n\n\n最后的pciroot(0x0)/pci(0x1f,0x6)是你要添加到配置plist中的device-id为f2150000的内容。\n\n\n# 用icelake的用户，内核崩溃在 "wrong cd clock frequency"\n\n\n\nto 要解决这个内核问题，请确保你的boot-args中有-igfxcdc。\n\n\n# 内核崩溃在 "cckprng_int_gen"\n\n完整的崩溃信息:\n\n"cckprng_int_gen: generator has already been sealed"\n\n\n这可能是以下两种情况之一:\n\n * 缺少smc模拟器(即。没有virtualsmc在你的 config.plist 或 efi)\n   * 添加 virtualsmc.kext 到你的 config.plist 和 efi 中\n * ssdt-cpur 的ssdt使用不正确\n\n对于后者，请确保您只使用b550和a520的ssdt - cpu。不要在x570或更老的硬件上使用(如b450或a320)\n\n\n# 在big sur中被卡在 forcing cs_runtime for entitlement\n\n\n\n这实际上是macos将封闭系统容量的部分，这可能看起来是macos卡住了。不要重启，并不是你卡住了，而是需要相当长的时间来完成。\n\n\n# 卡在 ramrod(^^^^^^^^^^^^^)\n\n\n\n如果您卡在ramrod部分(特别是，它启动，出现这个错误，并再次重新启动到这个错误，造成循环)，这暗示您的smc模拟器是坏的。要解决这个问题，你有两个选择:\n\n * 确保你使用的是最新版本的virtualsmc和lilu，引导参数为vsmcgen=1\n * 切换到rehabman的fakesmc (你可以使用上面提到的minkernel/maxkernel技巧将 fakesmc 限制为 big sur 及以上）\n\n当切换 kext 时，确保你的 config plist 中没有同时启用 fakesmc 和 virtualsmc ，因为这会导致冲突。\n\n\n# 虚拟机问题\n\n * 已知 vmware 15 会卡在 [eb|#log:exitbs:start]。 vmware 16 解决了这个问题。\n\n\n# 重启在 "appleusbhostport::createdevice: failed to create device" 在 macos 11.3+ 上\n\n这是由于xhciportlimit在macos 11.3及更新版本中崩溃, 要解决此问题，您必须在 kernel -> quirks禁用xhciportlimit。在这样做之前，请确保您已经正确地映射了usb端口。',charsets:{cjk:!0}},{title:"杂项问题",frontmatter:{},regularPath:"/troubleshooting/extended/misc-issues.html",relativePath:"troubleshooting/extended/misc-issues.md",key:"v-526d6785",path:"/troubleshooting/extended/misc-issues.html",headers:[{level:2,title:"无法运行acpidump.efi",slug:"无法运行acpidump-efi",normalizedTitle:"无法运行acpidump.efi",charIndex:37},{level:2,title:"修复SSDTTime: 无法定位或下载iasl",slug:"修复ssdttime-无法定位或下载iasl",normalizedTitle:"修复ssdttime: 无法定位或下载iasl",charIndex:57},{level:2,title:"修复Python: Python未安装或在路径中未找到",slug:"修复python-python未安装或在路径中未找到",normalizedTitle:"修复python: python未安装或在路径中未找到",charIndex:84},{level:2,title:"Windows启动盘看不到APFS驱动器",slug:"windows启动盘看不到apfs驱动器",normalizedTitle:"windows启动盘看不到apfs驱动器",charIndex:115},{level:2,title:"OpenCore分辨率不正确",slug:"opencore分辨率不正确",normalizedTitle:"opencore分辨率不正确",charIndex:139},{level:2,title:"在选择器中找不到Windows/BootCamp驱动器",slug:"在选择器中找不到windows-bootcamp驱动器",normalizedTitle:"在选择器中找不到windows/bootcamp驱动器",charIndex:157},{level:2,title:"没有正确地选择启动磁盘",slug:"没有正确地选择启动磁盘",normalizedTitle:"没有正确地选择启动磁盘",charIndex:188},{level:2,title:"启动Windows会导致蓝屏或Linux崩溃",slug:"启动windows会导致蓝屏或linux崩溃",normalizedTitle:"启动windows会导致蓝屏或linux崩溃",charIndex:203},{level:2,title:"启动Windows错误: OCB: StartImage failed - Already started",slug:"启动windows错误-ocb-startimage-failed-already-started",normalizedTitle:"启动windows错误: ocb: startimage failed - already started",charIndex:229},{level:2,title:"iASL警告，只有X未解决",slug:"iasl警告-只有x未解决",normalizedTitle:"iasl警告，只有x未解决",charIndex:286},{level:2,title:"macOS和Windows之间的时间不一致",slug:"macos和windows之间的时间不一致",normalizedTitle:"macos和windows之间的时间不一致",charIndex:303}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"无法运行acpidump.efi 修复SSDTTime: 无法定位或下载iasl 修复Python: Python未安装或在路径中未找到 Windows启动盘看不到APFS驱动器 OpenCore分辨率不正确 在选择器中找不到Windows/BootCamp驱动器 没有正确地选择启动磁盘 启动Windows会导致蓝屏或Linux崩溃 启动Windows错误: OCB: StartImage failed - Already started iASL警告，只有X未解决 macOS和Windows之间的时间不一致",content:"# 杂项问题\n\n与macOS本身无关的杂项问题，例如多引导。\n\n\n\n * 无法运行acpidump.efi\n * 修复SSDTTime: 无法定位或下载iasl\n * 修复Python: Python未安装或在路径中未找到\n * Windows启动盘看不到APFS驱动器\n * OpenCore分辨率不正确\n * 在选择器中找不到Windows/BootCamp驱动器\n * 没有正确地选择启动磁盘\n * 启动Windows会导致蓝屏或Linux崩溃\n * 启动Windows错误: OCB: StartImage failed - Already started\n * iASL警告，只有X未解决\n * macOS和Windows之间的时间不一致\n\n\n\n\n# 无法运行acpidump.efi\n\n调用OpenCore shell:\n\nshell> fs0: //替换正确的驱动器\n\nfs0:\\> dir //验证这是正确的目录\n\n  Directory of fs0:\\\n\n   01/01/01 3:30p  EFI\nfs0:\\> cd EFI\\OC\\Tools //注意它带有正向斜杠\n\nfs0:\\EFI\\OC\\Tools> acpidump.efi -b -n DSDT -z\n\n\n\n# 修复SSDTTime: 无法定位或下载iasl\n\n这通常是由于过时的Python版本，请尝试更新Python或将iasl添加到SSDTTime的scripts文件夹:\n\n * iasl macOS 版本\n * iasl Windows 版本\n * iasl Linux 版本\n\n\n# 修复Python: Python未安装或在路径中未找到\n\n简单修复，下载并安装最新的python:\n\n * macOS 链接\n * Windows 链接\n * Linux 链接\n\n确保 将Python添加到PATH\n\n\n\n\n# Windows启动盘看不到APFS驱动器\n\n * 过时的BootCamp驱动程序(通常6.0版本将附带brigadier, macOS中的BootCamp Utility提供较新的版本，如6.1版本)。 CorpNewt 的分支 brigadier 修复了这个问题: CorpNewt 的 brigadier分支\n\n\n# OpenCore分辨率不正确\n\n * 按照修复分辨率和详细的正确设置，设置 UIScale 为 2 的HiDPI\n * 用户还注意到，将ConsoleMode设置为Max有时会失败，让它为空可能会有所帮助\n\n\n# 在选择器中找不到Windows/BootCamp驱动器\n\n因此，有了OpenCore，我们必须注意，不支持传统的Windows安装，只支持UEFI。现在大多数安装都是基于UEFI的，但是BootCamp Assistant制作的是基于传统的，所以你必须找到其他方法来制作安装程序(谷歌是你的朋友)。这也意味着MasterBootRecord/Hybrid分区也被破坏了，所以你需要格式化你想安装到DiskUtility的驱动器。有关最佳实践，请参阅多引导指南 on best practices\n\n现在开始进行故障排除:\n\n * 确保将Misc -> Security -> ScanPolicy设置为0以显示所有驱动器\n * 当Windows引导装载程序位于同一驱动器上时，启用Misc -> Boot -> Hideself\n\n\n# 没有正确地选择启动磁盘\n\n如果您在启动磁盘正确应用新启动项时遇到问题，这很可能是由于I/O注册表中缺少DevicePathsSupported造成的。要解决这个问题，请确保您使用的是PlatformInfo -> Automatic -> True\n\n缺少DevicePathsSupported的例子:\n\n * 由于PciRoot不同导致默认DevicePath匹配失败#664\n\n\n# 启动Windows会导致蓝屏或Linux崩溃\n\n这是由于对齐问题，请确保在支持MATs的固件上启用了SyncRuntimePermissions。检查你的日志，你的固件是否支持内存属性表(通常在2018年或更新的固件上看到)\n\n常见的Windows错误代码:\n\n * 0xc000000d\n\n\n# 启动Windows错误: OCB: StartImage failed - Already started\n\n这是由于OpenCore在尝试引导Windows时感到困惑，并意外地认为它正在引导OpenCore。这可以通过移动Windows到它自己的驱动器或在BlessOverride下添加一个自定义驱动器路径来避免。更多细节请参阅Configuration.pdf\n\n\n# iASL警告，只有X未解决\n\n如果你尝试反编译你的DSDT并得到一个类似这样的错误:\n\niASL Warning: There were 19 external control methods found during disassembly, but only 0 were resolved (19 unresolved)\n\n\n当一个ACPI表需要其他表来进行适当的引用时，就会发生这种情况，它不接受dsdt的创建，因为我们只使用它来创建选定的几个ssdt。对于那些担心的人，你可以运行以下命令:\n\niasl * [insert all ACPI files here]\n\n\n\n# macOS和Windows之间的时间不一致\n\n这是因为macOS使用通用时间，而Windows依赖于格林威治时间，所以你需要强制一个操作系统使用不同的时间测量方式。我们强烈建议修改Windows，因为它的破坏性和痛苦要小得多:\n\n * 安装Bootcamp实用程序\n * 修改Windows注册表",normalizedContent:"# 杂项问题\n\n与macos本身无关的杂项问题，例如多引导。\n\n\n\n * 无法运行acpidump.efi\n * 修复ssdttime: 无法定位或下载iasl\n * 修复python: python未安装或在路径中未找到\n * windows启动盘看不到apfs驱动器\n * opencore分辨率不正确\n * 在选择器中找不到windows/bootcamp驱动器\n * 没有正确地选择启动磁盘\n * 启动windows会导致蓝屏或linux崩溃\n * 启动windows错误: ocb: startimage failed - already started\n * iasl警告，只有x未解决\n * macos和windows之间的时间不一致\n\n\n\n\n# 无法运行acpidump.efi\n\n调用opencore shell:\n\nshell> fs0: //替换正确的驱动器\n\nfs0:\\> dir //验证这是正确的目录\n\n  directory of fs0:\\\n\n   01/01/01 3:30p  efi\nfs0:\\> cd efi\\oc\\tools //注意它带有正向斜杠\n\nfs0:\\efi\\oc\\tools> acpidump.efi -b -n dsdt -z\n\n\n\n# 修复ssdttime: 无法定位或下载iasl\n\n这通常是由于过时的python版本，请尝试更新python或将iasl添加到ssdttime的scripts文件夹:\n\n * iasl macos 版本\n * iasl windows 版本\n * iasl linux 版本\n\n\n# 修复python: python未安装或在路径中未找到\n\n简单修复，下载并安装最新的python:\n\n * macos 链接\n * windows 链接\n * linux 链接\n\n确保 将python添加到path\n\n\n\n\n# windows启动盘看不到apfs驱动器\n\n * 过时的bootcamp驱动程序(通常6.0版本将附带brigadier, macos中的bootcamp utility提供较新的版本，如6.1版本)。 corpnewt 的分支 brigadier 修复了这个问题: corpnewt 的 brigadier分支\n\n\n# opencore分辨率不正确\n\n * 按照修复分辨率和详细的正确设置，设置 uiscale 为 2 的hidpi\n * 用户还注意到，将consolemode设置为max有时会失败，让它为空可能会有所帮助\n\n\n# 在选择器中找不到windows/bootcamp驱动器\n\n因此，有了opencore，我们必须注意，不支持传统的windows安装，只支持uefi。现在大多数安装都是基于uefi的，但是bootcamp assistant制作的是基于传统的，所以你必须找到其他方法来制作安装程序(谷歌是你的朋友)。这也意味着masterbootrecord/hybrid分区也被破坏了，所以你需要格式化你想安装到diskutility的驱动器。有关最佳实践，请参阅多引导指南 on best practices\n\n现在开始进行故障排除:\n\n * 确保将misc -> security -> scanpolicy设置为0以显示所有驱动器\n * 当windows引导装载程序位于同一驱动器上时，启用misc -> boot -> hideself\n\n\n# 没有正确地选择启动磁盘\n\n如果您在启动磁盘正确应用新启动项时遇到问题，这很可能是由于i/o注册表中缺少devicepathssupported造成的。要解决这个问题，请确保您使用的是platforminfo -> automatic -> true\n\n缺少devicepathssupported的例子:\n\n * 由于pciroot不同导致默认devicepath匹配失败#664\n\n\n# 启动windows会导致蓝屏或linux崩溃\n\n这是由于对齐问题，请确保在支持mats的固件上启用了syncruntimepermissions。检查你的日志，你的固件是否支持内存属性表(通常在2018年或更新的固件上看到)\n\n常见的windows错误代码:\n\n * 0xc000000d\n\n\n# 启动windows错误: ocb: startimage failed - already started\n\n这是由于opencore在尝试引导windows时感到困惑，并意外地认为它正在引导opencore。这可以通过移动windows到它自己的驱动器或在blessoverride下添加一个自定义驱动器路径来避免。更多细节请参阅configuration.pdf\n\n\n# iasl警告，只有x未解决\n\n如果你尝试反编译你的dsdt并得到一个类似这样的错误:\n\niasl warning: there were 19 external control methods found during disassembly, but only 0 were resolved (19 unresolved)\n\n\n当一个acpi表需要其他表来进行适当的引用时，就会发生这种情况，它不接受dsdt的创建，因为我们只使用它来创建选定的几个ssdt。对于那些担心的人，你可以运行以下命令:\n\niasl * [insert all acpi files here]\n\n\n\n# macos和windows之间的时间不一致\n\n这是因为macos使用通用时间，而windows依赖于格林威治时间，所以你需要强制一个操作系统使用不同的时间测量方式。我们强烈建议修改windows，因为它的破坏性和痛苦要小得多:\n\n * 安装bootcamp实用程序\n * 修改windows注册表",charsets:{cjk:!0}},{title:"OpenCore启动问题",frontmatter:{},regularPath:"/troubleshooting/extended/opencore-issues.html",relativePath:"troubleshooting/extended/opencore-issues.md",key:"v-381957ff",path:"/troubleshooting/extended/opencore-issues.html",headers:[{level:2,title:"在出现选择菜单之前卡在黑屏上",slug:"在出现选择菜单之前卡在黑屏上",normalizedTitle:"在出现选择菜单之前卡在黑屏上",charIndex:50},{level:2,title:"卡在 no vault provided!",slug:"卡在-no-vault-provided",normalizedTitle:"卡在 no vault provided!",charIndex:68},{level:2,title:"卡在 OC: Invalid Vault mode",slug:"卡在-oc-invalid-vault-mode",normalizedTitle:"卡在 oc: invalid vault mode",charIndex:93},{level:2,title:"无法看到macOS分区",slug:"无法看到macos分区",normalizedTitle:"无法看到macos分区",charIndex:122},{level:2,title:"卡在 OCB: OcScanForBootEntries failure - Not Found",slug:"卡在-ocb-ocscanforbootentries-failure-not-found",normalizedTitle:"卡在 ocb: ocscanforbootentries failure - not found",charIndex:137},{level:2,title:"卡在 OCB: failed to match a default boot option",slug:"卡在-ocb-failed-to-match-a-default-boot-option",normalizedTitle:"卡在 ocb: failed to match a default boot option",charIndex:189},{level:2,title:"卡在 OCB: System has no boot entries",slug:"卡在-ocb-system-has-no-boot-entries",normalizedTitle:"卡在 ocb: system has no boot entries",charIndex:238},{level:2,title:"卡在 OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...",slug:"卡在-ocs-no-schema-for-dsdt-kernelandkextpatch-rtvariable-smbios-systemparameters",normalizedTitle:"卡在 ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...",charIndex:276},{level:2,title:"卡在 OC: Driver XXX.efi at 0 cannot be found",slug:"卡在-oc-driver-xxx-efi-at-0-cannot-be-found",normalizedTitle:"卡在 oc: driver xxx.efi at 0 cannot be found",charIndex:367},{level:2,title:'收到 "Failed to parse real field of type 1"',slug:"收到-failed-to-parse-real-field-of-type-1",normalizedTitle:"收到 &quot;failed to parse real field of type 1&quot;",charIndex:null},{level:2,title:"无法在选择菜单中选择任何内容",slug:"无法在选择菜单中选择任何内容",normalizedTitle:"无法在选择菜单中选择任何内容",charIndex:458},{level:2,title:"收到 “SSDTs not being added”",slug:"收到-ssdts-not-being-added",normalizedTitle:"收到 “ssdts not being added”",charIndex:476},{level:2,title:"引导OpenCore重启到BIOS",slug:"引导opencore重启到bios",normalizedTitle:"引导opencore重启到bios",charIndex:506},{level:2,title:"收到 “OCABC: Incompatible OpenRuntime r4, require r10”",slug:"收到-ocabc-incompatible-openruntime-r4-require-r10",normalizedTitle:"收到 “ocabc: incompatible openruntime r4, require r10”",charIndex:527},{level:2,title:"收到 “Failed to open OpenCore image - Access Denied”",slug:"收到-failed-to-open-opencore-image-access-denied",normalizedTitle:"收到 “failed to open opencore image - access denied”",charIndex:583},{level:2,title:"收到 “OC: Failed to find SB model disable halting on critical error”",slug:"收到-oc-failed-to-find-sb-model-disable-halting-on-critical-error",normalizedTitle:"收到 “oc: failed to find sb model disable halting on critical error”",charIndex:637}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:'在出现选择菜单之前卡在黑屏上 卡在 no vault provided! 卡在 OC: Invalid Vault mode 无法看到macOS分区 卡在 OCB: OcScanForBootEntries failure - Not Found 卡在 OCB: failed to match a default boot option 卡在 OCB: System has no boot entries 卡在 OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters... 卡在 OC: Driver XXX.efi at 0 cannot be found 收到 "Failed to parse real field of type 1" 无法在选择菜单中选择任何内容 收到 “SSDTs not being added” 引导OpenCore重启到BIOS 收到 “OCABC: Incompatible OpenRuntime r4, require r10” 收到 “Failed to open OpenCore image - Access Denied” 收到 “OC: Failed to find SB model disable halting on critical error”',content:'# OpenCore启动问题\n\n从启动USB本身到选择启动macOS安装程序之前的问题\n\n\n\n * 在出现选择菜单之前卡在黑屏上\n * 卡在 no vault provided!\n * 卡在 OC: Invalid Vault mode\n * 无法看到macOS分区\n * 卡在 OCB: OcScanForBootEntries failure - Not Found\n * 卡在 OCB: failed to match a default boot option\n * 卡在 OCB: System has no boot entries\n * 卡在 OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...\n * 卡在 OC: Driver XXX.efi at 0 cannot be found\n * 收到 "Failed to parse real field of type 1"\n * 无法在选择菜单中选择任何内容\n * 收到 “SSDTs not being added”\n * 引导OpenCore重启到BIOS\n * 收到 “OCABC: Incompatible OpenRuntime r4, require r10”\n * 收到 “Failed to open OpenCore image - Access Denied”\n * 收到 “OC: Failed to find SB model disable halting on critical error”\n\n\n\n\n# 在出现选择菜单之前卡在黑屏上\n\n这可能是您的固件或OpenCore上的一些错误，特别是它在加载所有驱动程序和显示菜单时有问题。诊断它的最佳方法是通过[OpenCore的DEBUG Build](./../ DEBUG .md)并检查日志OpenCore是否实际加载，如果是，则是什么卡住了。\n\nOpenCore未加载的情况:\n\n * 如果在设置了OpenCore的DEBUG版本，Target设置为67后，仍然没有日志，则可能存在以下问题:\n   * 不正确的USB文件夹结构\n     * 参见引导OpenCore重启到BIOS 了解更多信息\n   * 固件不支持UEFI\n     * 你需要设置DuetPkg，这在macOS 和 Windows 安装页面中都有介绍\n\nOpenCore已加载的情况:\n\n * 检查日志中打印的最后一行，很可能有加载的 .efi 驱动程序或者某种形式的ASSERT\n   * 对于ASSERT，你需要在这里通知开发人员这个问题: Acidanthera\'s Bugtracker\n   * 如果.efi驱动卡住了，请检查以下内容:\n     * HfsPlus.efi 加载问题:\n       * 尝试使用 HfsPlusLegacy.efi 代替\n       * 这建议用于不支持RDRAND的cpu，主要与第3代Ivy bridge i3及更老的cpu有关\n       * VBoxHfs.efi 是另一个选择，但是比HfsPlus的版本要慢得多\n     * HiiDatabase.efi 加载问题:\n       * 可能你的固件已经支持HiiDatabase，所以驱动程序是冲突的。只需移除驱动程序，因为你不需要它。\n\n\n# 卡在 no vault provided!\n\n在你的config.plist Misc -> Security -> Vault 中将Vault设置为:\n\n * Optional\n\n如果您已经执行了 sign.command 您将需要恢复OpenCore.efi文件，因为已经插入了256字节的RSA-2048签名。可以在这里获取新的OpenCore.efi副本:OpenCorePkg\n\n注意:Vault和FileVault是两个不同的东西，请参阅安全和FileVault 了解更多细节\n\n\n# 卡在 OC: Invalid Vault mode\n\n这可能是一个拼写错误，OpenCore中的选项是区分大小写的，所以请务必仔细检查， O是在Misc -> Security -> Vault下正确的输入方式。\n\n\n# 无法看到macOS分区\n\n主要检查:\n\n * ScanPolicy设置为 0 将显示所有驱动器\n * 拥有合适的固件驱动程序，例如HfsPlus(注意 ApfsDriverLoader 不应该在0.5.8中使用)\n * 在config plist -> UEFI -> Quirks 中将 UnblockFsConnect 设置为 True 。一些HP系统需要\n * 在BIOS中设置 SATA 模式: AHCI\n * 设置UEFI -> APFS以查看基于APFS的驱动器:\n   * EnableJumpstart: YES\n   * HideVerbose: NO\n   * 如果运行旧版本的High Sierra(即 10.13.5或更老版本)，设置如下:\n     * MinDate: -1\n     * MinVersion: -1\n\n\n# 卡在 OCB: OcScanForBootEntries failure - Not Found\n\n这是由于OpenCore无法找到任何驱动器与当前的ScanPolicy，设置为 0 将允许所有引导选项显示\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# 卡在 OCB: failed to match a default boot option\n\n与OCB: OcScanForBootEntries failure - Not Found相同的修复，OpenCore无法找到任何驱动器与当前的ScanPolicy，设置为0将允许所有引导选项显示\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# 卡在 OCB: System has no boot entries\n\n与上述2相同的修复:\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# 卡在 OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...\n\n这是因为在 OpenCore 中使用了 Clover 配置，或者使用了像 Mackie 的 Clover 和 OpenCore configurator 这样的配置器。你需要重新开始并创建一个新的配置，或者找出所有需要从配置中删除的垃圾。这就是为什么我们不支持配置器的原因，配置器在这些问题上是众所周知的\n\n * 注意:如果您将过时的配置与新版本的OpenCore混合使用，也会发生相同的问题。请相应地更新它们\n\n\n# 卡在 OC: Driver XXX.efi at 0 cannot be found\n\n这是由于在你的 config.plist 中有一个条目，但在你的 EFI 中没有。解决方法:\n\n * 确保你的 EFI/OC/Drivers 与 config plist -> UEFI -> Drivers 匹配\n   * 如果不是，请使用OpenCore运行Cmd/Ctrl+R重新快照config.plist\n\n注意，这些条目是区分大小写的。\n\n\n# 收到 "Failed to parse real field of type 1"\n\n这是因为当一个值不应该是real时，它被设置为real，通常是Xcode意外转换了HaltLevel:\n\n<key>HaltLevel</key>\n <real>2147483648</real>\n\n\n要解决这个问题，把real换成integer:\n\n<key>HaltLevel</key>\n <integer>2147483648</integer>\n\n\n\n# 无法在选择菜单中选择任何内容\n\n这是由于一些事情\n\n * 不兼容的键盘驱动程序:\n   \n   * 禁用PollAppleHotKeys并启用KeySupport，然后从 config.plist -> UEFI -> Drivers 中删除OpenUsbKbDxe\n   * 如果上述方法无效，反向操作:禁用\' KeySupport`，然后将OpenUsbKbDxe 添加到你的 config.plist -> UEFI -> Drivers\n\n * 缺少PS2键盘驱动程序(如果使用USB键盘则忽略):\n   \n   * *虽然大多数固件默认包含它，但一些笔记本电脑和旧电脑可能仍然需要Ps2KeyboardDxe.efi 才能工作。记得把这个添加到你的config.plist中\n\n\n# 收到 “SSDTs not being added”\n\n使用OpenCore，在ACPI文件周围添加了一些额外的安全检查，特别是表长度头必须等于文件大小。这实际上是iASL在编译文件时的错误。如何找到它的例子:\n\n* Original Table Header:\n*     Signature        "SSDT"\n*     Length           0x0000015D (349)\n*     Revision         0x02\n*     Checksum         0xCF\n*     OEM ID           "ACDT"\n*     OEM Table ID     "SsdtEC"\n*     OEM Revision     0x00001000 (4096)\n*     Compiler ID      "INTL"\n*     Compiler Version 0x20190509 (538510601)\n\n\nLength和checksum值是我们关心的，所以如果我们的SSDT实际上是347字节，那么我们希望将Length更改为0x0000015B (347)(015B是十六进制的)\n\n解决这个问题的最好方法是获取一个更新的iASL副本或Acidanthera的MaciASL副本并重新制作SSDT\n\n * 注:由 Rehabman 发布的 MaciASL 容易发生 ACPI 损坏，请避免使用，因为他们不再维持他们的仓库\n\n\n# 引导OpenCore重启到BIOS\n\n * 不正确的EFI文件夹结构，确保所有OC文件都在ESP(EFI系统分区)上的EFI文件夹中\n\n文件夹结构示例\n\n\n\n\n# 收到 “OCABC: Incompatible OpenRuntime r4, require r10”\n\n过时的OpenRuntime.efi，确保BOOTx64.efi, OpenCore.efi和OpenRuntime 都来自相同的构建。任何不匹配的东西都会破坏启动\n\n * 注意:0.5.7及以上版本，FwRuntimeServices已重命名为OpenRuntime\n\n\n# 收到 “Failed to open OpenCore image - Access Denied”\n\n在较新的微软Surface设备固件上，即使禁用了安全引导，加载OpenCore也会导致安全违规。要解决这个问题，请在 config.plist 中启用UEFI -> Quirks -> DisableSecurityPolicy。查看这里了解更多信息:Failed to open OpenCore image - Access Denied #1446\n\n\n# 收到 “OC: Failed to find SB model disable halting on critical error”\n\n这是一个拼写错误，请确保在你的 config.plist 中将Misc -> Security -> SecureBootModel 设置为禁用 d',normalizedContent:'# opencore启动问题\n\n从启动usb本身到选择启动macos安装程序之前的问题\n\n\n\n * 在出现选择菜单之前卡在黑屏上\n * 卡在 no vault provided!\n * 卡在 oc: invalid vault mode\n * 无法看到macos分区\n * 卡在 ocb: ocscanforbootentries failure - not found\n * 卡在 ocb: failed to match a default boot option\n * 卡在 ocb: system has no boot entries\n * 卡在 ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...\n * 卡在 oc: driver xxx.efi at 0 cannot be found\n * 收到 "failed to parse real field of type 1"\n * 无法在选择菜单中选择任何内容\n * 收到 “ssdts not being added”\n * 引导opencore重启到bios\n * 收到 “ocabc: incompatible openruntime r4, require r10”\n * 收到 “failed to open opencore image - access denied”\n * 收到 “oc: failed to find sb model disable halting on critical error”\n\n\n\n\n# 在出现选择菜单之前卡在黑屏上\n\n这可能是您的固件或opencore上的一些错误，特别是它在加载所有驱动程序和显示菜单时有问题。诊断它的最佳方法是通过[opencore的debug build](./../ debug .md)并检查日志opencore是否实际加载，如果是，则是什么卡住了。\n\nopencore未加载的情况:\n\n * 如果在设置了opencore的debug版本，target设置为67后，仍然没有日志，则可能存在以下问题:\n   * 不正确的usb文件夹结构\n     * 参见引导opencore重启到bios 了解更多信息\n   * 固件不支持uefi\n     * 你需要设置duetpkg，这在macos 和 windows 安装页面中都有介绍\n\nopencore已加载的情况:\n\n * 检查日志中打印的最后一行，很可能有加载的 .efi 驱动程序或者某种形式的assert\n   * 对于assert，你需要在这里通知开发人员这个问题: acidanthera\'s bugtracker\n   * 如果.efi驱动卡住了，请检查以下内容:\n     * hfsplus.efi 加载问题:\n       * 尝试使用 hfspluslegacy.efi 代替\n       * 这建议用于不支持rdrand的cpu，主要与第3代ivy bridge i3及更老的cpu有关\n       * vboxhfs.efi 是另一个选择，但是比hfsplus的版本要慢得多\n     * hiidatabase.efi 加载问题:\n       * 可能你的固件已经支持hiidatabase，所以驱动程序是冲突的。只需移除驱动程序，因为你不需要它。\n\n\n# 卡在 no vault provided!\n\n在你的config.plist misc -> security -> vault 中将vault设置为:\n\n * optional\n\n如果您已经执行了 sign.command 您将需要恢复opencore.efi文件，因为已经插入了256字节的rsa-2048签名。可以在这里获取新的opencore.efi副本:opencorepkg\n\n注意:vault和filevault是两个不同的东西，请参阅安全和filevault 了解更多细节\n\n\n# 卡在 oc: invalid vault mode\n\n这可能是一个拼写错误，opencore中的选项是区分大小写的，所以请务必仔细检查， o是在misc -> security -> vault下正确的输入方式。\n\n\n# 无法看到macos分区\n\n主要检查:\n\n * scanpolicy设置为 0 将显示所有驱动器\n * 拥有合适的固件驱动程序，例如hfsplus(注意 apfsdriverloader 不应该在0.5.8中使用)\n * 在config plist -> uefi -> quirks 中将 unblockfsconnect 设置为 true 。一些hp系统需要\n * 在bios中设置 sata 模式: ahci\n * 设置uefi -> apfs以查看基于apfs的驱动器:\n   * enablejumpstart: yes\n   * hideverbose: no\n   * 如果运行旧版本的high sierra(即 10.13.5或更老版本)，设置如下:\n     * mindate: -1\n     * minversion: -1\n\n\n# 卡在 ocb: ocscanforbootentries failure - not found\n\n这是由于opencore无法找到任何驱动器与当前的scanpolicy，设置为 0 将允许所有引导选项显示\n\n * misc -> security -> scanpolicy -> 0\n\n\n# 卡在 ocb: failed to match a default boot option\n\n与ocb: ocscanforbootentries failure - not found相同的修复，opencore无法找到任何驱动器与当前的scanpolicy，设置为0将允许所有引导选项显示\n\n * misc -> security -> scanpolicy -> 0\n\n\n# 卡在 ocb: system has no boot entries\n\n与上述2相同的修复:\n\n * misc -> security -> scanpolicy -> 0\n\n\n# 卡在 ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...\n\n这是因为在 opencore 中使用了 clover 配置，或者使用了像 mackie 的 clover 和 opencore configurator 这样的配置器。你需要重新开始并创建一个新的配置，或者找出所有需要从配置中删除的垃圾。这就是为什么我们不支持配置器的原因，配置器在这些问题上是众所周知的\n\n * 注意:如果您将过时的配置与新版本的opencore混合使用，也会发生相同的问题。请相应地更新它们\n\n\n# 卡在 oc: driver xxx.efi at 0 cannot be found\n\n这是由于在你的 config.plist 中有一个条目，但在你的 efi 中没有。解决方法:\n\n * 确保你的 efi/oc/drivers 与 config plist -> uefi -> drivers 匹配\n   * 如果不是，请使用opencore运行cmd/ctrl+r重新快照config.plist\n\n注意，这些条目是区分大小写的。\n\n\n# 收到 "failed to parse real field of type 1"\n\n这是因为当一个值不应该是real时，它被设置为real，通常是xcode意外转换了haltlevel:\n\n<key>haltlevel</key>\n <real>2147483648</real>\n\n\n要解决这个问题，把real换成integer:\n\n<key>haltlevel</key>\n <integer>2147483648</integer>\n\n\n\n# 无法在选择菜单中选择任何内容\n\n这是由于一些事情\n\n * 不兼容的键盘驱动程序:\n   \n   * 禁用pollapplehotkeys并启用keysupport，然后从 config.plist -> uefi -> drivers 中删除openusbkbdxe\n   * 如果上述方法无效，反向操作:禁用\' keysupport`，然后将openusbkbdxe 添加到你的 config.plist -> uefi -> drivers\n\n * 缺少ps2键盘驱动程序(如果使用usb键盘则忽略):\n   \n   * *虽然大多数固件默认包含它，但一些笔记本电脑和旧电脑可能仍然需要ps2keyboarddxe.efi 才能工作。记得把这个添加到你的config.plist中\n\n\n# 收到 “ssdts not being added”\n\n使用opencore，在acpi文件周围添加了一些额外的安全检查，特别是表长度头必须等于文件大小。这实际上是iasl在编译文件时的错误。如何找到它的例子:\n\n* original table header:\n*     signature        "ssdt"\n*     length           0x0000015d (349)\n*     revision         0x02\n*     checksum         0xcf\n*     oem id           "acdt"\n*     oem table id     "ssdtec"\n*     oem revision     0x00001000 (4096)\n*     compiler id      "intl"\n*     compiler version 0x20190509 (538510601)\n\n\nlength和checksum值是我们关心的，所以如果我们的ssdt实际上是347字节，那么我们希望将length更改为0x0000015b (347)(015b是十六进制的)\n\n解决这个问题的最好方法是获取一个更新的iasl副本或acidanthera的maciasl副本并重新制作ssdt\n\n * 注:由 rehabman 发布的 maciasl 容易发生 acpi 损坏，请避免使用，因为他们不再维持他们的仓库\n\n\n# 引导opencore重启到bios\n\n * 不正确的efi文件夹结构，确保所有oc文件都在esp(efi系统分区)上的efi文件夹中\n\n文件夹结构示例\n\n\n\n\n# 收到 “ocabc: incompatible openruntime r4, require r10”\n\n过时的openruntime.efi，确保bootx64.efi, opencore.efi和openruntime 都来自相同的构建。任何不匹配的东西都会破坏启动\n\n * 注意:0.5.7及以上版本，fwruntimeservices已重命名为openruntime\n\n\n# 收到 “failed to open opencore image - access denied”\n\n在较新的微软surface设备固件上，即使禁用了安全引导，加载opencore也会导致安全违规。要解决这个问题，请在 config.plist 中启用uefi -> quirks -> disablesecuritypolicy。查看这里了解更多信息:failed to open opencore image - access denied #1446\n\n\n# 收到 “oc: failed to find sb model disable halting on critical error”\n\n这是一个拼写错误，请确保在你的 config.plist 中将misc -> security -> securebootmodel 设置为禁用 d',charsets:{cjk:!0}},{title:"安装后的问题",frontmatter:{},regularPath:"/troubleshooting/extended/post-issues.html",relativePath:"troubleshooting/extended/post-issues.md",key:"v-457daeed",path:"/troubleshooting/extended/post-issues.html",headers:[{level:2,title:"坏掉的 iMessage 和 Siri",slug:"坏掉的-imessage-和-siri",normalizedTitle:"坏掉的 imessage 和 siri",charIndex:35},{level:2,title:"没有板载音频",slug:"没有板载音频",normalizedTitle:"没有板载音频",charIndex:58},{level:2,title:"BIOS重置或在重启/关机后进入安全模式",slug:"bios重置或在重启-关机后进入安全模式",normalizedTitle:"bios重置或在重启/关机后进入安全模式",charIndex:68},{level:2,title:"基于Synaptics PS2的触控板无法工作",slug:"基于synaptics-ps2的触控板无法工作",normalizedTitle:"基于synaptics ps2的触控板无法工作",charIndex:92},{level:2,title:"修复戴尔PS2键盘按键不释放的问题",slug:"修复戴尔ps2键盘按键不释放的问题",normalizedTitle:"修复戴尔ps2键盘按键不释放的问题",charIndex:119},{level:2,title:"AMD X570上缺少macOS GPU加速",slug:"amd-x570上缺少macos-gpu加速",normalizedTitle:"amd x570上缺少macos gpu加速",charIndex:140},{level:2,title:"DRM损坏",slug:"drm损坏",normalizedTitle:"drm损坏",charIndex:166},{level:2,title:"MacPro7“内存模块配置错误”",slug:"macpro7-内存模块配置错误",normalizedTitle:"macpro7“内存模块配置错误”",charIndex:175},{level:2,title:"应用程序在AMD上崩溃",slug:"应用程序在amd上崩溃",normalizedTitle:"应用程序在amd上崩溃",charIndex:196},{level:2,title:"AMD的睡眠崩溃",slug:"amd的睡眠崩溃",normalizedTitle:"amd的睡眠崩溃",charIndex:211},{level:2,title:"AssetCache内容缓存在虚拟机中不可用",slug:"assetcache内容缓存在虚拟机中不可用",normalizedTitle:"assetcache内容缓存在虚拟机中不可用",charIndex:223},{level:2,title:"Coffee Lake 系统无法唤醒",slug:"coffee-lake-系统无法唤醒",normalizedTitle:"coffee lake 系统无法唤醒",charIndex:249},{level:2,title:"双GPU笔记本电脑上没有亮度控制",slug:"双gpu笔记本电脑上没有亮度控制",normalizedTitle:"双gpu笔记本电脑上没有亮度控制",charIndex:271},{level:2,title:"没有温度/风扇传感器输出",slug:"没有温度-风扇传感器输出",normalizedTitle:"没有温度/风扇传感器输出",charIndex:291},{level:2,title:"“您不能将启动磁盘更改为所选磁盘”错误",slug:"您不能将启动磁盘更改为所选磁盘-错误",normalizedTitle:"“您不能将启动磁盘更改为所选磁盘”错误",charIndex:307},{level:2,title:"选择启动盘不正确",slug:"选择启动盘不正确",normalizedTitle:"选择启动盘不正确",charIndex:330},{level:2,title:"macOS在错误的时间醒来",slug:"macos在错误的时间醒来",normalizedTitle:"macos在错误的时间醒来",charIndex:342},{level:2,title:"外部显示器没有音量/亮度控制",slug:"外部显示器没有音量-亮度控制",normalizedTitle:"外部显示器没有音量/亮度控制",charIndex:359},{level:2,title:"macOS 和 Windows 系统时间不一致",slug:"macos-和-windows-系统时间不一致",normalizedTitle:"macos 和 windows 系统时间不一致",charIndex:377},{level:2,title:"禁用 SIP",slug:"禁用-sip",normalizedTitle:"禁用 sip",charIndex:404},{level:2,title:"写入macOS系统分区",slug:"写入macos系统分区",normalizedTitle:"写入macos系统分区",charIndex:414},{level:2,title:"回滚APFS快照",slug:"回滚apfs快照",normalizedTitle:"回滚apfs快照",charIndex:429},{level:2,title:"Apple Watch解锁问题",slug:"apple-watch解锁问题",normalizedTitle:"apple watch解锁问题",charIndex:441},{level:2,title:"HDMI上的4K iGPU输出问题",slug:"hdmi上的4k-igpu输出问题",normalizedTitle:"hdmi上的4k igpu输出问题",charIndex:460}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"坏掉的 iMessage 和 Siri 没有板载音频 BIOS重置或在重启/关机后进入安全模式 基于Synaptics PS2的触控板无法工作 修复戴尔PS2键盘按键不释放的问题 AMD X570上缺少macOS GPU加速 DRM损坏 MacPro7“内存模块配置错误” 应用程序在AMD上崩溃 AMD的睡眠崩溃 AssetCache内容缓存在虚拟机中不可用 Coffee Lake 系统无法唤醒 双GPU笔记本电脑上没有亮度控制 没有温度/风扇传感器输出 “您不能将启动磁盘更改为所选磁盘”错误 选择启动盘不正确 macOS在错误的时间醒来 外部显示器没有音量/亮度控制 macOS 和 Windows 系统时间不一致 禁用 SIP 写入macOS系统分区 回滚APFS快照 Apple Watch解锁问题 HDMI上的4K iGPU输出问题",content:'# 安装后的问题\n\n一旦正确安装，围绕macOS的问题。\n\n\n\n * 坏掉的 iMessage 和 Siri\n * 没有板载音频\n * BIOS重置或在重启/关机后进入安全模式\n * 基于Synaptics PS2的触控板无法工作\n * 修复戴尔PS2键盘按键不释放的问题\n * AMD X570上缺少macOS GPU加速\n * DRM损坏\n * MacPro7“内存模块配置错误”\n * 应用程序在AMD上崩溃\n * AMD的睡眠崩溃\n * AssetCache内容缓存在虚拟机中不可用\n * Coffee Lake 系统无法唤醒\n * 双GPU笔记本电脑上没有亮度控制\n * 没有温度/风扇传感器输出\n * “您不能将启动磁盘更改为所选磁盘”错误\n * 选择启动盘不正确\n * macOS在错误的时间醒来\n * 外部显示器没有音量/亮度控制\n * macOS 和 Windows 系统时间不一致\n * 禁用 SIP\n * 写入macOS系统分区\n * 回滚APFS快照\n * Apple Watch解锁问题\n * HDMI上的4K iGPU输出问题\n\n\n\n\n# 坏掉的 iMessage 和 Siri\n\n请参阅修复iServices 部分\n\n\n# 没有板载音频\n\n请参阅使用AppleALC修复音频部分\n\n\n# BIOS重置或在重启/关机后进入安全模式\n\n请参阅修复RTC/CMOS复位部分\n\n\n# 基于Synaptics PS2的触控板无法工作\n\n您可以尝试使用 SSDT-Enable_DynamicEWMode.dsl. 首先，你需要打开设备管理器，进入以下页面:\n\n设备管理器->鼠标和其他指向设备->双击触摸板->属性->详细信息> BIOS设备名称\n\n\n然后获取 SSDT-Enable_DynamicEWMode.dsl 默认情况下，该路径使用PCI0.LPCB.PS2K。您需要相应地重命名。\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- 重命名\n\n    Name(_SB.PCI0.LPCB.PS2K.RMCF, Package()  <- 重命名\n\n\n\n然后用MaciASL编译，复制到OC/ACPI文件夹，并将其添加到配置文件中，这样就可以了。\n\n * 注意:虽然在大多数情况下这是有效的，但触控板可能会滞后，你可能无法使用物理按钮(更多细节)。如果你可以不用触控板，这个可能会更好:\n\n找到鼠标的ACPI路径(见上文)，然后获取 SSDT-DisableTrackpadProbe.dsl. 默认情况下，它使用PCI0.LPCB.PS2K，因此您必须在必要时将其更改为ACPI路径:\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- 重命名\n\n    Name(_SB.PCI0.LPCB.PS2K.RMCF, Package() <- 重命名\n\n\n\n# 修复戴尔PS2键盘按键不释放的问题\n\n对于那些围绕按键不释放(即无限按)的问题，您将希望启用VoodooPS2的戴尔配置文件。\n\n首先，你需要在设备管理器中找到你的ACPI键盘对象的路径:\n\n设备管理器->键盘->双击键盘->属性->详细信息> BIOS设备名称\n\n\n在此之后，获取 SSDT-KEY-DELL-WN09.dsl ，并根据需要将ACPI路径更改为上面找到的路径:\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- 重命名\n\n    Method(_SB.PCI0.LPCB.PS2K._DSM, 4) <- 重命名\n\n\n\n# AMD X570上缺少macOS GPU加速\n\n验证以下内容:\n\n * GPU支持UEFI (GTX 7XX/2013+)\n * BIOS中CSM是关闭的\n * 强制使用PCIe 3.0链路速度\n\n\n# DRM损坏\n\n参考修复DRM 部分\n\n\n# MacPro7“内存模块配置错误”\n\n遵循这里列出的指南:\n\n * 修复MacPro7,1内存错误\n\n对于那些只想禁用通知(而不是错误本身)的人来说，已经足够了。对于这些用户来说,我们建议安装 RestrictEvents\n\n\n# 应用程序在AMD上崩溃\n\n容易搞定，买英特尔吧\n\n所以对于AMD，每当苹果调用CPU的特定函数时，应用程序要么无法工作，要么彻底崩溃。以下是一些应用程序和它们的“修复”:\n\n * Adobe产品并不总是工作\n   * 一些修复可以在这里找到:Adobe修复程序\n   * 请注意，这些修复只是禁用功能，它们并不是真正的修复\n * 运行在AppleHV框架下的虚拟机将无法工作(即:Parallels 15, VMware)\n   * VirtualBox工作良好，因为它不使用AppleHV\n   * VMware 10及以上版本也可以使用\n   * Parallels 13.1.0及更老版本已知也可以工作\n * Docker崩溃\n   * Docker toolbox是唯一的解决方案，因为它基于VirtualBox，许多功能在这个版本中不可用\n * IDA Pro无法安装\n   * 在安装程序中有一个英特尔特定的检查，应用程序本身可能是好的\n * 15/16h CPU 网页崩溃\n   * 请遵循更新5后的指示:修复网页\n\n\n# AMD的睡眠崩溃\n\n这在使用芯片组USB控制器的AMD上很常见，特别是Ryzen系列和更新的产品。判断是否有问题的主要方法是在睡眠或醒来后检查日志:\n\n * 在终端中:\n   * log show --last 1d | grep -i "Wake reason"\n\n结果应该是这样的:\n\nSleep transition timed out after 180 seconds while calling power state change callbacks. Suspected bundle: com.apple.iokit.IOUSBHostFamily.\n\n\n您可以通过IOReg再次检查哪个控制器是XHC0，并检查供应商ID(AMD芯片组为1022)。解决这个睡眠问题的方法是:\n\n * 避免使用USB芯片组(理想情况下设置_STA = 0x0来禁用SSDT控制器)\n * 将USBX电源属性纠正为控制器期望的值\n\n\n# AssetCache内容缓存在虚拟机中不可用\n\n错误如下:\n\n$ sudo AssetCacheManagerUtil activate\nAssetCacheManagerUtil[] Failed to activate content caching: Error Domain=ACSMErrorDomain Code=5 "virtual machine"...\n\n\n由于sysctl暴露了VMM标志而导致。\n\n应用VmAssetCacheEnable 内核补丁伪装标志，允许正常操作。\n\n\n# Coffee Lake 系统无法唤醒\n\n在macOS 10.15.4中，AGPM做了一些更改，可能会在Coffee Lake系统上引起唤醒问题。特别是连接到iGPU的显示器将无法唤醒。要解决这个问题:\n\n * 在引导参数中添加 igfxonln=1\n * 确保您使用的是 WhateverGreen v1.3.8 或更新版本\n\n\n# 双GPU笔记本电脑上没有亮度控制\n\n在macOS 11.3中，对背光控制机制做了一些更改，默认情况下，在启用MUX的双GPU笔记本电脑上，背光由dGPU控制。不过，Optimus只有笔记本电脑不受影响，因为无论如何你都需要禁用dGPU。具体来说，只有当你有一台双GPU笔记本电脑，内部屏幕来自iGPU输出，外部屏幕来自dGPU输出(在某些移动工作站上为混合模式)时，这个问题才会导致问题。要解决这个问题，可以禁用iGPU或dGPU，或者执行以下操作:\n\n * 验证是否安装了 SSDT-PNLF(即： 在 EFI/OC/ACPI 中以及 config.plist -> ACPI -> Add)\n\n * 添加到 PciRoot(0x0)/Pci(0x2,0x0):\n\n@0,backlight-control | Data | 01000000\n\napplbkl | Data | 01000000\n\nAAPL,backlight-control | Data | 01000000\n\nAAPL00,backlight-control | Data | 01000000\n\n * 添加以下内容到您的dGPU PCI地址:\n\n@0,backlight-control | Data | 00000000\n\napplbkl | Data | 00000000\n\nAAPL,backlight-control | Data | 00000000\n\n\n# 没有温度/风扇传感器输出\n\n这里有几点:\n\n * iStat Menus 还不能支持MacPro7, 1读数\n * VirtualSMC捆绑的传感器不支持AMD\n\n对于iStat，你必须等待更新。对于AMD用户，你可以使用以下两种方式:\n\n * SMCAMDProcessor\n   * 仍然处于早期测试阶段，但是已经做了很多工作，注意它主要在Ryzen上测试\n * FakeSMC3_with_plugins\n\nAMD使用FakeSMC的注意事项:\n\n * 支持FileVault需要使用FakeSMC进行更多工作\n * 确保没有其他SMC kext存在，特别是那些来自 VirtualSMC\n\n\n# “您不能将启动磁盘更改为所选磁盘”错误\n\n这通常是由于Windows驱动器的不规则分区设置造成的，特别是EFI不是第一个分区。要解决这个问题，我们需要启用这个功能:\n\n * PlatformInfo -> Generic -> AdviseFeatures -> True\n\n\n\n\n# 选择启动盘不正确\n\n如果您在启动磁盘正确应用新启动项时遇到问题，这很可能是由于I/O注册表中缺少DevicePathsSupported造成的。要解决这个问题，请确保您使用的是PlatformInfo -> Automatic -> True\n\n缺少DevicePathsSupported的例子:\n\n * 由于PciRoot不同导致默认DevicePath匹配失败#664\n\n\n# macOS在错误的时间醒来\n\n有些人可能会注意到一个奇怪的现象，macOS在唤醒后会有一段时间显示错误时间，然后通过网络时间检查进行自我纠正。这个问题的根本原因很可能是由于你的RTC不正常，可以通过一个新的CMOS电池解决(注意，Z270和更新的对电压是相当挑剔的，所以仔细选择)。\n\n要验证您的RTC是否正常工作:\n\n * 下载 VirtualSMC v1.1.5+ 并运行smcread工具:\n\n/path/to/smcread -s | grep CLKT\n\n\n\n\n这将为你提供一个十六进制的值，一旦转换，它应该等于从午夜相对于Cupertino经过的时间。\n\n因此，在本例中，我们将获取我们的值(00010D13)，然后将其转换为小数，最后除以3600。这将得到从午夜开始相对于Cupertino经过的大约时间(以秒为单位)\n\n * 00010D13(转换为十六进制)-> 68883(除以3600所以我们得到小时)-> 19.13小时(所以19:07:48)\n\n接下来，您需要让您的黑苹果休眠一会儿并唤醒它，然后再次检查CLKT值，看看它是否偏离了更多或是否有一个设置的差异。如果你发现从运行时间来看，它实际上没有发出太多信号，你需要考虑买一个新的电池(电压合适)。\n\n\n# 外部显示器没有音量/亮度控制\n\n奇怪的是，macOS已经锁定了数字音频的控制权。为了恢复一些功能，应用程序MonitorControl在改进macOS中的支持方面做了很多工作\n\n\n# macOS 和 Windows 系统时间不一致\n\n这是由于macOS使用通用时间，而Windows依赖格林威治时间，所以您需要迫使一个操作系统以不同的方式测量时间。我们强烈建议修改Windows，因为它的破坏性和痛苦要小得多:\n\n * 安装Bootcamp实用程序\n * 修改Windows注册表\n\n\n# 禁用 SIP\n\nSIP 或更恰当地称为系统完整性保护，是一种安全技术，试图防止任何恶意软件和最终用户破坏操作系统。SIP 最初是在 OS X El Capitan 中引入的，随着时间的推移，SIP 已经在 macOS 中控制越来越多的东西，包括将编辑限制在受限的文件位置，以及使用kextload加载第三方 kext (OpenCore不受影响，因为kext在启动时注入)。为了解决这个问题，苹果在 NVRAM 变量csr-active-config中提供了许多配置选项，可以在 macOS 恢复环境中设置，也可以在 OpenCore 的 NVRAM 部分中设置(后者将在下文讨论)。\n\n * 警告: 禁用SIP会破坏操作系统功能，如macOS 11, Big Sur和更新版本的软件更新。请注意，只禁用特定的SIP值，而不是完全禁用SIP，以避免这些问题。\n   * 启用CSR_ALLOW_UNAUTHENTICATED_ROOT和CSR_ALLOW_APPLE_INTERNAL是常见的选项，这些选项可能会破坏用户的操作系统更新\n\n您可以选择不同的值来启用或禁用SIP的某些标志。一些有用的工具可以帮助你解决这些问题，BitmaskDecode 和 csrstat. 常见值如下(字节为你进行了十六进制交换，注意它们在 NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config):\n\n * 00000000 - SIP完全启用(0x0)。\n * 03000000 - 禁用kext签名(0x1)和文件系统保护(0x2)。\n * FF030000 - 禁用所有macOS High Sierra中的标志 (0x3ff).\n * FF070000 - 禁用所有 macOS Mojave中的标志 and in macOS Catalina (0x7ff) 因为苹果公司为可执行策略引入了一个值。\n * FF0F0000 - 禁用macOS Big Sur (0xfff)中的所有标志，该标志具有另一个新的身份验证root标志.\n\n注意:使用OpenCore禁用SIP与Clover有很大不同，特别是NVRAM变量不会被覆盖，除非在 Delete 部分明确告知。因此，如果您已经通过OpenCore或macOS设置了一次SIP，则必须覆盖该变量:\n\n * NVRAM -> Delete -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config\n\n\n\n\n# 写入macOS系统分区\n\n在macOS Catalina及更新版本中，苹果将操作系统和用户数据分成了两个卷，其中系统卷默认是只读的。为了使这些驱动器可写，我们需要做以下几件事:\n\n*注意:如果系统分区被修改了，使用SecureBootModel的用户可能会进入RecoveryOS引导循环。要解决这个问题，请重置NVRAM并将SecureBootModel设置为Disabled\n\nmacOS Catalina\n\n 1. 禁用SIP\n 2. 挂载驱动器可写 (在终端运行 sudo mount -uw /)\n\nmacOS Big Sur\n\n 1. 禁用SIP\n 2. 将驱动器挂载为可写(参见下面的命令链接)\n\n * *注意:由于操作系统更新在macOS Big Sur和更新的工作方式，更改系统卷实际上会破坏操作系统更新。请谨慎编辑\n\n基于苹果KDK文档的命令:\n\n# 首先，为您的驱动器创建一个挂载点\nmkdir ~/livemount\n\n# 接下来，找到您的系统卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到我们的系统卷是disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# 挂载驱动器(即：disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# 现在您可以自由地对系统卷进行任何编辑\n\n# 如果你编辑了 S*/L*/Kernel, S*/L*/Extensions 或 L*/Extensions,\n# 您将需要重建内核缓存\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# 最后，编辑完系统卷之后，我们需要创建一个新的快照\nsudo bless --folder ~/livemount/System/Library/CoreServices --bootefi --create-snapshot\n\n\n\n# 回滚APFS快照\n\n使用macOS Big Sur，现在对系统卷进行快照，以便在密封损坏导致系统更新中断的情况下进行回滚。由于每次操作系统更新都会创建新的快照，我们也有相当多的数据需要回滚。\n\n要回滚，你首先需要重新启动到恢复分区，然后选择“从时间机器备份恢复”:\n\n\n\n * Credit to Lifewire for image\n\n\n# Apple Watch解锁问题\n\n对于那些有 Apple Watch 解锁问题的人，请验证以下内容:\n\n * 你有一个支持低功耗蓝牙(4.0+)的苹果无线网卡\n * 你的手表和Mac是用同一个账户登录的\n * iServices工作正常(例如:iMessage)\n * 在系统首选项的安全和隐私设置下，有一个用Apple Watch解锁的选项\n\n\n\n如果满足以上条件，并且你仍然有解锁问题，我们建议你查看以下指南:\n\n * 修复自动解锁\n\n\n# HDMI上的4K iGPU输出问题\n\n对于带有HDMI 2.0接口但存在分辨率问题的机器，请验证以下内容:\n\n * 4k输出在Windows上可以正常工作\n * 显示器显式设置为HDMI 2.0\n   * 如果使用HDMI到DisplayPort转换器，请确保显示器设置为DisplayPort 1.2或更高\n * 确保已分配足够的iGPU内存\n   * 对于Broadwell及更新版本，预计会分配64MB内存\n   * 依赖于WhateverGreen的framebuffer-stolenmem属性的机器应该知道，这可能会导致4k输出问题。请确保您可以将iGPU的内存设置为64MB，以允许您删除这些属性\n * 笔记本电脑和许多台式机用户可能需要这个引导参数:\n   * -cdfon\n\n关于所有其他故障排除，请参考WhateverGreen的英特尔文档',normalizedContent:'# 安装后的问题\n\n一旦正确安装，围绕macos的问题。\n\n\n\n * 坏掉的 imessage 和 siri\n * 没有板载音频\n * bios重置或在重启/关机后进入安全模式\n * 基于synaptics ps2的触控板无法工作\n * 修复戴尔ps2键盘按键不释放的问题\n * amd x570上缺少macos gpu加速\n * drm损坏\n * macpro7“内存模块配置错误”\n * 应用程序在amd上崩溃\n * amd的睡眠崩溃\n * assetcache内容缓存在虚拟机中不可用\n * coffee lake 系统无法唤醒\n * 双gpu笔记本电脑上没有亮度控制\n * 没有温度/风扇传感器输出\n * “您不能将启动磁盘更改为所选磁盘”错误\n * 选择启动盘不正确\n * macos在错误的时间醒来\n * 外部显示器没有音量/亮度控制\n * macos 和 windows 系统时间不一致\n * 禁用 sip\n * 写入macos系统分区\n * 回滚apfs快照\n * apple watch解锁问题\n * hdmi上的4k igpu输出问题\n\n\n\n\n# 坏掉的 imessage 和 siri\n\n请参阅修复iservices 部分\n\n\n# 没有板载音频\n\n请参阅使用applealc修复音频部分\n\n\n# bios重置或在重启/关机后进入安全模式\n\n请参阅修复rtc/cmos复位部分\n\n\n# 基于synaptics ps2的触控板无法工作\n\n您可以尝试使用 ssdt-enable_dynamicewmode.dsl. 首先，你需要打开设备管理器，进入以下页面:\n\n设备管理器->鼠标和其他指向设备->双击触摸板->属性->详细信息> bios设备名称\n\n\n然后获取 ssdt-enable_dynamicewmode.dsl 默认情况下，该路径使用pci0.lpcb.ps2k。您需要相应地重命名。\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- 重命名\n\n    name(_sb.pci0.lpcb.ps2k.rmcf, package()  <- 重命名\n\n\n\n然后用maciasl编译，复制到oc/acpi文件夹，并将其添加到配置文件中，这样就可以了。\n\n * 注意:虽然在大多数情况下这是有效的，但触控板可能会滞后，你可能无法使用物理按钮(更多细节)。如果你可以不用触控板，这个可能会更好:\n\n找到鼠标的acpi路径(见上文)，然后获取 ssdt-disabletrackpadprobe.dsl. 默认情况下，它使用pci0.lpcb.ps2k，因此您必须在必要时将其更改为acpi路径:\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- 重命名\n\n    name(_sb.pci0.lpcb.ps2k.rmcf, package() <- 重命名\n\n\n\n# 修复戴尔ps2键盘按键不释放的问题\n\n对于那些围绕按键不释放(即无限按)的问题，您将希望启用voodoops2的戴尔配置文件。\n\n首先，你需要在设备管理器中找到你的acpi键盘对象的路径:\n\n设备管理器->键盘->双击键盘->属性->详细信息> bios设备名称\n\n\n在此之后，获取 ssdt-key-dell-wn09.dsl ，并根据需要将acpi路径更改为上面找到的路径:\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- 重命名\n\n    method(_sb.pci0.lpcb.ps2k._dsm, 4) <- 重命名\n\n\n\n# amd x570上缺少macos gpu加速\n\n验证以下内容:\n\n * gpu支持uefi (gtx 7xx/2013+)\n * bios中csm是关闭的\n * 强制使用pcie 3.0链路速度\n\n\n# drm损坏\n\n参考修复drm 部分\n\n\n# macpro7“内存模块配置错误”\n\n遵循这里列出的指南:\n\n * 修复macpro7,1内存错误\n\n对于那些只想禁用通知(而不是错误本身)的人来说，已经足够了。对于这些用户来说,我们建议安装 restrictevents\n\n\n# 应用程序在amd上崩溃\n\n容易搞定，买英特尔吧\n\n所以对于amd，每当苹果调用cpu的特定函数时，应用程序要么无法工作，要么彻底崩溃。以下是一些应用程序和它们的“修复”:\n\n * adobe产品并不总是工作\n   * 一些修复可以在这里找到:adobe修复程序\n   * 请注意，这些修复只是禁用功能，它们并不是真正的修复\n * 运行在applehv框架下的虚拟机将无法工作(即:parallels 15, vmware)\n   * virtualbox工作良好，因为它不使用applehv\n   * vmware 10及以上版本也可以使用\n   * parallels 13.1.0及更老版本已知也可以工作\n * docker崩溃\n   * docker toolbox是唯一的解决方案，因为它基于virtualbox，许多功能在这个版本中不可用\n * ida pro无法安装\n   * 在安装程序中有一个英特尔特定的检查，应用程序本身可能是好的\n * 15/16h cpu 网页崩溃\n   * 请遵循更新5后的指示:修复网页\n\n\n# amd的睡眠崩溃\n\n这在使用芯片组usb控制器的amd上很常见，特别是ryzen系列和更新的产品。判断是否有问题的主要方法是在睡眠或醒来后检查日志:\n\n * 在终端中:\n   * log show --last 1d | grep -i "wake reason"\n\n结果应该是这样的:\n\nsleep transition timed out after 180 seconds while calling power state change callbacks. suspected bundle: com.apple.iokit.iousbhostfamily.\n\n\n您可以通过ioreg再次检查哪个控制器是xhc0，并检查供应商id(amd芯片组为1022)。解决这个睡眠问题的方法是:\n\n * 避免使用usb芯片组(理想情况下设置_sta = 0x0来禁用ssdt控制器)\n * 将usbx电源属性纠正为控制器期望的值\n\n\n# assetcache内容缓存在虚拟机中不可用\n\n错误如下:\n\n$ sudo assetcachemanagerutil activate\nassetcachemanagerutil[] failed to activate content caching: error domain=acsmerrordomain code=5 "virtual machine"...\n\n\n由于sysctl暴露了vmm标志而导致。\n\n应用vmassetcacheenable 内核补丁伪装标志，允许正常操作。\n\n\n# coffee lake 系统无法唤醒\n\n在macos 10.15.4中，agpm做了一些更改，可能会在coffee lake系统上引起唤醒问题。特别是连接到igpu的显示器将无法唤醒。要解决这个问题:\n\n * 在引导参数中添加 igfxonln=1\n * 确保您使用的是 whatevergreen v1.3.8 或更新版本\n\n\n# 双gpu笔记本电脑上没有亮度控制\n\n在macos 11.3中，对背光控制机制做了一些更改，默认情况下，在启用mux的双gpu笔记本电脑上，背光由dgpu控制。不过，optimus只有笔记本电脑不受影响，因为无论如何你都需要禁用dgpu。具体来说，只有当你有一台双gpu笔记本电脑，内部屏幕来自igpu输出，外部屏幕来自dgpu输出(在某些移动工作站上为混合模式)时，这个问题才会导致问题。要解决这个问题，可以禁用igpu或dgpu，或者执行以下操作:\n\n * 验证是否安装了 ssdt-pnlf(即： 在 efi/oc/acpi 中以及 config.plist -> acpi -> add)\n\n * 添加到 pciroot(0x0)/pci(0x2,0x0):\n\n@0,backlight-control | data | 01000000\n\napplbkl | data | 01000000\n\naapl,backlight-control | data | 01000000\n\naapl00,backlight-control | data | 01000000\n\n * 添加以下内容到您的dgpu pci地址:\n\n@0,backlight-control | data | 00000000\n\napplbkl | data | 00000000\n\naapl,backlight-control | data | 00000000\n\n\n# 没有温度/风扇传感器输出\n\n这里有几点:\n\n * istat menus 还不能支持macpro7, 1读数\n * virtualsmc捆绑的传感器不支持amd\n\n对于istat，你必须等待更新。对于amd用户，你可以使用以下两种方式:\n\n * smcamdprocessor\n   * 仍然处于早期测试阶段，但是已经做了很多工作，注意它主要在ryzen上测试\n * fakesmc3_with_plugins\n\namd使用fakesmc的注意事项:\n\n * 支持filevault需要使用fakesmc进行更多工作\n * 确保没有其他smc kext存在，特别是那些来自 virtualsmc\n\n\n# “您不能将启动磁盘更改为所选磁盘”错误\n\n这通常是由于windows驱动器的不规则分区设置造成的，特别是efi不是第一个分区。要解决这个问题，我们需要启用这个功能:\n\n * platforminfo -> generic -> advisefeatures -> true\n\n\n\n\n# 选择启动盘不正确\n\n如果您在启动磁盘正确应用新启动项时遇到问题，这很可能是由于i/o注册表中缺少devicepathssupported造成的。要解决这个问题，请确保您使用的是platforminfo -> automatic -> true\n\n缺少devicepathssupported的例子:\n\n * 由于pciroot不同导致默认devicepath匹配失败#664\n\n\n# macos在错误的时间醒来\n\n有些人可能会注意到一个奇怪的现象，macos在唤醒后会有一段时间显示错误时间，然后通过网络时间检查进行自我纠正。这个问题的根本原因很可能是由于你的rtc不正常，可以通过一个新的cmos电池解决(注意，z270和更新的对电压是相当挑剔的，所以仔细选择)。\n\n要验证您的rtc是否正常工作:\n\n * 下载 virtualsmc v1.1.5+ 并运行smcread工具:\n\n/path/to/smcread -s | grep clkt\n\n\n\n\n这将为你提供一个十六进制的值，一旦转换，它应该等于从午夜相对于cupertino经过的时间。\n\n因此，在本例中，我们将获取我们的值(00010d13)，然后将其转换为小数，最后除以3600。这将得到从午夜开始相对于cupertino经过的大约时间(以秒为单位)\n\n * 00010d13(转换为十六进制)-> 68883(除以3600所以我们得到小时)-> 19.13小时(所以19:07:48)\n\n接下来，您需要让您的黑苹果休眠一会儿并唤醒它，然后再次检查clkt值，看看它是否偏离了更多或是否有一个设置的差异。如果你发现从运行时间来看，它实际上没有发出太多信号，你需要考虑买一个新的电池(电压合适)。\n\n\n# 外部显示器没有音量/亮度控制\n\n奇怪的是，macos已经锁定了数字音频的控制权。为了恢复一些功能，应用程序monitorcontrol在改进macos中的支持方面做了很多工作\n\n\n# macos 和 windows 系统时间不一致\n\n这是由于macos使用通用时间，而windows依赖格林威治时间，所以您需要迫使一个操作系统以不同的方式测量时间。我们强烈建议修改windows，因为它的破坏性和痛苦要小得多:\n\n * 安装bootcamp实用程序\n * 修改windows注册表\n\n\n# 禁用 sip\n\nsip 或更恰当地称为系统完整性保护，是一种安全技术，试图防止任何恶意软件和最终用户破坏操作系统。sip 最初是在 os x el capitan 中引入的，随着时间的推移，sip 已经在 macos 中控制越来越多的东西，包括将编辑限制在受限的文件位置，以及使用kextload加载第三方 kext (opencore不受影响，因为kext在启动时注入)。为了解决这个问题，苹果在 nvram 变量csr-active-config中提供了许多配置选项，可以在 macos 恢复环境中设置，也可以在 opencore 的 nvram 部分中设置(后者将在下文讨论)。\n\n * 警告: 禁用sip会破坏操作系统功能，如macos 11, big sur和更新版本的软件更新。请注意，只禁用特定的sip值，而不是完全禁用sip，以避免这些问题。\n   * 启用csr_allow_unauthenticated_root和csr_allow_apple_internal是常见的选项，这些选项可能会破坏用户的操作系统更新\n\n您可以选择不同的值来启用或禁用sip的某些标志。一些有用的工具可以帮助你解决这些问题，bitmaskdecode 和 csrstat. 常见值如下(字节为你进行了十六进制交换，注意它们在 nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config):\n\n * 00000000 - sip完全启用(0x0)。\n * 03000000 - 禁用kext签名(0x1)和文件系统保护(0x2)。\n * ff030000 - 禁用所有macos high sierra中的标志 (0x3ff).\n * ff070000 - 禁用所有 macos mojave中的标志 and in macos catalina (0x7ff) 因为苹果公司为可执行策略引入了一个值。\n * ff0f0000 - 禁用macos big sur (0xfff)中的所有标志，该标志具有另一个新的身份验证root标志.\n\n注意:使用opencore禁用sip与clover有很大不同，特别是nvram变量不会被覆盖，除非在 delete 部分明确告知。因此，如果您已经通过opencore或macos设置了一次sip，则必须覆盖该变量:\n\n * nvram -> delete -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config\n\n\n\n\n# 写入macos系统分区\n\n在macos catalina及更新版本中，苹果将操作系统和用户数据分成了两个卷，其中系统卷默认是只读的。为了使这些驱动器可写，我们需要做以下几件事:\n\n*注意:如果系统分区被修改了，使用securebootmodel的用户可能会进入recoveryos引导循环。要解决这个问题，请重置nvram并将securebootmodel设置为disabled\n\nmacos catalina\n\n 1. 禁用sip\n 2. 挂载驱动器可写 (在终端运行 sudo mount -uw /)\n\nmacos big sur\n\n 1. 禁用sip\n 2. 将驱动器挂载为可写(参见下面的命令链接)\n\n * *注意:由于操作系统更新在macos big sur和更新的工作方式，更改系统卷实际上会破坏操作系统更新。请谨慎编辑\n\n基于苹果kdk文档的命令:\n\n# 首先，为您的驱动器创建一个挂载点\nmkdir ~/livemount\n\n# 接下来，找到您的系统卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到我们的系统卷是disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# 挂载驱动器(即：disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# 现在您可以自由地对系统卷进行任何编辑\n\n# 如果你编辑了 s*/l*/kernel, s*/l*/extensions 或 l*/extensions,\n# 您将需要重建内核缓存\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# 最后，编辑完系统卷之后，我们需要创建一个新的快照\nsudo bless --folder ~/livemount/system/library/coreservices --bootefi --create-snapshot\n\n\n\n# 回滚apfs快照\n\n使用macos big sur，现在对系统卷进行快照，以便在密封损坏导致系统更新中断的情况下进行回滚。由于每次操作系统更新都会创建新的快照，我们也有相当多的数据需要回滚。\n\n要回滚，你首先需要重新启动到恢复分区，然后选择“从时间机器备份恢复”:\n\n\n\n * credit to lifewire for image\n\n\n# apple watch解锁问题\n\n对于那些有 apple watch 解锁问题的人，请验证以下内容:\n\n * 你有一个支持低功耗蓝牙(4.0+)的苹果无线网卡\n * 你的手表和mac是用同一个账户登录的\n * iservices工作正常(例如:imessage)\n * 在系统首选项的安全和隐私设置下，有一个用apple watch解锁的选项\n\n\n\n如果满足以上条件，并且你仍然有解锁问题，我们建议你查看以下指南:\n\n * 修复自动解锁\n\n\n# hdmi上的4k igpu输出问题\n\n对于带有hdmi 2.0接口但存在分辨率问题的机器，请验证以下内容:\n\n * 4k输出在windows上可以正常工作\n * 显示器显式设置为hdmi 2.0\n   * 如果使用hdmi到displayport转换器，请确保显示器设置为displayport 1.2或更高\n * 确保已分配足够的igpu内存\n   * 对于broadwell及更新版本，预计会分配64mb内存\n   * 依赖于whatevergreen的framebuffer-stolenmem属性的机器应该知道，这可能会导致4k输出问题。请确保您可以将igpu的内存设置为64mb，以允许您删除这些属性\n * 笔记本电脑和许多台式机用户可能需要这个引导参数:\n   * -cdfon\n\n关于所有其他故障排除，请参考whatevergreen的英特尔文档',charsets:{cjk:!0}},{title:"用户空间问题",frontmatter:{},regularPath:"/troubleshooting/extended/userspace-issues.html",relativePath:"troubleshooting/extended/userspace-issues.md",key:"v-4e3122ad",path:"/troubleshooting/extended/userspace-issues.html",headers:[{level:2,title:"俄文的macOS安装程序",slug:"俄文的macos安装程序",normalizedTitle:"俄文的macos安装程序",charIndex:35},{level:2,title:"macOS安装程序损坏",slug:"macos安装程序损坏",normalizedTitle:"macos安装程序损坏",charIndex:51},{level:2,title:"卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3...",slug:"卡在或靠近-ioconsoleusers-gioscreenlock-giolockstate-3",normalizedTitle:"卡在或靠近 ioconsoleusers: gioscreenlock.../giolockstate (3...",charIndex:66},{level:2,title:"笔记本电脑上的乱码屏幕",slug:"笔记本电脑上的乱码屏幕",normalizedTitle:"笔记本电脑上的乱码屏幕",charIndex:127},{level:2,title:"笔记本电脑和 AIOs上在 IOConsoleUsers: gIOScreenLock... 之后黑屏…",slug:"笔记本电脑和-aios上在-ioconsoleusers-gioscreenlock-之后黑屏",normalizedTitle:"笔记本电脑和 aios上在 ioconsoleusers: gioscreenlock... 之后黑屏…",charIndex:142},{level:2,title:"在 Navi 上 IOConsoleUsers: gIOScreenLock... 后黑屏",slug:"在-navi-上-ioconsoleusers-gioscreenlock-后黑屏",normalizedTitle:"在 navi 上 ioconsoleusers: gioscreenlock... 后黑屏",charIndex:198},{level:2,title:"在macOS安装程序中停留在剩余30秒",slug:"在macos安装程序中停留在剩余30秒",normalizedTitle:"在macos安装程序中停留在剩余30秒",charIndex:247},{level:2,title:"数据和隐私屏幕显示后 15h/16h重启CPU",slug:"数据和隐私屏幕显示后-15h-16h重启cpu",normalizedTitle:"数据和隐私屏幕显示后 15h/16h重启cpu",charIndex:270},{level:2,title:"macOS在登录前就冻结了",slug:"macos在登录前就冻结了",normalizedTitle:"macos在登录前就冻结了",charIndex:297},{level:2,title:"MediaKit报告空间不足",slug:"mediakit报告空间不足",normalizedTitle:"mediakit报告空间不足",charIndex:314},{level:2,title:"磁盘工具无法擦除数据",slug:"磁盘工具无法擦除数据",normalizedTitle:"磁盘工具无法擦除数据",charIndex:332},{level:2,title:"磁盘实用程序中没有显示SATA驱动器",slug:"磁盘实用程序中没有显示sata驱动器",normalizedTitle:"磁盘实用程序中没有显示sata驱动器",charIndex:346},{level:2,title:"卡在剩余2分钟",slug:"卡在剩余2分钟",normalizedTitle:"卡在剩余2分钟",charIndex:368},{level:2,title:"无法联系恢复服务器",slug:"无法联系恢复服务器",normalizedTitle:"无法联系恢复服务器",charIndex:379},{level:2,title:"Big Sur上键盘和鼠标坏了",slug:"big-sur上键盘和鼠标坏了",normalizedTitle:"big sur上键盘和鼠标坏了",charIndex:392},{level:2,title:"卡在您的Mac需要更新固件才能安装到此卷上",slug:"卡在您的mac需要更新固件才能安装到此卷上",normalizedTitle:"卡在您的mac需要更新固件才能安装到此卷上",charIndex:411}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"俄文的macOS安装程序 macOS安装程序损坏 卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3... 笔记本电脑上的乱码屏幕 笔记本电脑和 AIOs上在 IOConsoleUsers: gIOScreenLock... 之后黑屏… 在 Navi 上 IOConsoleUsers: gIOScreenLock... 后黑屏 在macOS安装程序中停留在剩余30秒 数据和隐私屏幕显示后 15h/16h重启CPU macOS在登录前就冻结了 MediaKit报告空间不足 磁盘工具无法擦除数据 磁盘实用程序中没有显示SATA驱动器 卡在剩余2分钟 无法联系恢复服务器 Big Sur上键盘和鼠标坏了 卡在您的Mac需要更新固件才能安装到此卷上",content:'# 用户空间问题\n\n关于启动安装程序和加载GUI的问题。\n\n\n\n * 俄文的macOS安装程序\n * macOS安装程序损坏\n * 卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n * 笔记本电脑上的乱码屏幕\n * 笔记本电脑和 AIOs上在 IOConsoleUsers: gIOScreenLock... 之后黑屏…\n * 在 Navi 上 IOConsoleUsers: gIOScreenLock... 后黑屏\n * 在macOS安装程序中停留在剩余30秒\n * 数据和隐私屏幕显示后 15h/16h重启CPU\n * macOS在登录前就冻结了\n * MediaKit报告空间不足\n * 磁盘工具无法擦除数据\n * 磁盘实用程序中没有显示SATA驱动器\n * 卡在剩余2分钟\n * 无法联系恢复服务器\n * Big Sur上键盘和鼠标坏了\n * 卡在您的Mac需要更新固件才能安装到此卷上\n\n\n\n\n# 俄文的macOS安装程序\n\n默认的样例配置是俄语的，因为俄罗斯人统治着黑苹果世界，检查NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82下的prev-lang:kbd值。中文简体: zh-Hans:252，冒号前面的zh-Hans表示：简体中文，而冒号后面的252表示所使用的苹果键盘布局。关于键盘布局的完整列表可以在AppleKeyboardLayouts.txt中找到。\n\n您可能还需要在引导选择程序中重置NVRAM\n\n * 注意:众所周知，Thinkpad笔记本电脑在OpenCore重置NVRAM后会出现半砖现象，我们建议通过更新这些机器的BIOS来重置NVRAM。\n\n还是不管用?好吧，是时候让大人物上场了。我们将强制删除该属性，并让OpenCore重建它:\n\nNVRAM -> Delete -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> Item 0 然后设置它的类型为 String 和值 prev-lang:kbd\n\n\n\n\n# macOS安装程序损坏\n\n如果你在2019年10月之前下载了macOS，你可能已经有一个过期的macOS安装程序证书，有两种方法可以解决这个问题:\n\n * 下载最新版本的macOS\n * 将终端日期更改为证书有效日期\n\n对于后者:\n\n * 断开所有网络设备(以太网，关闭WiFi)\n * 在恢复终端设置为2019年9月1日:\n\ndate 0901000019\n\n\n\n# 卡在或靠近 IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n\n这是在GPU正确初始化之前，请验证以下内容:\n\n * GPU支持UEFI (GTX 7XX/2013+)\n * BIOS中CSM是关闭的\n * 强制使用PCIe 3.0链路速度\n * 如果运行iGPU，请仔细检查ig-platform-id和device-id是否有效。\n   * 桌面UHD 630可能需要使用 00009B3E 代替\n * 尝试各种 WhateverGreen 修复\n   * -igfxmlr 导参数。这也可以表现为 "Divide by Zero" 错误。\n * 在10.15.4及更新版本中，Coffee Lake iGPU用户可能还需要igfxonln=1\n\n\n# 笔记本电脑上的乱码屏幕\n\n在UEFI设置中启用CSM。这可能显示为 "Boot legacy ROMs" 或其他 legacy 设置.\n\n\n# 笔记本电脑和 AIOs上在 IOConsoleUsers: gIOScreenLock... 之后黑屏…\n\n验证以下内容:\n\n * SSDT-PNLF已安装(即 EFI/OC/ACPI 以及配置 config.plist -> ACPI -> Add)\n * iGPU属性在 DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0)下正确设置\n * Coffee Lake和较新的笔记本电脑，在启动参数中添加 -igfxblr\n   * 或者，添加 enable-backlight-registers-fix | Data | 01000000 到 PciRoot(0x0)/Pci(0x2,0x0)\n\n此外，请验证卡在或接近 IOConsoleUsers: gIOScreenLock...中提到的问题\n\n\n# 在 Navi 上 IOConsoleUsers: gIOScreenLock... 后黑屏\n\n * 在引导参数中添加 agdpmod=pikera\n * 在不同的显示输出之间切换\n * 尝试运行MacPro7,1 SMBIOS 引导参数 agdpmod=ignore\n\n对于MSI Navi用户，您需要应用这里提到的补丁:安装程序不能与5700xt# 901工作\n\n具体来说，在Kernel -> Patch下添加以下条目:\n\nBase:\nComment: Navi VBIOS Bug Patch\nCount: 1\nEnabled: YES\nFind: 4154592C526F6D2300\nIdentifier: com.apple.kext.AMDRadeonX6000Framebuffer\nLimit: 0\nMask:\nMinKernel:\nMaxKernel:\nReplace: 414D442C526F6D2300\nReplaceMask:\nSkip: 0\n\n\n\n# 在macOS安装程序中停留在剩余30秒\n\n这可能是由于错误或完全缺少 NullCPUPowerManagement，一个托管在 AMD OSX 的香草指南是损坏的。去喊香妮把它修好。要解决这个问题，请从Kernel -> Add和EFI/OC/ kext中移除 NullCPUPowerManagement，然后在Kernel -> Emulate中启用DummyPowerManagement。\n\n\n# 数据和隐私屏幕显示后 15h/16h重启CPU\n\n请遵循更新2后的指示:修复数据和隐私重启\n\n\n# macOS在登录前就冻结了\n\n这是一个常见的TSC错误的例子，对于大多数系统添加CpuTscSync\n\n对于Skylake-X，包括华硕和EVGA在内的许多固件都不会写入所有内核。所以我们需要在冷启动和唤醒时使用TSCAdjustReset重置TSC。编译版本可以在这里找到:TSCAdjustReset.kext。请注意，您必须打开kext("显示包内容"在finder中，Contents -> Info.plist)并更改Info plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber为CPU线程数从0开始(i9 7980xe 18核心将是35，因为它总共有36个线程)\n\n查看TSC问题的最常见方法:\n\n方案 1   方案 2\n       \n\n\n# MediaKit报告空间不足\n\n这个错误是由于EFI空间太小,默认Windows将创建一个100 mb EFI而macOS希望200 mb。要解决这个问题，你有两种方法:\n\n * 将硬盘的EFI分区扩展到200MB(参见谷歌如何操作)\n * 格式化整个驱动器，而不仅仅是分区\n   * 注意默认磁盘工具只显示分区，按Cmd/Win+2显示所有设备(或者你可以按查看按钮)\n\n默认   显示所有设备(CMD+2)\n     \n\n\n# 磁盘工具无法擦除数据\n\n这是5个问题中的1个(或多个):\n\n * 格式化分区而不是驱动器，参见MediaKit报告空间不足\n * DiskUtility有一个奇怪的bug，它会在第一次擦除时失败，然后尝试再次擦除\n * BIOS中的SATA热插拔支持导致问题(尝试禁用此选项)\n * 旧固件，确保驱动器使用最新的固件\n * 最后，你可能只是硬盘坏了\n\n\n# 磁盘实用程序中没有显示SATA驱动器\n\n * 确保bios中的SATA模式是AHCI\n * 某些SATA控制器可能没有被macOS官方支持，在这种情况下，你需要获取 CtlnaAHCIPort.kext\n   * 对于非常传统的SATA控制器， AHCIPortInjector.kext 可能更合适。\n\n\n# 卡在剩余2分钟\n\n\n\n此错误与 macOS 为系统下次启动编写特定 NVRAM 变量的阶段直接相关，因此当出现围绕NVRAM的问题时，它将在此处停止。\n\n为了解决这个问题，我们有几个选择:\n\n * 300系列英特尔修复(即Z390):\n   * SSDT-PMC\n * 其他人可以在config.plist中设置如下:\n   * LegacyEnable -> YES\n   * LegacyOverwrite -> YES\n   * WriteFlash -> YES\n\n\n# 无法联系恢复服务器\n\n如果你是在Windows或Linux上安装的，那么这意味着你的USB安装程序是基于恢复的。这意味着只有一小部分macOS安装程序在磁盘上，而其余部分必须通过安装程序从苹果服务器下载。我们没有包含完整安装指南的原因是，不稳定的HFS驱动程序和其他实用程序通常会导致数据损坏。\n\n要解决这个错误，你有几个选项:\n\n * 确保你有可用的以太网或WiFi连接\n   * 在安装程序的“工具”标题下打开“网络工具”，看看你的网卡是否显示出来\n     * 如果你的网卡没有显示，很可能是你使用了不正确的网络kext\n       * 请参考这里: 网卡 Kexts 和查找你的硬件\n     * 如果网卡显示，接下来在安装程序的终端运行ping -c3 www.baidu.com以确保网络连接正常\n       * 如果没有显示，说明你的网络或kext出问题了\n         * 如果新版本的硬件有奇怪的bug，我们建议尝试旧版本的kext\n       * 如果它确实返回了一些东西，那么问题就在苹果这边。不幸的是，您只能换个时间，再次尝试安装。\n\n检查网卡   PING\n       \n\n\n# Big Sur上键盘和鼠标坏了\n\n对于某些旧系统(如Core2 Duo/2010及更老版本)，你可能会注意到，当USB端口工作时，基于hid的设备(如键盘和鼠标)可能会坏掉。为了解决这个问题，添加以下补丁:\n\nIOHIDFamily 补丁\n\nconfig.plist -> Kernel -> Patch:\n\nKEY           TYPE      VALUE\nBase          String    _isSingleUser\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    com.apple.iokit.IOHIDFamily\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B801000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\nSource\n\n\n# 卡在您的Mac需要更新固件才能安装到此卷上\n\n如果系统提示您更新固件以安装APFS卷，这可能表明是一个过时的SMBIOS表。首先，验证以下几点:\n\n * 你已经启用了PlatformInfo -> Automatic\n * UpdateSMBIOSMode 设置为 Create\n   * 确保禁用了CustomSMBIOSGuid\n   * 对于Dell和VAIO机器，请确保启用了CustomSMBIOSGuid，并将UpdateSMBIOSMode设置为Custom\n     * CustomSMBIOSGuid和UpdateSMBIOSMode应该始终相互串联\n * 使用这个版本的macOS支持的SMBIOS\n   * 即：你不使用“不兼容检查”\n * 你正在使用最新版本的OpenCore\n\n如果您仍然收到此错误，那么可能在OpenCore本身中有一些过时的SMBIOS信息。我们建议更改为类似的SMBIOS，看看这个问题是否得到解决。要获得SMBIOS的完整列表，请参阅:选择正确的SMBIOS',normalizedContent:'# 用户空间问题\n\n关于启动安装程序和加载gui的问题。\n\n\n\n * 俄文的macos安装程序\n * macos安装程序损坏\n * 卡在或靠近 ioconsoleusers: gioscreenlock.../giolockstate (3...\n * 笔记本电脑上的乱码屏幕\n * 笔记本电脑和 aios上在 ioconsoleusers: gioscreenlock... 之后黑屏…\n * 在 navi 上 ioconsoleusers: gioscreenlock... 后黑屏\n * 在macos安装程序中停留在剩余30秒\n * 数据和隐私屏幕显示后 15h/16h重启cpu\n * macos在登录前就冻结了\n * mediakit报告空间不足\n * 磁盘工具无法擦除数据\n * 磁盘实用程序中没有显示sata驱动器\n * 卡在剩余2分钟\n * 无法联系恢复服务器\n * big sur上键盘和鼠标坏了\n * 卡在您的mac需要更新固件才能安装到此卷上\n\n\n\n\n# 俄文的macos安装程序\n\n默认的样例配置是俄语的，因为俄罗斯人统治着黑苹果世界，检查nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82下的prev-lang:kbd值。中文简体: zh-hans:252，冒号前面的zh-hans表示：简体中文，而冒号后面的252表示所使用的苹果键盘布局。关于键盘布局的完整列表可以在applekeyboardlayouts.txt中找到。\n\n您可能还需要在引导选择程序中重置nvram\n\n * 注意:众所周知，thinkpad笔记本电脑在opencore重置nvram后会出现半砖现象，我们建议通过更新这些机器的bios来重置nvram。\n\n还是不管用?好吧，是时候让大人物上场了。我们将强制删除该属性，并让opencore重建它:\n\nnvram -> delete -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> item 0 然后设置它的类型为 string 和值 prev-lang:kbd\n\n\n\n\n# macos安装程序损坏\n\n如果你在2019年10月之前下载了macos，你可能已经有一个过期的macos安装程序证书，有两种方法可以解决这个问题:\n\n * 下载最新版本的macos\n * 将终端日期更改为证书有效日期\n\n对于后者:\n\n * 断开所有网络设备(以太网，关闭wifi)\n * 在恢复终端设置为2019年9月1日:\n\ndate 0901000019\n\n\n\n# 卡在或靠近 ioconsoleusers: gioscreenlock.../giolockstate (3...\n\n这是在gpu正确初始化之前，请验证以下内容:\n\n * gpu支持uefi (gtx 7xx/2013+)\n * bios中csm是关闭的\n * 强制使用pcie 3.0链路速度\n * 如果运行igpu，请仔细检查ig-platform-id和device-id是否有效。\n   * 桌面uhd 630可能需要使用 00009b3e 代替\n * 尝试各种 whatevergreen 修复\n   * -igfxmlr 导参数。这也可以表现为 "divide by zero" 错误。\n * 在10.15.4及更新版本中，coffee lake igpu用户可能还需要igfxonln=1\n\n\n# 笔记本电脑上的乱码屏幕\n\n在uefi设置中启用csm。这可能显示为 "boot legacy roms" 或其他 legacy 设置.\n\n\n# 笔记本电脑和 aios上在 ioconsoleusers: gioscreenlock... 之后黑屏…\n\n验证以下内容:\n\n * ssdt-pnlf已安装(即 efi/oc/acpi 以及配置 config.plist -> acpi -> add)\n * igpu属性在 deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0)下正确设置\n * coffee lake和较新的笔记本电脑，在启动参数中添加 -igfxblr\n   * 或者，添加 enable-backlight-registers-fix | data | 01000000 到 pciroot(0x0)/pci(0x2,0x0)\n\n此外，请验证卡在或接近 ioconsoleusers: gioscreenlock...中提到的问题\n\n\n# 在 navi 上 ioconsoleusers: gioscreenlock... 后黑屏\n\n * 在引导参数中添加 agdpmod=pikera\n * 在不同的显示输出之间切换\n * 尝试运行macpro7,1 smbios 引导参数 agdpmod=ignore\n\n对于msi navi用户，您需要应用这里提到的补丁:安装程序不能与5700xt# 901工作\n\n具体来说，在kernel -> patch下添加以下条目:\n\nbase:\ncomment: navi vbios bug patch\ncount: 1\nenabled: yes\nfind: 4154592c526f6d2300\nidentifier: com.apple.kext.amdradeonx6000framebuffer\nlimit: 0\nmask:\nminkernel:\nmaxkernel:\nreplace: 414d442c526f6d2300\nreplacemask:\nskip: 0\n\n\n\n# 在macos安装程序中停留在剩余30秒\n\n这可能是由于错误或完全缺少 nullcpupowermanagement，一个托管在 amd osx 的香草指南是损坏的。去喊香妮把它修好。要解决这个问题，请从kernel -> add和efi/oc/ kext中移除 nullcpupowermanagement，然后在kernel -> emulate中启用dummypowermanagement。\n\n\n# 数据和隐私屏幕显示后 15h/16h重启cpu\n\n请遵循更新2后的指示:修复数据和隐私重启\n\n\n# macos在登录前就冻结了\n\n这是一个常见的tsc错误的例子，对于大多数系统添加cputscsync\n\n对于skylake-x，包括华硕和evga在内的许多固件都不会写入所有内核。所以我们需要在冷启动和唤醒时使用tscadjustreset重置tsc。编译版本可以在这里找到:tscadjustreset.kext。请注意，您必须打开kext("显示包内容"在finder中，contents -> info.plist)并更改info plist -> iokitpersonalities -> iopropertymatch -> iocpunumber为cpu线程数从0开始(i9 7980xe 18核心将是35，因为它总共有36个线程)\n\n查看tsc问题的最常见方法:\n\n方案 1   方案 2\n       \n\n\n# mediakit报告空间不足\n\n这个错误是由于efi空间太小,默认windows将创建一个100 mb efi而macos希望200 mb。要解决这个问题，你有两种方法:\n\n * 将硬盘的efi分区扩展到200mb(参见谷歌如何操作)\n * 格式化整个驱动器，而不仅仅是分区\n   * 注意默认磁盘工具只显示分区，按cmd/win+2显示所有设备(或者你可以按查看按钮)\n\n默认   显示所有设备(cmd+2)\n     \n\n\n# 磁盘工具无法擦除数据\n\n这是5个问题中的1个(或多个):\n\n * 格式化分区而不是驱动器，参见mediakit报告空间不足\n * diskutility有一个奇怪的bug，它会在第一次擦除时失败，然后尝试再次擦除\n * bios中的sata热插拔支持导致问题(尝试禁用此选项)\n * 旧固件，确保驱动器使用最新的固件\n * 最后，你可能只是硬盘坏了\n\n\n# 磁盘实用程序中没有显示sata驱动器\n\n * 确保bios中的sata模式是ahci\n * 某些sata控制器可能没有被macos官方支持，在这种情况下，你需要获取 ctlnaahciport.kext\n   * 对于非常传统的sata控制器， ahciportinjector.kext 可能更合适。\n\n\n# 卡在剩余2分钟\n\n\n\n此错误与 macos 为系统下次启动编写特定 nvram 变量的阶段直接相关，因此当出现围绕nvram的问题时，它将在此处停止。\n\n为了解决这个问题，我们有几个选择:\n\n * 300系列英特尔修复(即z390):\n   * ssdt-pmc\n * 其他人可以在config.plist中设置如下:\n   * legacyenable -> yes\n   * legacyoverwrite -> yes\n   * writeflash -> yes\n\n\n# 无法联系恢复服务器\n\n如果你是在windows或linux上安装的，那么这意味着你的usb安装程序是基于恢复的。这意味着只有一小部分macos安装程序在磁盘上，而其余部分必须通过安装程序从苹果服务器下载。我们没有包含完整安装指南的原因是，不稳定的hfs驱动程序和其他实用程序通常会导致数据损坏。\n\n要解决这个错误，你有几个选项:\n\n * 确保你有可用的以太网或wifi连接\n   * 在安装程序的“工具”标题下打开“网络工具”，看看你的网卡是否显示出来\n     * 如果你的网卡没有显示，很可能是你使用了不正确的网络kext\n       * 请参考这里: 网卡 kexts 和查找你的硬件\n     * 如果网卡显示，接下来在安装程序的终端运行ping -c3 www.baidu.com以确保网络连接正常\n       * 如果没有显示，说明你的网络或kext出问题了\n         * 如果新版本的硬件有奇怪的bug，我们建议尝试旧版本的kext\n       * 如果它确实返回了一些东西，那么问题就在苹果这边。不幸的是，您只能换个时间，再次尝试安装。\n\n检查网卡   ping\n       \n\n\n# big sur上键盘和鼠标坏了\n\n对于某些旧系统(如core2 duo/2010及更老版本)，你可能会注意到，当usb端口工作时，基于hid的设备(如键盘和鼠标)可能会坏掉。为了解决这个问题，添加以下补丁:\n\niohidfamily 补丁\n\nconfig.plist -> kernel -> patch:\n\nkey           type      value\nbase          string    _issingleuser\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    com.apple.iokit.iohidfamily\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b801000000c3\nreplacemask   data      \nskip          integer   0\n\nsource\n\n\n# 卡在您的mac需要更新固件才能安装到此卷上\n\n如果系统提示您更新固件以安装apfs卷，这可能表明是一个过时的smbios表。首先，验证以下几点:\n\n * 你已经启用了platforminfo -> automatic\n * updatesmbiosmode 设置为 create\n   * 确保禁用了customsmbiosguid\n   * 对于dell和vaio机器，请确保启用了customsmbiosguid，并将updatesmbiosmode设置为custom\n     * customsmbiosguid和updatesmbiosmode应该始终相互串联\n * 使用这个版本的macos支持的smbios\n   * 即：你不使用“不兼容检查”\n * 你正在使用最新版本的opencore\n\n如果您仍然收到此错误，那么可能在opencore本身中有一些过时的smbios信息。我们建议更改为类似的smbios，看看这个问题是否得到解决。要获得smbios的完整列表，请参阅:选择正确的smbios',charsets:{cjk:!0}},{title:"系统调试:深入",frontmatter:{},regularPath:"/troubleshooting/kernel-debugging.html",relativePath:"troubleshooting/kernel-debugging.md",key:"v-ca48b55a",path:"/troubleshooting/kernel-debugging.html",headers:[{level:2,title:"EFI 设置",slug:"efi-设置",normalizedTitle:"efi 设置",charIndex:94},{level:2,title:"Config.plist 设置",slug:"config-plist-设置",normalizedTitle:"config.plist 设置",charIndex:104},{level:3,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:125},{level:3,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:135},{level:2,title:"串行设置(可选)",slug:"串行设置-可选",normalizedTitle:"串行设置(可选)",charIndex:144},{level:3,title:"硬件设置",slug:"硬件设置",normalizedTitle:"硬件设置",charIndex:158},{level:3,title:"CoolTerm 设置",slug:"coolterm-设置",normalizedTitle:"coolterm 设置",charIndex:168},{level:2,title:"内核调试工具包(可选)",slug:"内核调试工具包-可选",normalizedTitle:"内核调试工具包(可选)",charIndex:183},{level:3,title:"KDK在已安装的操作系统上",slug:"kdk在已安装的操作系统上",normalizedTitle:"kdk在已安装的操作系统上",charIndex:200},{level:3,title:"卸载KDK",slug:"卸载kdk",normalizedTitle:"卸载kdk",charIndex:219}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"EFI 设置 Config.plist 设置 Misc NVRAM 串行设置(可选) 硬件设置 CoolTerm 设置 内核调试工具包(可选) KDK在已安装的操作系统上 卸载KDK",content:"# 系统调试:深入\n\n本节将更深入地讨论故障排除，特别关注具有适当调试输出和可选串行设置的更低级的调试。\n\n注意:99%的用户不需要这种级别的调试，这只适用于核心或极端情况。\n\n\n\n * EFI 设置\n * Config.plist 设置\n   * Misc\n   * NVRAM\n * 串行设置(可选)\n   * 硬件设置\n   * CoolTerm 设置\n * 内核调试工具包(可选)\n   * KDK在已安装的操作系统上\n   * 卸载KDK\n\n\n\n\n# EFI 设置\n\n在大多数情况下，只需要相当小的更改。我们主要推荐的是DEBUG版本的OpenCore和所有的kext。这可以帮助您获得所有必要的数据，有关OpenCore调试的更多详细信息，请参阅这里: OpenCore调试\n\n除了使用OpenCore和kexts的DEBUG版本，这些工具也可以提供很大的帮助:\n\n * DebugEnhancer.kext\n   \n   * 极大地帮助内核调试，同时还修补了 kern.msgbuf to 10485760 ，并允许更大的内核日志。\n   * 注意这个kext不能与内核初始化一起启动，所以早期的日志不会被修补，直到kext在PCI配置阶段之前加载\n\n * SSDT-DBG\n   \n   * 启用ACPI表中的调试语句，帮助操作系统中的ACPI事件调试\n   * 注意你需要编译SSDT\n\n\n# Config.plist 设置\n\n对于串行设置，OpenCore实际上是非常直接的。\n\n\n# Misc\n\n# Serial\n\n * Init: YES\n   * 从 OpenCore 初始化串口\n   * 需要将OpenCore日志发送到串口\n\n# Debug\n\n * Target: 67\n   * 启用OpenCore调试输出\n   * Target = 75添加额外的串行输出标志(0x08)，如果你计划使用串行\n   * 你可以在这里计算你自己的值:OpenCore调试\n\n\n# NVRAM\n\n# boot-args\n\n在这里，我们要设置一些变量来帮助我们调试输出，对于我们来说，我们将使用以下的boot-args:\n\n-v keepsyms=1 debug=0x12a msgbuf=1048576\n\n\n现在让我们来看看每个arg的作用:\n\n * -v\n   * 启用详细输出\n * keepsyms=1\n   * 确保在内核发生严重故障时保留符号，这对故障排除非常有帮助\n * debug=0x12a\n   * Combination of DB_PRT (0x2), DB_KPRT (0x8), DB_SLOG (0x20), and DB_LOG_PI_SCRN (0x100)\n   * 最新版本XNU的完整列表可以在这里找到: debug.h\n * msgbuf=1048576\n   * 设置内核的消息缓冲区大小，这有助于在启动期间获得正确的日志\n   * 1048576 is 1MB(/1024^2), 如果需要可以更大\n   * 注意：DebugEnhancer kext不需要，但是对于早期的内核日志，它仍然是必需的\n\n其他有用的boot-args:\n\n根据你正在调试的内容，你可能还会发现这些boot-args非常有用:\n\n * -liludbgall\n   * 在Lilu和任何其他插件上启用调试，但请注意，这需要调试版本的kext\n * io=0xff\n   * 启用IOKit调试，输出更大。请注意，此参数的日志量将非常大，并将降低系统的速度。尤其是在启动的时候。\n * igdebug=0xff\n   * 开启iGPU相关的调试，在使用iGPU系统时很有用\n * serial=5\n   * 将输出重定向到串行如果你计划使用串行\n   * 推荐用于PCI配置之前的早期内核输出\n * acpi_layer=0x8\n   * 启用ACPI_TABLES调试，参见acoutput.h 了解更多信息\n   * 0xFFFFFFFF 也可以启用所有层\n * acpi_level=0x2\n   * 设置ACPI_LV_DEBUG_OBJECT调试，参见 acoutput.h 了解更多信息\n   * 0xFFFF5F 也可以表示 ACPI_ALL_COMPONENTS\n\n\n# 串行设置(可选)\n\n * 硬件设置\n * EFI 设置\n * Config.plist 设置\n\n虽然是可选的，但串行仍然对抓取所有的信息超级有帮助。这也是正确记录超早期内核崩溃的唯一方法(例如在[EB|# log:EXITBS:START]之后的事情)\n\n对于这个设置，你需要一些东西:\n\n * 测试机上的串行头/端口\n * 串行到串行或串行到usb电缆\n * 第二台机器接收串行日志记录(使用串行或USB)\n * 软件监控串行输出\n   * 在本指南中，我们将使用 CoolTerm ,因为它支持macOS, Linux, Windows甚至树莓派\n   * screen 和其他方法也支持\n\n\n# 硬件设置\n\n对于这个例子，我们将使用华硕X299-E Strix板，它有一个串行头。要确认您的单板是否自带串口，请查看单板的所有者或服务手册，并搜索串口/COM端口:\n\n\n\n正如你所看到的，我们在主板的底部有一个COM端口，如果你不使用9/10引脚串行头到DB9适配器，甚至为我们手动连接我们的串行引脚提供了一个图表。\n\n或者，一些机器在后IO上带有DB9串行端口，例如这台Dell Optiplex 780 SFF(注意VGA和串行不是同一个连接器):\n\n对于我的X299设置，我使用一个简单的 串行头到DB9, 然后一个 DB9到USB RS 232适配器 最后终止在我的笔记本电脑:\n\nSERIAL HEADER TO DB9   DB9 TO USB RS 232 ADAPTER\n                       \n\nOpenCore手册通常建议CP21202-based UART设备:\n\n> 要在引导期间获得日志，可以使用串口调试。在目标中打开串口调试，例如0xB表示onscreen with Serial。OpenCore使用115200波特率，8个数据位，无奇偶校验和1个停止位。对于macOS，最好的选择是基于cp2102的UART设备。将主板TX连接到USB UART RX，主板GND连接到USB UART GND。使用屏幕工具获取输出，或者下载GUI软件，比如CoolTerm。 注意:在一些主板(可能是USB UART加密狗)PIN命名可能不正确。GND与RX交换是非常常见的，因此您必须将主板“TX”连接到USB UART GND，并将主板“GND”连接到USB UART RX。\n\n重要提醒:不要忘记在BIOS中启用串口，大多数主板默认情况下将禁用它\n\n\n# CoolTerm 设置\n\n现在让我们启动CoolTerm并设置一些选项。当您打开CoolTerm时，您可能会看到一个简单的窗口。在这里选择选项条目:\n\n\n\n这里给出了很多选项，但我们主要关心的是:\n\n * Port: 确保与您的串行控制器匹配。\n * Baudrate = 115200\n * Data Bits = 8\n * Parity = 无\n * Stop Bit = 1\n\n接下来，保存这些设置，并选择Connect条目。这将为你提供一个来自serial的实时日志:\n\n\n\n要记录，只需前往 Connections -> Capture to Text/Binary File -> Start...(Cmd+R):\n\n\n\n\n# 内核调试工具包(可选)\n\n * KDK on an Installed OS\n * Uninstalling the KDK\n\n内核调试工具包(kdk)是一种从内核和核心kext获取更多日志信息的好方法，kdk具体来说是苹果自己提供的macOS核心基础的调试版本。它们包括更多的日志记录和断言，允许您更直接地查看设置中的问题。但是请注意，我们不会讨论桥接调试或 lldb 的用法。\n\n警告: 在工作机器上安装kdk可能会导致操作系统更新和安装出现问题。请在专用的macOS安装上调试，以避免数据丢失\n\n首先，我们至少需要一个来自苹果的免费开发者帐户 一旦您注册了最低限度的免费层，您现在可以从更多下载页面:\n\n * 注:免费等级将仅限于发布kdk，只有测试版kdk提供给付费开发者帐户\n * 注2:苹果早在OS X 10.5和Leopard时就有kdk了，所以不用担心你的操作系统不受支持\n\n\n\n要确定你需要哪个KDK版本的测试版，在终端中运行以下命令:\n\nsw_vers | grep BuildVersion\n\n\n为此，我将下载内核调试套件11.3 build 20E5186d。下载完成后，挂载磁盘镜像，就可以找到KDK安装程序了。默认情况下，KDK只会为了“执行双机调试”而安装自己，并且默认情况下不会为主机内核调试提供任何额外的好处。\n\n\n# KDK在已安装的操作系统上\n\n要在主机上启用调试，您需要执行以下操作:\n\n 1. 运行 KDK 安装 pkg\n 2. 关闭SIP协议(OS X 10.11+)\n 3. 以可写方式挂载根分区(macOS 10.15+)\n 4. 安装调试内核和kext\n 5. 更新boot-args\n 6. 重新启动并检查您的工作\n\n# 1. 运行 KDK 安装 pkg\n\n正常运行pkg即可:\n\n\n\n安装完成后，你可以在/Library/Developer/KDKs目录下找到KDK组件，例如调试内核:\n\n\n\n# 2. 禁用SIP\n\n * 适用于OS X 10.11, El Capitan和更新版本\n\n禁用SIP，用户有两种选择:\n\n * 通过恢复禁用\n\n * 通过config.plist禁用\n\n一般情况下，我们强烈建议恢复，以便通过NVRAM复位轻松恢复，但是一些用户可能需要通过NVRAM擦除禁用SIP。\n\n对于前者，只需重新启动到macOS恢复，打开终端并运行以下命令:\n\ncsrutil disable\ncsrutil authenticated-root disable # Big Sur+\n\n\n重新启动，SIP将进行相应的调整。你可以在终端中运行csrutil status来验证它是否工作。\n\n * 注意: 对于依赖OpenCore的ApECID功能的用户，请注意此 必须 被禁用才能使用KDK。\n\n# 3. 以可写方式挂载根分区\n\n * 适用于macOS 10.15，卡特琳娜及更新版本\n\n将根卷挂载为可写卷很容易，但是这个过程有点长:\n\n# Big Sur+\n# 首先，为您的驱动器创建一个挂载点\nmkdir ~/livemount\n\n# 接下来，找到您的系统卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到我们的系统卷是disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# 安装驱动(即。disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# 现在您可以自由地对系统卷进行任何编辑\n\n\n# 仅限 Catalina\nsudo mount -uw /\n\n\n# 4. 安装调试内核和kext\n\n现在我们将KDK安装到系统中:\n\n# 将KDK安装到系统卷\n# 确保替换<KDK版本>\n# 对于10.15及以上版本，用/Volumes/<Target Volume>交换live挂载\nsudo ditto /Library/Developer/KDKs/<KDK Version>/System ~/livemount/System\n\n# 重建真实的内核缓存(大苏尔及更新版本)\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# 重建内核缓存(卡特琳娜和更老的版本)\nsudo kextcache -invalidate /Volumes/<Target Volume>\n\n# 最后，一旦完成系统卷的编辑\n# 我们要创建一个新的快照(大苏尔和更新的)\nsudo bless --folder ~/livemount/System/Library/CoreServices --bootefi --create-snapshot\n\n\n# 5. 更新boot-args\n\n现在您已经完成了KDK的设置和安装，现在我们需要告诉boot.Efi使用哪个内核。你有两个选择:\n\n * kcsuffix=debug (由Big Sur移除)\n * kcsuffix=development\n * kcsuffix=kasan\n\ndevelopment参数将在Big Sur中设置新的默认调试内核，而kasan是一个更注重日志记录的内核，包含AddressSanitizer.\n\n一旦你决定了哪个内核最适合你，在config.plist中将kc后缀arg添加到boot-args中\n\n# 6. 重新启动并检查您的工作\n\n假设一切都正确地完成了，现在要重新启动，检查是否引导了正确的内核:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: kasan\n\n\n正如我们所看到的，我们成功地启动了KASAN内核。\n\n\n# 卸载KDK\n\n卸载KDK相当简单，但是如果不小心，可能会有一点破坏性。\n\n 1. 将根分区挂载为可写(macOS 10.15+)\n 2. 删除调试内核和kext\n 3. 重新启用SIP\n 4. 清除引导参数\n 5. 重新启动并检查您的工作\n\n步骤:\n\n# 1. 将根分区挂载为可写(macOS 10.15+)\n\n# Big Sur+\n# 首先，为您的驱动器创建一个挂载点\n# 上次挂载卷时仍然存在的跳过\nmkdir ~/livemount\n\n# 接下来，找到您的系统卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到我们的系统卷是disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# 挂载驱动(即.disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n\n# 仅限卡特琳娜\nsudo mount -uw /\n\n\n# 2. 删除调试内核和kext\n\n# 恢复旧快照(Big Sur+)\nsudo bless --mount ~/livemount --bootefi --last-sealed-snapshot\n\n\n# 重置内核缓存(Catalina及更老版本)\nsudo rm /System/Library/Caches/com.apple.kext.caches/Startup/kernelcache.de*\nsudo rm /System/Library/PrelinkedKernels/prelinkedkernel.de*\nsudo kextcache -invalidate /\n\n\n# 3. 重新启用SIP\n\n * 恢复命令(如果之前通过恢复更改):\n\ncsrutil enable\ncsrutil authenticated-root enable # Big Sur+\n\n\n * config.plist更改(如果之前通过config.plist更改):\n   * 通过config.plist启用\n\n# 4. 清除引导参数\n\n不要忘记在你的引导参数中删除kcsuffix=\n\n# 5. 重新启动并检查您的工作\n\n假设一切都正确地完成了，现在要重新启动，检查是否引导了正确的内核:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: release\n\n\n正如我们所看到的，我们成功地引导了一个KASAN内核。",normalizedContent:"# 系统调试:深入\n\n本节将更深入地讨论故障排除，特别关注具有适当调试输出和可选串行设置的更低级的调试。\n\n注意:99%的用户不需要这种级别的调试，这只适用于核心或极端情况。\n\n\n\n * efi 设置\n * config.plist 设置\n   * misc\n   * nvram\n * 串行设置(可选)\n   * 硬件设置\n   * coolterm 设置\n * 内核调试工具包(可选)\n   * kdk在已安装的操作系统上\n   * 卸载kdk\n\n\n\n\n# efi 设置\n\n在大多数情况下，只需要相当小的更改。我们主要推荐的是debug版本的opencore和所有的kext。这可以帮助您获得所有必要的数据，有关opencore调试的更多详细信息，请参阅这里: opencore调试\n\n除了使用opencore和kexts的debug版本，这些工具也可以提供很大的帮助:\n\n * debugenhancer.kext\n   \n   * 极大地帮助内核调试，同时还修补了 kern.msgbuf to 10485760 ，并允许更大的内核日志。\n   * 注意这个kext不能与内核初始化一起启动，所以早期的日志不会被修补，直到kext在pci配置阶段之前加载\n\n * ssdt-dbg\n   \n   * 启用acpi表中的调试语句，帮助操作系统中的acpi事件调试\n   * 注意你需要编译ssdt\n\n\n# config.plist 设置\n\n对于串行设置，opencore实际上是非常直接的。\n\n\n# misc\n\n# serial\n\n * init: yes\n   * 从 opencore 初始化串口\n   * 需要将opencore日志发送到串口\n\n# debug\n\n * target: 67\n   * 启用opencore调试输出\n   * target = 75添加额外的串行输出标志(0x08)，如果你计划使用串行\n   * 你可以在这里计算你自己的值:opencore调试\n\n\n# nvram\n\n# boot-args\n\n在这里，我们要设置一些变量来帮助我们调试输出，对于我们来说，我们将使用以下的boot-args:\n\n-v keepsyms=1 debug=0x12a msgbuf=1048576\n\n\n现在让我们来看看每个arg的作用:\n\n * -v\n   * 启用详细输出\n * keepsyms=1\n   * 确保在内核发生严重故障时保留符号，这对故障排除非常有帮助\n * debug=0x12a\n   * combination of db_prt (0x2), db_kprt (0x8), db_slog (0x20), and db_log_pi_scrn (0x100)\n   * 最新版本xnu的完整列表可以在这里找到: debug.h\n * msgbuf=1048576\n   * 设置内核的消息缓冲区大小，这有助于在启动期间获得正确的日志\n   * 1048576 is 1mb(/1024^2), 如果需要可以更大\n   * 注意：debugenhancer kext不需要，但是对于早期的内核日志，它仍然是必需的\n\n其他有用的boot-args:\n\n根据你正在调试的内容，你可能还会发现这些boot-args非常有用:\n\n * -liludbgall\n   * 在lilu和任何其他插件上启用调试，但请注意，这需要调试版本的kext\n * io=0xff\n   * 启用iokit调试，输出更大。请注意，此参数的日志量将非常大，并将降低系统的速度。尤其是在启动的时候。\n * igdebug=0xff\n   * 开启igpu相关的调试，在使用igpu系统时很有用\n * serial=5\n   * 将输出重定向到串行如果你计划使用串行\n   * 推荐用于pci配置之前的早期内核输出\n * acpi_layer=0x8\n   * 启用acpi_tables调试，参见acoutput.h 了解更多信息\n   * 0xffffffff 也可以启用所有层\n * acpi_level=0x2\n   * 设置acpi_lv_debug_object调试，参见 acoutput.h 了解更多信息\n   * 0xffff5f 也可以表示 acpi_all_components\n\n\n# 串行设置(可选)\n\n * 硬件设置\n * efi 设置\n * config.plist 设置\n\n虽然是可选的，但串行仍然对抓取所有的信息超级有帮助。这也是正确记录超早期内核崩溃的唯一方法(例如在[eb|# log:exitbs:start]之后的事情)\n\n对于这个设置，你需要一些东西:\n\n * 测试机上的串行头/端口\n * 串行到串行或串行到usb电缆\n * 第二台机器接收串行日志记录(使用串行或usb)\n * 软件监控串行输出\n   * 在本指南中，我们将使用 coolterm ,因为它支持macos, linux, windows甚至树莓派\n   * screen 和其他方法也支持\n\n\n# 硬件设置\n\n对于这个例子，我们将使用华硕x299-e strix板，它有一个串行头。要确认您的单板是否自带串口，请查看单板的所有者或服务手册，并搜索串口/com端口:\n\n\n\n正如你所看到的，我们在主板的底部有一个com端口，如果你不使用9/10引脚串行头到db9适配器，甚至为我们手动连接我们的串行引脚提供了一个图表。\n\n或者，一些机器在后io上带有db9串行端口，例如这台dell optiplex 780 sff(注意vga和串行不是同一个连接器):\n\n对于我的x299设置，我使用一个简单的 串行头到db9, 然后一个 db9到usb rs 232适配器 最后终止在我的笔记本电脑:\n\nserial header to db9   db9 to usb rs 232 adapter\n                       \n\nopencore手册通常建议cp21202-based uart设备:\n\n> 要在引导期间获得日志，可以使用串口调试。在目标中打开串口调试，例如0xb表示onscreen with serial。opencore使用115200波特率，8个数据位，无奇偶校验和1个停止位。对于macos，最好的选择是基于cp2102的uart设备。将主板tx连接到usb uart rx，主板gnd连接到usb uart gnd。使用屏幕工具获取输出，或者下载gui软件，比如coolterm。 注意:在一些主板(可能是usb uart加密狗)pin命名可能不正确。gnd与rx交换是非常常见的，因此您必须将主板“tx”连接到usb uart gnd，并将主板“gnd”连接到usb uart rx。\n\n重要提醒:不要忘记在bios中启用串口，大多数主板默认情况下将禁用它\n\n\n# coolterm 设置\n\n现在让我们启动coolterm并设置一些选项。当您打开coolterm时，您可能会看到一个简单的窗口。在这里选择选项条目:\n\n\n\n这里给出了很多选项，但我们主要关心的是:\n\n * port: 确保与您的串行控制器匹配。\n * baudrate = 115200\n * data bits = 8\n * parity = 无\n * stop bit = 1\n\n接下来，保存这些设置，并选择connect条目。这将为你提供一个来自serial的实时日志:\n\n\n\n要记录，只需前往 connections -> capture to text/binary file -> start...(cmd+r):\n\n\n\n\n# 内核调试工具包(可选)\n\n * kdk on an installed os\n * uninstalling the kdk\n\n内核调试工具包(kdk)是一种从内核和核心kext获取更多日志信息的好方法，kdk具体来说是苹果自己提供的macos核心基础的调试版本。它们包括更多的日志记录和断言，允许您更直接地查看设置中的问题。但是请注意，我们不会讨论桥接调试或 lldb 的用法。\n\n警告: 在工作机器上安装kdk可能会导致操作系统更新和安装出现问题。请在专用的macos安装上调试，以避免数据丢失\n\n首先，我们至少需要一个来自苹果的免费开发者帐户 一旦您注册了最低限度的免费层，您现在可以从更多下载页面:\n\n * 注:免费等级将仅限于发布kdk，只有测试版kdk提供给付费开发者帐户\n * 注2:苹果早在os x 10.5和leopard时就有kdk了，所以不用担心你的操作系统不受支持\n\n\n\n要确定你需要哪个kdk版本的测试版，在终端中运行以下命令:\n\nsw_vers | grep buildversion\n\n\n为此，我将下载内核调试套件11.3 build 20e5186d。下载完成后，挂载磁盘镜像，就可以找到kdk安装程序了。默认情况下，kdk只会为了“执行双机调试”而安装自己，并且默认情况下不会为主机内核调试提供任何额外的好处。\n\n\n# kdk在已安装的操作系统上\n\n要在主机上启用调试，您需要执行以下操作:\n\n 1. 运行 kdk 安装 pkg\n 2. 关闭sip协议(os x 10.11+)\n 3. 以可写方式挂载根分区(macos 10.15+)\n 4. 安装调试内核和kext\n 5. 更新boot-args\n 6. 重新启动并检查您的工作\n\n# 1. 运行 kdk 安装 pkg\n\n正常运行pkg即可:\n\n\n\n安装完成后，你可以在/library/developer/kdks目录下找到kdk组件，例如调试内核:\n\n\n\n# 2. 禁用sip\n\n * 适用于os x 10.11, el capitan和更新版本\n\n禁用sip，用户有两种选择:\n\n * 通过恢复禁用\n\n * 通过config.plist禁用\n\n一般情况下，我们强烈建议恢复，以便通过nvram复位轻松恢复，但是一些用户可能需要通过nvram擦除禁用sip。\n\n对于前者，只需重新启动到macos恢复，打开终端并运行以下命令:\n\ncsrutil disable\ncsrutil authenticated-root disable # big sur+\n\n\n重新启动，sip将进行相应的调整。你可以在终端中运行csrutil status来验证它是否工作。\n\n * 注意: 对于依赖opencore的apecid功能的用户，请注意此 必须 被禁用才能使用kdk。\n\n# 3. 以可写方式挂载根分区\n\n * 适用于macos 10.15，卡特琳娜及更新版本\n\n将根卷挂载为可写卷很容易，但是这个过程有点长:\n\n# big sur+\n# 首先，为您的驱动器创建一个挂载点\nmkdir ~/livemount\n\n# 接下来，找到您的系统卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到我们的系统卷是disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# 安装驱动(即。disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# 现在您可以自由地对系统卷进行任何编辑\n\n\n# 仅限 catalina\nsudo mount -uw /\n\n\n# 4. 安装调试内核和kext\n\n现在我们将kdk安装到系统中:\n\n# 将kdk安装到系统卷\n# 确保替换<kdk版本>\n# 对于10.15及以上版本，用/volumes/<target volume>交换live挂载\nsudo ditto /library/developer/kdks/<kdk version>/system ~/livemount/system\n\n# 重建真实的内核缓存(大苏尔及更新版本)\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# 重建内核缓存(卡特琳娜和更老的版本)\nsudo kextcache -invalidate /volumes/<target volume>\n\n# 最后，一旦完成系统卷的编辑\n# 我们要创建一个新的快照(大苏尔和更新的)\nsudo bless --folder ~/livemount/system/library/coreservices --bootefi --create-snapshot\n\n\n# 5. 更新boot-args\n\n现在您已经完成了kdk的设置和安装，现在我们需要告诉boot.efi使用哪个内核。你有两个选择:\n\n * kcsuffix=debug (由big sur移除)\n * kcsuffix=development\n * kcsuffix=kasan\n\ndevelopment参数将在big sur中设置新的默认调试内核，而kasan是一个更注重日志记录的内核，包含addresssanitizer.\n\n一旦你决定了哪个内核最适合你，在config.plist中将kc后缀arg添加到boot-args中\n\n# 6. 重新启动并检查您的工作\n\n假设一切都正确地完成了，现在要重新启动，检查是否引导了正确的内核:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: kasan\n\n\n正如我们所看到的，我们成功地启动了kasan内核。\n\n\n# 卸载kdk\n\n卸载kdk相当简单，但是如果不小心，可能会有一点破坏性。\n\n 1. 将根分区挂载为可写(macos 10.15+)\n 2. 删除调试内核和kext\n 3. 重新启用sip\n 4. 清除引导参数\n 5. 重新启动并检查您的工作\n\n步骤:\n\n# 1. 将根分区挂载为可写(macos 10.15+)\n\n# big sur+\n# 首先，为您的驱动器创建一个挂载点\n# 上次挂载卷时仍然存在的跳过\nmkdir ~/livemount\n\n# 接下来，找到您的系统卷\ndiskutil list\n\n# 从下面的列表中，我们可以看到我们的系统卷是disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# 挂载驱动(即.disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n\n# 仅限卡特琳娜\nsudo mount -uw /\n\n\n# 2. 删除调试内核和kext\n\n# 恢复旧快照(big sur+)\nsudo bless --mount ~/livemount --bootefi --last-sealed-snapshot\n\n\n# 重置内核缓存(catalina及更老版本)\nsudo rm /system/library/caches/com.apple.kext.caches/startup/kernelcache.de*\nsudo rm /system/library/prelinkedkernels/prelinkedkernel.de*\nsudo kextcache -invalidate /\n\n\n# 3. 重新启用sip\n\n * 恢复命令(如果之前通过恢复更改):\n\ncsrutil enable\ncsrutil authenticated-root enable # big sur+\n\n\n * config.plist更改(如果之前通过config.plist更改):\n   * 通过config.plist启用\n\n# 4. 清除引导参数\n\n不要忘记在你的引导参数中删除kcsuffix=\n\n# 5. 重新启动并检查您的工作\n\n假设一切都正确地完成了，现在要重新启动，检查是否引导了正确的内核:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: release\n\n\n正如我们所看到的，我们成功地引导了一个kasan内核。",charsets:{cjk:!0}},{title:"一般故障处理",frontmatter:{},regularPath:"/troubleshooting/troubleshooting.html",relativePath:"troubleshooting/troubleshooting.md",key:"v-e6d98926",path:"/troubleshooting/troubleshooting.html",headers:[{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:195}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"目录",content:"# 一般故障处理\n\n本节是针对那些在启动OpenCore、macOS或macOS内部存在问题的人。如果你不知道在macOS引导过程中你被卡在了哪里，阅读macOS引导过程页面可以帮助你弄清楚。\n\n如果没有涉及你的问题，请阅读OpenCore的官方文档:Configuration.pdf。本文档涉及更多关于OpenCore如何工作的技术细节，并有更多关于所有支持的怪癖的详细信息。\n\n\n# 目录\n\n如果您不确定您目前卡在哪里，请参阅这里:了解macOS引导过程\n\n * OpenCore引导问题\n   * 这一节指的是启动实际的USB和获得OpenCore的选择器。在选择器之后的任何操作，比如启动macOS，都应该在下面看到\n * 内核空间问题\n   * 涵盖从你在OpenCore菜单中选择macOS开始，直到苹果logo和安装程序GUI加载之前的所有早期启动中发生的所有事情\n * 用户空间问题\n   * 涵盖从加载macOS的GUI到在硬盘上安装macOS的整个过程\n * 安装后的问题\n   * 涵盖macOS安装并完全引导后的问题\n * 杂项问题\n   * 涵盖macOS安装后或其他操作系统的问题",normalizedContent:"# 一般故障处理\n\n本节是针对那些在启动opencore、macos或macos内部存在问题的人。如果你不知道在macos引导过程中你被卡在了哪里，阅读macos引导过程页面可以帮助你弄清楚。\n\n如果没有涉及你的问题，请阅读opencore的官方文档:configuration.pdf。本文档涉及更多关于opencore如何工作的技术细节，并有更多关于所有支持的怪癖的详细信息。\n\n\n# 目录\n\n如果您不确定您目前卡在哪里，请参阅这里:了解macos引导过程\n\n * opencore引导问题\n   * 这一节指的是启动实际的usb和获得opencore的选择器。在选择器之后的任何操作，比如启动macos，都应该在下面看到\n * 内核空间问题\n   * 涵盖从你在opencore菜单中选择macos开始，直到苹果logo和安装程序gui加载之前的所有早期启动中发生的所有事情\n * 用户空间问题\n   * 涵盖从加载macos的gui到在硬盘上安装macos的整个过程\n * 安装后的问题\n   * 涵盖macos安装并完全引导后的问题\n * 杂项问题\n   * 涵盖macos安装后或其他操作系统的问题",charsets:{cjk:!0}},{title:"为什么OpenCore超过Clover和其他公司",frontmatter:{},regularPath:"/why-oc.html",relativePath:"why-oc.md",key:"v-3a54b007",path:"/why-oc.html",headers:[{level:2,title:"OpenCore特性",slug:"opencore特性",normalizedTitle:"opencore特性",charIndex:102},{level:3,title:"软件支持",slug:"软件支持",normalizedTitle:"软件支持",charIndex:118},{level:2,title:"OpenCore的缺点",slug:"opencore的缺点",normalizedTitle:"opencore的缺点",charIndex:126},{level:2,title:"常见的误区",slug:"常见的误区",normalizedTitle:"常见的误区",charIndex:141},{level:3,title:"OpenCore还是测试版，所以不稳定吗?",slug:"opencore还是测试版-所以不稳定吗",normalizedTitle:"opencore还是测试版，所以不稳定吗?",charIndex:152},{level:3,title:"OpenCore是否总是在其他操作系统中注入SMBIOS和ACPI数据?",slug:"opencore是否总是在其他操作系统中注入smbios和acpi数据",normalizedTitle:"opencore是否总是在其他操作系统中注入smbios和acpi数据?",charIndex:179},{level:3,title:"OpenCore需要全新安装吗?",slug:"opencore需要全新安装吗",normalizedTitle:"opencore需要全新安装吗?",charIndex:221},{level:3,title:"OpenCore只支持macOS的有限版本吗?",slug:"opencore只支持macos的有限版本吗",normalizedTitle:"opencore只支持macos的有限版本吗?",charIndex:243},{level:3,title:"OpenCore支持旧的硬件吗?",slug:"opencore支持旧的硬件吗",normalizedTitle:"opencore支持旧的硬件吗?",charIndex:272},{level:3,title:"OpenCore支持Windows/Linux引导吗?",slug:"opencore支持windows-linux引导吗",normalizedTitle:"opencore支持windows/linux引导吗?",charIndex:294},{level:3,title:"Hackintoshing的合法性",slug:"hackintoshing的合法性",normalizedTitle:"hackintoshing的合法性",charIndex:327},{level:3,title:"macOS支持NVIDIA gpu吗?",slug:"macos支持nvidia-gpu吗",normalizedTitle:"macos支持nvidia gpu吗?",charIndex:350}],lastUpdated:"2023/2/4 05:10:17",lastUpdatedTimestamp:1675487417e3,headersStr:"OpenCore特性 软件支持 OpenCore的缺点 常见的误区 OpenCore还是测试版，所以不稳定吗? OpenCore是否总是在其他操作系统中注入SMBIOS和ACPI数据? OpenCore需要全新安装吗? OpenCore只支持macOS的有限版本吗? OpenCore支持旧的硬件吗? OpenCore支持Windows/Linux引导吗? Hackintoshing的合法性 macOS支持NVIDIA gpu吗?",content:"# 为什么OpenCore超过Clover和其他公司\n\n本节简要介绍了为什么社区已经过渡到OpenCore，并旨在消除社区中常见的一些误解。那些只是想要一台macOS机器的人可以跳过这一页。\n\n\n\n * OpenCore特性\n   * 软件支持\n * OpenCore的缺点\n * 常见的误区\n   * OpenCore还是测试版，所以不稳定吗?\n   * OpenCore是否总是在其他操作系统中注入SMBIOS和ACPI数据?\n   * OpenCore需要全新安装吗?\n   * OpenCore只支持macOS的有限版本吗?\n   * OpenCore支持旧的硬件吗?\n   * OpenCore支持Windows/Linux引导吗?\n   * Hackintoshing的合法性\n   * macOS支持NVIDIA gpu吗?\n\n\n\n\n# OpenCore特性\n\n * 更多的操作系统支持!\n   * OpenCore现在支持更多版本的OS X和macOS，而无需Clover和Chameleon必须实现的痛苦hack\n   * 这包括早在10.4、Tiger的操作系统，甚至是13的最新版本Ventura!\n * 平均而言，OpenCore系统的启动速度比使用Clover的系统要快，因为不必要的补丁要少\n * 更好的整体稳定性，补丁可以更精确:\n   * macOS 10.15.4 更新\n   * AMD OSX补丁不需要在每个小的安全更新中更新\n * 以多种形式提高整体安全性:\n   * 不需要禁用系统完整性保护(SIP)\n   * 内置FileVault 2支持\n   * Vaulting 允许创建EFI快照防止不必要的修改\n   * 真正的安全引导支持\n     * 包括UEFI和苹果的变种\n * BootCamp切换和启动设备选择通过读取启动盘设置的NVRAM变量来支持，就像真正的Mac一样。\n * 通过引导支持引导热键。efi - hold启动时选择启动设备的选项或ESC, Cmd+R进入恢复或Cmd+Opt+P+R复位NVRAM。\n\n\n# 软件支持\n\n一些人想要从其他引导加载程序转换的最大原因实际上是软件支持:\n\n * Kexts不再测试Clover:\n   * kext出问题了? 许多开发人员，包括 Acidanthera (您最喜欢的大多数kext的制造商) 除非在OpenCore上，否则不会提供支持\n * 许多固件驱动程序被合并到OpenCore:\n   * APFS 支持\n   * FileVault 支持\n   * Firmware 补丁\n\n\n# OpenCore的缺点\n\nClover的大部分功能实际上在OpenCore中以一些奇怪的形式得到了支持，但是在过渡时，你应该密切关注OpenCore缺失的功能，因为这可能会影响到你自己:\n\n * 不支持引导基于mbr的操作系统\n   * 解决方法是在OpenCore中链式加载rEFInd一次\n * 不支持基于uefi的VBIOS补丁\n   * 但是在macOS中可以这样做\n * 不支持传统gpu的自动设备属性注入\n   * 例如:InjectIntel, InjectNVIDIA InjectAti\n   * 然而,可以手动: GPU patching\n * 不支持IRQ冲突补丁\n   * 可以使用 SSDTTime\n * 不支持旧的cpu生成P和C状态\n * 不支持硬件UUID注入\n * 不支持Clover的许多XCPM补丁\n   * 例如：Ivy Bridge XCPM补丁\n * 不支持隐藏特定的驱动器\n * 不支持在OpenCore的菜单内改变设置\n * 不修补PCIRoot UID值\n * 不支持macos特有的ACPI补丁\n\n\n# 常见的误区\n\n\n# OpenCore还是测试版，所以不稳定吗?\n\n简短的回答:不\n\n长答案:不是\n\nOpenCore的版本号并不代表项目的质量。相反，它更多的是一种看到项目的垫脚石的方式。Acidanthera仍然有很多他们想要做的项目，包括全面的改进和更多的功能支持。\n\n例如，OpenCore通过适当的安全审计以确保符合UEFI Secure Boot，并且是唯一经过这些严格审查并具有此类支持的Hackintosh引导加载程序。\n\n版本0.6.1最初被设计为OpenCore的官方发布版本，因为它将拥有适当的UEFI/Apple Secure Boot，并将是OpenCore作为公共工具发布的一周年。然而，由于macOS Big Sur周围的情况以及OpenCore的预链接器的重写以支持它，它决定将1.0.0推迟一年。\n\n目前的路线图：\n\n * 2019年:测试年\n * 2020年:安全启动之年\n * 2021年:改进之年\n\n所以请不要把版本号看作是一个障碍，而应该看作是值得期待的东西。\n\n\n# OpenCore是否总是在其他操作系统中注入SMBIOS和ACPI数据?\n\n默认情况下，OpenCore将假设所有操作系统都应该平等对待ACPI和SMBIOS信息。这种想法的原因包括三个部分:\n\n * 这允许正确的多引导支持，如 BootCamp\n * 避免制作不良的dsdt，并鼓励适当的ACPI实践\n * 避免信息被多次注入的边缘情况，通常在Clover中看到\n   * 例如：一旦启动boot.efi，你将如何处理SMBIOS和ACPI数据注入， 但后来被赶出去吗? 因此试图撤消它们可能相当危险。这就是为什么Clover的方法是不被允许的。\n\n然而，在OpenCore中有一些奇怪的地方允许SMBIOS注入受到macOS的限制，这是通过为macOS读取SMBIOS信息的地方打补丁实现的。 将 CustomSMBIOSMode设置为Custom的CustomSMIOSGuid怪癖可能会在未来中断，因此我们只建议在其他操作系统中某些软件中断的情况下使用此选项。为了最好的稳定性，请禁用这些怪癖。\n\n\n# OpenCore需要全新安装吗?\n\n如果你有一个“Vanilla”安装，那就完全不需要了——这指的是操作系统是否以任何方式被篡改了，比如将第三方kext安装到系统卷或其他苹果不支持的修改。当你的系统被严重篡改，无论是你还是第三方工具，如Hackintool，我们建议重新安装，以避免任何潜在的问题。\n\n特别提醒Clover用户:安装OpenCore时，请重置NVRAM。Clover的许多变量可能与OpenCore和macOS冲突。\n\n * 注:众所周知，Thinkpad笔记本电脑在OpenCore中NVRAM重置后是半砖的，我们建议通过更新这些机器的BIOS来重置NVRAM。\n\n\n# OpenCore只支持macOS的有限版本吗?\n\n从OpenCore 0.6.2开始，你现在可以启动每个Intel版本的macOS，一直到OS X 10.4!正确的支持取决于您的硬件，所以请自行验证:硬件限制\n\n::: macOS安装库的详细信息\n\nAcidanthera测试了很多版本的OS X，我自己也在我的旧HP DC 7900 (Core2 Quad Q8300)上运行过很多版本的OS X。以下是我测试过的一小部分:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n# OpenCore支持旧的硬件吗?\n\n到目前为止，只要操作系统本身支持，大多数英特尔硬件都是受支持的!但是，请参阅硬件限制页面 以了解OS X/macOS的哪些版本支持哪些硬件。\n\n目前，英特尔的Yonah和新系列cpu已经通过OpenCore进行了适当的测试。\n\n\n# OpenCore支持Windows/Linux引导吗?\n\nOpenCore将自动检测Windows而无需任何额外配置。 在OpenCore 0.7.3中，OpenLinuxBoot作为EFI驱动程序添加到OpenCore中，它将自动检测Linux分区。这需要ext4_x64.efi 或 btrfs_x64.efi具体取决于在发行版中使用的格式。对于引导加载程序具有不规则路径或名称的任何操作系统，您可以简单地将其添加到BlessOverride部分。\n\n\n# Hackintoshing的合法性\n\nhackintoshing位于法律的灰色地带，主要是因为虽然这并不违法，但我们实际上违反了EULA。这不是违法的原因:\n\n * 我们从苹果的服务器直接下载macOS\n * 我们是作为一个教学和个人使用的非营利组织来做这件事的\n   * 计划将Hackintosh用于工作或想转售它们的人应该参考 Psystar 案例 和他们的地区法律\n\n虽然EULA规定macOS只能安装在真正的mac电脑或在真正的mac电脑上运行的虚拟机上 (第2B-i和2B-iii节),但没有强制执行的法律完全禁止这一点。 然而，重新打包和修改macOS安装程序的网站确实存在 DMCA takedowns 等问题的潜在风险\n\n * 注意: 这不是法律建议，所以请自己进行适当的评估，如果您有任何疑问，请与您的律师讨论。\n\n\n# macOS支持NVIDIA gpu吗?\n\n由于在macOS的新版本中围绕NVIDIA支持的问题，许多用户得出结论，macOS从未支持NVIDIA gpu。直到Monterey Beta 7发布之前，苹果都支持使用NVIDIA gpu的mac电脑(例如2013年使用Kepler dGPU的MacBook Pro)。虽然有社区制作的补丁可以恢复支持，但它们需要禁用SIP(系统完整性保护)，从而禁用macOS中的重要安全功能。\n\n另一个问题与任何新的NVIDIA gpu有关，因为苹果停止了与它们一起发货的机器，因此它们从来没有得到苹果的官方操作系统支持。相反，用户不得不依赖NVIDIA的第三方驱动。由于苹果新推出的安全引导的问题，他们不能再支持网络驱动程序，因此NVIDIA不能在更新的平台上发布它们，限制它们在mac OS 10.13, High Sierra。\n\n有关操作系统支持的更多信息，请参阅这里: GPU买家指南",normalizedContent:"# 为什么opencore超过clover和其他公司\n\n本节简要介绍了为什么社区已经过渡到opencore，并旨在消除社区中常见的一些误解。那些只是想要一台macos机器的人可以跳过这一页。\n\n\n\n * opencore特性\n   * 软件支持\n * opencore的缺点\n * 常见的误区\n   * opencore还是测试版，所以不稳定吗?\n   * opencore是否总是在其他操作系统中注入smbios和acpi数据?\n   * opencore需要全新安装吗?\n   * opencore只支持macos的有限版本吗?\n   * opencore支持旧的硬件吗?\n   * opencore支持windows/linux引导吗?\n   * hackintoshing的合法性\n   * macos支持nvidia gpu吗?\n\n\n\n\n# opencore特性\n\n * 更多的操作系统支持!\n   * opencore现在支持更多版本的os x和macos，而无需clover和chameleon必须实现的痛苦hack\n   * 这包括早在10.4、tiger的操作系统，甚至是13的最新版本ventura!\n * 平均而言，opencore系统的启动速度比使用clover的系统要快，因为不必要的补丁要少\n * 更好的整体稳定性，补丁可以更精确:\n   * macos 10.15.4 更新\n   * amd osx补丁不需要在每个小的安全更新中更新\n * 以多种形式提高整体安全性:\n   * 不需要禁用系统完整性保护(sip)\n   * 内置filevault 2支持\n   * vaulting 允许创建efi快照防止不必要的修改\n   * 真正的安全引导支持\n     * 包括uefi和苹果的变种\n * bootcamp切换和启动设备选择通过读取启动盘设置的nvram变量来支持，就像真正的mac一样。\n * 通过引导支持引导热键。efi - hold启动时选择启动设备的选项或esc, cmd+r进入恢复或cmd+opt+p+r复位nvram。\n\n\n# 软件支持\n\n一些人想要从其他引导加载程序转换的最大原因实际上是软件支持:\n\n * kexts不再测试clover:\n   * kext出问题了? 许多开发人员，包括 acidanthera (您最喜欢的大多数kext的制造商) 除非在opencore上，否则不会提供支持\n * 许多固件驱动程序被合并到opencore:\n   * apfs 支持\n   * filevault 支持\n   * firmware 补丁\n\n\n# opencore的缺点\n\nclover的大部分功能实际上在opencore中以一些奇怪的形式得到了支持，但是在过渡时，你应该密切关注opencore缺失的功能，因为这可能会影响到你自己:\n\n * 不支持引导基于mbr的操作系统\n   * 解决方法是在opencore中链式加载refind一次\n * 不支持基于uefi的vbios补丁\n   * 但是在macos中可以这样做\n * 不支持传统gpu的自动设备属性注入\n   * 例如:injectintel, injectnvidia injectati\n   * 然而,可以手动: gpu patching\n * 不支持irq冲突补丁\n   * 可以使用 ssdttime\n * 不支持旧的cpu生成p和c状态\n * 不支持硬件uuid注入\n * 不支持clover的许多xcpm补丁\n   * 例如：ivy bridge xcpm补丁\n * 不支持隐藏特定的驱动器\n * 不支持在opencore的菜单内改变设置\n * 不修补pciroot uid值\n * 不支持macos特有的acpi补丁\n\n\n# 常见的误区\n\n\n# opencore还是测试版，所以不稳定吗?\n\n简短的回答:不\n\n长答案:不是\n\nopencore的版本号并不代表项目的质量。相反，它更多的是一种看到项目的垫脚石的方式。acidanthera仍然有很多他们想要做的项目，包括全面的改进和更多的功能支持。\n\n例如，opencore通过适当的安全审计以确保符合uefi secure boot，并且是唯一经过这些严格审查并具有此类支持的hackintosh引导加载程序。\n\n版本0.6.1最初被设计为opencore的官方发布版本，因为它将拥有适当的uefi/apple secure boot，并将是opencore作为公共工具发布的一周年。然而，由于macos big sur周围的情况以及opencore的预链接器的重写以支持它，它决定将1.0.0推迟一年。\n\n目前的路线图：\n\n * 2019年:测试年\n * 2020年:安全启动之年\n * 2021年:改进之年\n\n所以请不要把版本号看作是一个障碍，而应该看作是值得期待的东西。\n\n\n# opencore是否总是在其他操作系统中注入smbios和acpi数据?\n\n默认情况下，opencore将假设所有操作系统都应该平等对待acpi和smbios信息。这种想法的原因包括三个部分:\n\n * 这允许正确的多引导支持，如 bootcamp\n * 避免制作不良的dsdt，并鼓励适当的acpi实践\n * 避免信息被多次注入的边缘情况，通常在clover中看到\n   * 例如：一旦启动boot.efi，你将如何处理smbios和acpi数据注入， 但后来被赶出去吗? 因此试图撤消它们可能相当危险。这就是为什么clover的方法是不被允许的。\n\n然而，在opencore中有一些奇怪的地方允许smbios注入受到macos的限制，这是通过为macos读取smbios信息的地方打补丁实现的。 将 customsmbiosmode设置为custom的customsmiosguid怪癖可能会在未来中断，因此我们只建议在其他操作系统中某些软件中断的情况下使用此选项。为了最好的稳定性，请禁用这些怪癖。\n\n\n# opencore需要全新安装吗?\n\n如果你有一个“vanilla”安装，那就完全不需要了——这指的是操作系统是否以任何方式被篡改了，比如将第三方kext安装到系统卷或其他苹果不支持的修改。当你的系统被严重篡改，无论是你还是第三方工具，如hackintool，我们建议重新安装，以避免任何潜在的问题。\n\n特别提醒clover用户:安装opencore时，请重置nvram。clover的许多变量可能与opencore和macos冲突。\n\n * 注:众所周知，thinkpad笔记本电脑在opencore中nvram重置后是半砖的，我们建议通过更新这些机器的bios来重置nvram。\n\n\n# opencore只支持macos的有限版本吗?\n\n从opencore 0.6.2开始，你现在可以启动每个intel版本的macos，一直到os x 10.4!正确的支持取决于您的硬件，所以请自行验证:硬件限制\n\n::: macos安装库的详细信息\n\nacidanthera测试了很多版本的os x，我自己也在我的旧hp dc 7900 (core2 quad q8300)上运行过很多版本的os x。以下是我测试过的一小部分:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n# opencore支持旧的硬件吗?\n\n到目前为止，只要操作系统本身支持，大多数英特尔硬件都是受支持的!但是，请参阅硬件限制页面 以了解os x/macos的哪些版本支持哪些硬件。\n\n目前，英特尔的yonah和新系列cpu已经通过opencore进行了适当的测试。\n\n\n# opencore支持windows/linux引导吗?\n\nopencore将自动检测windows而无需任何额外配置。 在opencore 0.7.3中，openlinuxboot作为efi驱动程序添加到opencore中，它将自动检测linux分区。这需要ext4_x64.efi 或 btrfs_x64.efi具体取决于在发行版中使用的格式。对于引导加载程序具有不规则路径或名称的任何操作系统，您可以简单地将其添加到blessoverride部分。\n\n\n# hackintoshing的合法性\n\nhackintoshing位于法律的灰色地带，主要是因为虽然这并不违法，但我们实际上违反了eula。这不是违法的原因:\n\n * 我们从苹果的服务器直接下载macos\n * 我们是作为一个教学和个人使用的非营利组织来做这件事的\n   * 计划将hackintosh用于工作或想转售它们的人应该参考 psystar 案例 和他们的地区法律\n\n虽然eula规定macos只能安装在真正的mac电脑或在真正的mac电脑上运行的虚拟机上 (第2b-i和2b-iii节),但没有强制执行的法律完全禁止这一点。 然而，重新打包和修改macos安装程序的网站确实存在 dmca takedowns 等问题的潜在风险\n\n * 注意: 这不是法律建议，所以请自己进行适当的评估，如果您有任何疑问，请与您的律师讨论。\n\n\n# macos支持nvidia gpu吗?\n\n由于在macos的新版本中围绕nvidia支持的问题，许多用户得出结论，macos从未支持nvidia gpu。直到monterey beta 7发布之前，苹果都支持使用nvidia gpu的mac电脑(例如2013年使用kepler dgpu的macbook pro)。虽然有社区制作的补丁可以恢复支持，但它们需要禁用sip(系统完整性保护)，从而禁用macos中的重要安全功能。\n\n另一个问题与任何新的nvidia gpu有关，因为苹果停止了与它们一起发货的机器，因此它们从来没有得到苹果的官方操作系统支持。相反，用户不得不依赖nvidia的第三方驱动。由于苹果新推出的安全引导的问题，他们不能再支持网络驱动程序，因此nvidia不能在更新的平台上发布它们，限制它们在mac os 10.13, high sierra。\n\n有关操作系统支持的更多信息，请参阅这里: gpu买家指南",charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,heroImage:"/dortania-logo-clear.png",heroText:"OpenCore Install Guide",actionText:"Start→",actionLink:"prerequisites.md",meta:[{name:"描述",content:"当前支持的版本 0.8.8"}]},regularPath:"/zh/",relativePath:"zh/README.md",key:"v-337d85be",path:"/zh/",lastUpdated:"2/4/2023, 5:10:17 AM",lastUpdatedTimestamp:1675487417e3,headersStr:null,content:"# 此页面为中转页面\n\n如需访问英文原版页面请查阅：OpenCore-Install-Guide\n\n中文翻译由宿命提供，由星座三太子校对，此翻译受限于作者及贡献者的个人喜好及个人理解，并非是dortania官方翻译。\n\n黑果交流QQ群：796661960",normalizedContent:"# 此页面为中转页面\n\n如需访问英文原版页面请查阅：opencore-install-guide\n\n中文翻译由宿命提供，由星座三太子校对，此翻译受限于作者及贡献者的个人喜好及个人理解，并非是dortania官方翻译。\n\n黑果交流qq群：796661960",charsets:{cjk:!0}}],themeConfig:{lastUpdated:!0,smoothScroll:!0,repo:"https://github.com/sumingyd/OpenCore-Install-Guide",editLinks:!0,logo:"/homepage.png",locales:{"/":{label:"简体中文",selectText:"选择语言",ariaLabel:"选择语言",editLinkText:"在 GitHub 上编辑此页",lastUpdated:"上次更新",nav:[{text:"指南菜单",items:[{text:"主页面",link:"https://sumingyd.github.io/OpenCore-Install-Guide/"},{text:"ACPI入门(建设中)",link:"https://sumingyd.github.io/Getting-Started-With-ACPI/"},{text:"OpenCore安装后(建设中)",link:"https://sumingyd.github.io/OpenCore-Post-Install/"},{text:"OpenCore多引导(建设中)",link:"https://sumingyd.github.io/OpenCore-Multiboot/"},{text:"显卡购买指南(建设中)",link:"https://sumingyd.github.io/GPU-Buyers-Guide/"},{text:"无线购买指南(建设中)",link:"https://sumingyd.github.io/Wireless-Buyers-Guide/"},{text:"避免购买指南(建设中)",link:"https://sumingyd.github.io/Anti-Hackintosh-Buyers-Guide/"}]}],sidebar:[{title:"介绍",collapsable:!1,sidebarDepth:1,children:["prerequisites","macos-limits","find-hardware","terminology","why-oc"]},{title:"制作引导U盘",collapsable:!1,sidebarDepth:2,children:[{title:"制作引导U盘",collapsable:!0,path:"/installer-guide/",sidebarDepth:1,children:["/installer-guide/mac-install","/installer-guide/windows-install","/installer-guide/linux-install"]},"/installer-guide/opencore-efi","ktext",["https://sumingyd.github.io/Getting-Started-With-ACPI/","ACPI入门(建设中)"],"/config.plist/"]},{title:"配置",collapsable:!1,children:[{title:"Intel 台式电脑配置文件",collapsable:!0,sidebarDepth:1,children:[["/config.plist/penryn","Penryn"],["/config.plist/clarkdale","Clarkdale"],["/config.plist/sandy-bridge","Sandy Bridge"],["/config.plist/ivy-bridge","Ivy Bridge"],["/config.plist/haswell","Haswell"],["/config.plist/skylake","Skylake"],["/config.plist/kaby-lake","Kaby Lake"],["/config.plist/coffee-lake","Coffee Lake"],["/config.plist/comet-lake","Comet Lake"]]},{title:"Intel 笔记本电脑配置文件",collapsable:!0,sidebarDepth:1,children:[["/config-laptop.plist/arrandale","Arrandale"],["/config-laptop.plist/sandy-bridge","Sandy Bridge"],["/config-laptop.plist/ivy-bridge","Ivy Bridge"],["/config-laptop.plist/haswell","Haswell"],["/config-laptop.plist/broadwell","Broadwell"],["/config-laptop.plist/skylake","Skylake"],["/config-laptop.plist/kaby-lake","Kaby Lake"],["/config-laptop.plist/coffee-lake","Coffee Lake and Whiskey Lake"],["/config-laptop.plist/coffee-lake-plus","Coffee Lake Plus and Comet Lake"],["/config-laptop.plist/icelake","Ice Lake"]]},{title:"Intel HEDT配置文件",collapsable:!0,sidebarDepth:1,children:["/config-HEDT/nehalem","/config-HEDT/ivy-bridge-e","/config-HEDT/haswell-e","/config-HEDT/broadwell-e","/config-HEDT/skylake-x"]},{title:"AMD 台式电脑配置文件",collapsable:!0,sidebarDepth:1,children:["/AMD/fx","/AMD/zen"]},["/config.plist/security","苹果安全启动"]]},{title:"安装",collapsable:!1,children:["/installation/installation-process"]},{title:"故障诊断",collapsable:!1,children:["/troubleshooting/troubleshooting",{title:"",collapsable:!1,children:["/troubleshooting/extended/opencore-issues","/troubleshooting/extended/kernel-issues","/troubleshooting/extended/userspace-issues","/troubleshooting/extended/post-issues","/troubleshooting/extended/misc-issues"]},"/troubleshooting/debug","/troubleshooting/boot","/troubleshooting/kernel-debugging"]},{title:"安装后(建设中)",collapsable:!1,children:[["https://sumingyd.github.io/OpenCore-Post-Install/","安装后"],{title:"通用",collapsable:!0,sidebarDepth:1,children:[["https://sumingyd.github.io/OpenCore-Post-Install/universal/security","安全与文件库"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/audio","修复音频"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/oc2hdd","无 USB 引导"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/update","更新 OpenCore、kext 和 macOS"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/drm","修复 DRM"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/iservices","修复 iServices"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/pm","修复电源管理"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/sleep","修复睡眠"],["https://sumingyd.github.io/OpenCore-Post-Install/usb/","修复 USB"]]},{title:"笔记本电脑",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Post-Install/laptop-specific/battery","修复电池读数"]]},{title:"美化",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Post-Install/cosmetic/verbose","修复分辨率和啰嗦模式"],["https://sumingyd.github.io/OpenCore-Post-Install/cosmetic/gui","添加GUI和开机铃声"]]},{title:"多引导",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Multiboot/","OpenCore多引导"],["https://sumingyd.github.io/OpenCore-Post-Install/multiboot/bootstrap","设置启动选项"],["https://sumingyd.github.io/OpenCore-Post-Install/multiboot/bootcamp","安装Boot Camp"]]},{title:"其他",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Post-Install/misc/rtc","修复 RTC"],["https://sumingyd.github.io/OpenCore-Post-Install/misc/msr-lock","修复 CFG Lock"],["https://sumingyd.github.io/OpenCore-Post-Install/misc/nvram","模拟NVRAM"]]}]},{title:"额外",collapsable:!1,sidebarDepth:2,children:["/extras/kaslr-fix","/extras/spoof","/extras/ventura",["https://github.com/sumingyd/OpenCore-Install-Guide/tree/master/clover-conversion","Clover 的转换（建设中）"],"/extras/smbios-support.md"]},{title:"其他",collapsable:!1,children:["CONTRIBUTING","/misc/credit"]}]},"/zh/":{label:"English",selectText:"Languages",ariaLabel:"Select language",editLinkText:"Edit this page on GitHub",lastUpdated:"Last Updated"}}},locales:{"/":{lang:"zh-CN",title:"OpenCore安装指南",description:"中文版OpenCore安装指南",path:"/"},"/zh/":{lang:"en-US",title:"OpenCore Install Guide",description:"OpenCore Install Guide",path:"/zh/"}}};t(236);jt.component("Badge",()=>Promise.all([t.e(0),t.e(48)]).then(t.bind(null,614))),jt.component("ThemeManager",()=>t.e(58).then(t.bind(null,536))),jt.component("Badge",()=>Promise.all([t.e(0),t.e(45)]).then(t.bind(null,615))),jt.component("CodeBlock",()=>Promise.all([t.e(0),t.e(46)]).then(t.bind(null,537))),jt.component("CodeGroup",()=>Promise.all([t.e(0),t.e(47)]).then(t.bind(null,538)));t(237);var Ys={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",Ss()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},js=(t(238),Object(zs.a)(Ys,(function(){var e=this._self._c;return e("transition",{attrs:{name:"fade"}},[this.show?e("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[e("g",{attrs:{transform:"translate(-229 -126.358)"}},[e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports);t(239);function Ks(e){const n=document.documentElement.getBoundingClientRect(),t=e.getBoundingClientRect();return{x:t.left-n.left,y:t.top-n.top}}var Xs=[{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:e})=>{e.component("BackToTop",js)},({Vue:e,router:n})=>{n.options.scrollBehavior=(n,t,o)=>{if(o)return window.scrollTo({top:o.y,behavior:"smooth"});if(n.hash){if(e.$vuepress.$get("disableScrollBehavior"))return!1;const t=document.querySelector(n.hash);return!!t&&window.scrollTo({top:Ks(t).y,behavior:"smooth"})}return window.scrollTo({top:0,behavior:"smooth"})}}],Ws=t(87);class Qs extends class{constructor(){this.store=new jt({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,n){jt.set(this.store.state,e,n)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign(Qs.prototype,{getPageAsyncComponent:rs,getLayoutAsyncComponent:ss,getAsyncComponent:ls,getVueComponent:ds});var $s={install(e){const n=new Qs;e.$vuepress=n,e.prototype.$vuepress=n}};function Js(e,n){const t=n.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===t)}var Zs={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const n=this.pageKey||this.$parent.$page.key;return us("pageKey",n),jt.component(n)||jt.component(n,rs(n)),jt.component(n)?e(n):e("")}},el={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:n,slots:t})=>e("div",{class:["content__"+n.slotKey]},t()[n.slotKey])},nl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},tl=(t(240),t(241),Object(zs.a)(nl,(function(){var e=this._self._c;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),ol={functional:!0,render(e,{parent:n,children:t}){if(n._isMounted)return t;n.$once("hook:mounted",()=>{n.$forceUpdate()})}};jt.config.productionTip=!1,jt.use(Hr),jt.use($s),jt.mixin(function(e,n,t=jt){!function(e){e.locales&&Object.keys(e.locales).forEach(n=>{e.locales[n].path=n});Object.freeze(e)}(n),t.$vuepress.$set("siteData",n);const o=new(e(t.$vuepress.$get("siteData"))),i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(i).reduce((e,n)=>(n.startsWith("$")&&(e[n]=i[n].get),e),a),{computed:a}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let n,t;for(const o in e)"/"===o?t=e[o]:0===this.$page.path.indexOf(o)&&(n=e[o]);return n||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:n}=this.$page.frontmatter;if("string"==typeof n)return n;const t=this.$siteTitle,o=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?o?o+" | "+t:t:o||"VuePress"}get $description(){const e=function(e){if(e){const n=e.filter(e=>"description"===e.name)[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,n){for(let t=0;t<e.length;t++){const o=e[t];if(o.path.toLowerCase()===n.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},Hs)),jt.component("Content",Zs),jt.component("ContentSlotsDistributor",el),jt.component("OutboundLink",tl),jt.component("ClientOnly",ol),jt.component("Layout",ss("Layout")),jt.component("NotFound",ss("NotFound")),jt.prototype.$withBase=function(e){const n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.9.8",hash:"9a3162f"},async function(e){const n="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Hs.routerBase||Hs.base,t=new Hr({base:n,mode:"history",fallback:!1,routes:Vs,scrollBehavior:(e,n,t)=>t||(e.hash?!jt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((n,t,o)=>{if(Js(e,n.path))o();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){const t=n.path.replace(/\/$/,"")+".html";Js(e,t)?o(t):o()}else o();else{const t=n.path+"/",i=n.path+".html";Js(e,i)?o(i):Js(e,t)?o(t):o()}})}(t);const o={};try{await Promise.all(Xs.filter(e=>"function"==typeof e).map(n=>n({Vue:jt,options:o,router:t,siteData:Hs,isServer:e})))}catch(e){console.error(e)}return{app:new jt(Object.assign(o,{router:t,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Ws.a.map(n=>e(n)))])})),router:t}}(!1).then(({app:e,router:n})=>{n.onReady(()=>{e.$mount("#app")})})}]);